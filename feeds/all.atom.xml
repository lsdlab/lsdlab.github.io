<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>BreakWire</title><link href="https://breakwire.me/" rel="alternate"></link><link href="//feeds/all.atom.xml" rel="self"></link><id>https://breakwire.me/</id><updated>2017-12-14T13:48:38+08:00</updated><entry><title>Ubuntu 16.04 快糙猛安装部署 Wordpress</title><link href="https://breakwire.me/fast-install-wordpress-on-ubuntu16.04.html" rel="alternate"></link><published>2017-12-14T13:48:38+08:00</published><updated>2017-12-14T13:48:38+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2017-12-14:/fast-install-wordpress-on-ubuntu16.04.html</id><summary type="html">&lt;p&gt;终于，我也会装 Wordpress 了……&lt;/p&gt;</summary><content type="html">&lt;p&gt;最早玩 Linux 服务器也不知道拿来干啥，就联系联系命令，后来学了 Django，能写个简单的应用然后部署了，Django 部署其实很容易，但对于新手来说还要处理各种依赖安装失败，简直噩梦，后来用的多了，有经验了，再加上使用场景也多了。服务器在 DigitalOcean 上也是随便开着用，想玩个爬虫就临时开机器出来用，安装配置也是分分钟的事儿，处理什么依赖安装失败也很容易，随便搜索搜索再加上经验，很容易就搞定了。但我一直没装过 Wordpress，正好有朋友要我帮忙弄个站点，还有点要求，速度要快，要上 HTTPS，我就先给他在 DigitalOcean 一键安装了出来，先凑合用，一键安装出来是 Apache 做 HTTP 服务器，我不会 HTTP 更不会配置 Apache，所以还是得手动装，我也大致了解 Wordpress 是怎么运行的，nginx + php7.0-fpm + mysql + wordpress 就这四个东西，和其他应用的原理都是一样的，我也把这个过程做个笔记，以后方便查。&lt;/p&gt;
&lt;p&gt;DigitalOcean 上开个 $5 的机器，选上 &lt;code&gt;add ssh key&lt;/code&gt;，直接用 root 用户，就先不配服务器的用户了，照理说这一步是配置好 ssh 登录，然后把 root 用户登录关闭掉，避免风险的。&lt;/p&gt;
&lt;h2&gt;登录上服务器，直接更新升级然后安装一波必要东西&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade
sudo apt-get install git gcc g++ vim
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;安装 nginx/mysql-server/php7.0-fpm&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install nginx
sudo apt-get install mysql-server
sudo apt-get install php7.0-fpm
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置 mysql&lt;/h2&gt;
&lt;p&gt;创建 wordpress 要用的数据库，这里 mysql 就也不再创建用户了，直接用 root，把密码设置复杂点。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -u root -p

CREATE DATABASE wordpress DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
GRANT ALL ON wordpress.* TO ‘root’@‘localhost&amp;#39; IDENTIFIED BY ‘root’;*FLUSH PRIVILEGES;
EXIT;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;重启 mysql&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl restart mysql-server
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;安装 php 插件&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install php-curl php-gd php-mbstring php-mcrypt php-xml php-xmlrpc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DigitalOcean 里面让安装这些东西，实际我安装完了之后发现报错，还少 mysql 的一个插件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install php7.0-mysql
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置 php7.0-fpm&lt;/h2&gt;
&lt;p&gt;就是个 wsgi 的中间件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vi /etc/php/7.0/fpm/php.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在最后加一行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cgi.fix_pathinfo=0
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vi /var/www/html/info.php
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;粘贴进去：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nb"&gt;phpinfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;\&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把中间件的连接方式换成端口&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vi /etc/php/7.0/fpm/pool.d/www.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;找到 &lt;code&gt;listen = /var/run/php5-fpm.sock&lt;/code&gt; 注释掉，换成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;listen = 127.0.0.1:9000
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;重启 php7.0-fpm&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl restart php7.0-fpm
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;下载解压 wordpress，配置&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -O https://wordpress.org/latest.tar.gz
tar xzvf latest.tar.gz
cd wordpress
cp wordpress-config-sample.php wp-config.php
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成 key：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -s https://api.wordpress.org/secret-key/1.1/salt/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;复制后：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vi wp-config.php
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;找到对应的地方，粘贴替换。&lt;/p&gt;
&lt;p&gt;数据库的名字、用户名、密码也替换掉之前创建的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define(&amp;#39;DB_NAME&amp;#39;, &amp;#39;wordpress&amp;#39;);

/** MySQL database username */
define(&amp;#39;DB_USER&amp;#39;, &amp;#39;wordpressuser&amp;#39;);

/** MySQL database password */
define(&amp;#39;DB_PASSWORD&amp;#39;, &amp;#39;password&amp;#39;);
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置 nginx&lt;/h2&gt;
&lt;p&gt;nginx 也不新建配置了，直接写在默认配置里面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vi /etc/nginx/sites-available/default 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改掉这几个地方：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;listen&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt; &lt;span class="err"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;listen&lt;/span&gt; &lt;span class="err"&gt;198.199.119.75&lt;/span&gt; &lt;span class="err"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="err"&gt;root&lt;/span&gt; &lt;span class="err"&gt;/var/www/html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Add&lt;/span&gt; &lt;span class="err"&gt;index.php&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;list&lt;/span&gt; &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;you&lt;/span&gt; &lt;span class="err"&gt;are&lt;/span&gt; &lt;span class="err"&gt;using&lt;/span&gt; &lt;span class="err"&gt;PHP&lt;/span&gt;
  &lt;span class="err"&gt;index&lt;/span&gt; &lt;span class="err"&gt;index.php&lt;/span&gt; &lt;span class="err"&gt;index.html&lt;/span&gt; &lt;span class="err"&gt;index.htm&lt;/span&gt; &lt;span class="err"&gt;index.nginx-debian.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="err"&gt;server_name&lt;/span&gt; &lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="err"&gt;location&lt;/span&gt; &lt;span class="err"&gt;/&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;First&lt;/span&gt; &lt;span class="err"&gt;attempt&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;serve&lt;/span&gt; &lt;span class="err"&gt;request&lt;/span&gt; &lt;span class="err"&gt;as&lt;/span&gt; &lt;span class="err"&gt;file,&lt;/span&gt; &lt;span class="err"&gt;then&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;as&lt;/span&gt; &lt;span class="err"&gt;directory,&lt;/span&gt; &lt;span class="err"&gt;then&lt;/span&gt; &lt;span class="err"&gt;fall&lt;/span&gt; &lt;span class="err"&gt;back&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;displaying&lt;/span&gt; &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;404.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;try_files&lt;/span&gt; &lt;span class="err"&gt;$uri&lt;/span&gt; &lt;span class="err"&gt;$uri/&lt;/span&gt; &lt;span class="err"&gt;=404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;try_files&lt;/span&gt; &lt;span class="err"&gt;$uri&lt;/span&gt; &lt;span class="err"&gt;$uri/&lt;/span&gt; &lt;span class="err"&gt;/index.php$is_args$args&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;pass&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;PHP&lt;/span&gt; &lt;span class="nt"&gt;scripts&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;FastCGI&lt;/span&gt; &lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="nt"&gt;listening&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;127&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;9000&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; 
  &lt;span class="nt"&gt;location&lt;/span&gt;  &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;php&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;include&lt;/span&gt; &lt;span class="err"&gt;snippets/fastcgi-php.conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;\#&lt;/span&gt; &lt;span class="err"&gt;With&lt;/span&gt; &lt;span class="err"&gt;php7.0-cgi&lt;/span&gt; &lt;span class="n"&gt;alone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;fastcgi_pass&lt;/span&gt; &lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;\#&lt;/span&gt; &lt;span class="err"&gt;With&lt;/span&gt; &lt;span class="err"&gt;php7.0-&lt;/span&gt;&lt;span class="n"&gt;fpm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;fastcgi_pass&lt;/span&gt; &lt;span class="n"&gt;unix&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;php7&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fpm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;重启  php7.0-fpm 和 nginx&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl restart php7.0-fpm
sudo nginx -s stop
sudo nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成，然后就是把 nginx 加上压缩，加上 https，再加上那个 google analytics 就齐活了，一个网站就搞定了，要做外贸电商也很容易，woocommerce 插件一装，paypal 配置好，上架商品，就行了。做码农真的容易被限制思维方式，其实想做任何东西，都有现成的工具可以用，只要整合就行了。&lt;/p&gt;
&lt;h2&gt;参考链接&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-lemp-on-ubuntu-16-04#step-1-create-a-mysql-database-and-user-for-wordpress" title="How To Install WordPress with LEMP on Ubuntu 16.04 | DigitalOcean"&gt;How To Install WordPress with LEMP on Ubuntu 16.04 | DigitalOcean&lt;/a&gt;
&lt;a href="https://www.howtoforge.com/tutorial/installing-nginx-with-php7-fpm-and-mysql-on-ubuntu-16.04-lts-lemp/" title="Installing Nginx with PHP 7 and MySQL 5.7 (LEMP) on Ubuntu 16.04 LTS"&gt;Installing Nginx with PHP 7 and MySQL 5.7 (LEMP) on Ubuntu 16.04 LTS&lt;/a&gt;
&lt;a href="https://www.rosehosting.com/blog/how-to-fix-the-missing-mysql-extension-error-in-wordpress/" title="How to Fix the Missing MySQL Extension Error in WordPress – RoseHosting Blog"&gt;How to Fix the Missing MySQL Extension Error in WordPress – RoseHosting Blog&lt;/a&gt;&lt;/p&gt;</content><category term="devops"></category></entry><entry><title>基于 Eleasticsearch 和 Kibana 的运营数据可视化后台</title><link href="https://breakwire.me/es-and-kibana.html" rel="alternate"></link><published>2017-10-02T21:38:07+08:00</published><updated>2017-10-02T21:38:07+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2017-10-02:/es-and-kibana.html</id><summary type="html">&lt;p&gt;如何快速为新产品搭建一个运营数据可视化的后台&lt;/p&gt;</summary><content type="html">&lt;p&gt;前一段时间在研究 ELK 这个东西，之前也用过一点，但都没有深入研究，其实这回也没有深入研究，但我找到了在现在情况下我该怎么用这个东西的方法。&lt;/p&gt;
&lt;p&gt;ELK 是一个日志系统的全家桶工具，Elasticsearch 用的人比较多，很多人把这个当作搜索后台，如果你选择了 Django 这样的框架的话也很容易继承搜索功能进去，比如用这个库 &lt;a href="https://github.com/django-haystack/django-haystack"&gt;django-haystack&lt;/a&gt;，当然很多人是用来做日志存储。&lt;/p&gt;
&lt;p&gt;L 是 Logstash，经过我的调研就发现这个玩意其实不太好用，性能差是主要原因。这个东西的用途就是一个中间件，把多个平台的不同格式的日志全部进行预处理，然后再存入 ES 中，但是作为一个还很小，没那么复杂的后台服务来说，用不着，只有一个日志来源，日志格式也是固定的，一条日志里面有四个 JSON object，每个 object 的 key 不是固定的，只要处理一下时间戳就行了，其他都不用动，直接 mapping 到 ES 中，刚开始我甚至还用到了 filebeat，先用 filebeat 监控文件，然后 filebeat output 给 logstash，然后 logstash 再 output 给 ES，简直了，测试的时候没什么问题，但一上线过了两三天日志数量多了起来我就发现问题了，数量不对，每天都在累加前一天的日志条数，等于说是 tail 文件没成功，每次都从头开始读文件了，外加用了 rsync 这个东西从生产服务器上同步日志到 ES 机器上，我也没整明白到底是哪里出了问题，索性直接弃用 logstash 和 filebeat，只用 ES 和 kibana，我自己写脚本监控文件、把日志写入 ES 中，也把日志按天切分成文件，简单又靠谱。&lt;/p&gt;
&lt;p&gt;运营数据日志的日志内容其实和消息系统很像，我就直接引用这里的概念 &lt;a href="http://django-activity-stream.readthedocs.io/en/latest/concepts.html"&gt;AVOT&lt;/a&gt;，&lt;code&gt;Actor/Verb/Object/Target&lt;/code&gt;。举例说明: &lt;code&gt;xxx 关注了 yyy&lt;/code&gt;，&lt;code&gt;xxx&lt;/code&gt; 是 Actor，&lt;code&gt;关注&lt;/code&gt; 是 Verb，&lt;code&gt;yyy&lt;/code&gt; 是 Target，这里没有 Object，再举一个例子，xxx 将 uuu 添加到了 yyy 中，这里的 Verb 是 &lt;code&gt;添加&lt;/code&gt;，Object 是 &lt;code&gt;uuu&lt;/code&gt;，&lt;code&gt;Actor/Object/Target&lt;/code&gt; 就是模型，当然我们不用把模型的全部字段都放进去，放个 type/id/name 就够了。按照这样的规则规定好日志内容之后就简单了，在每个需要记录日志的地方进行埋点，这个就是比较麻烦的地方，如果业务比较复杂的化，埋点很多，写的时候一定要一次性写对 Object 和 Target，不要写了一次之后复制粘贴，很容易搞错，一个个写。还有一点就是 &lt;code&gt;Actor/Object/Target&lt;/code&gt; 的 id 都转成字符串存储，因为用户的 id 是 &lt;code&gt;uuid&lt;/code&gt;，日志 object 直接 &lt;code&gt;to_json()&lt;/code&gt;，django logger 直接用，用户 id 会变成字符串，其他 model 的 id 还是 &lt;code&gt;int&lt;/code&gt;，类型如果不一致再存到 ES 里面数据会有冲突。&lt;/p&gt;
&lt;p&gt;最终的日志格式示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;target&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;xxxx&amp;quot;, &amp;quot;title&amp;quot;: &amp;quot;xxxxxx&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;791&amp;quot;, &amp;quot;owner&amp;quot;: &amp;quot;xxx&amp;quot;}, &amp;quot;object&amp;quot;: {}, &amp;quot;actor&amp;quot;: {&amp;quot;agent&amp;quot;: &amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.101 Safari/537.36&amp;quot;, &amp;quot;accept_language&amp;quot;: &amp;quot;en-US,en;q=0.8&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;xxx&amp;quot;, &amp;quot;host&amp;quot;: &amp;quot;www.example.com&amp;quot;, &amp;quot;referer&amp;quot;: &amp;quot;www.example.com&amp;quot;}, &amp;quot;verb&amp;quot;: &amp;quot;点赞&amp;quot;, &amp;quot;time&amp;quot;: 1507000406.305043}
{&amp;quot;target&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;xxx&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;fcc3837f-1a61-4d2c-bdbf-0961085547a3&amp;quot;, &amp;quot;owner&amp;quot;: &amp;quot;ddd&amp;quot;}, &amp;quot;object&amp;quot;: {}, &amp;quot;actor&amp;quot;: {&amp;quot;agent&amp;quot;: &amp;quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&amp;quot;, &amp;quot;accept_language&amp;quot;: &amp;quot;zh-CN,zh;q=0.8&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;host&amp;quot;: &amp;quot;www.example.com&amp;quot;, &amp;quot;referer&amp;quot;: &amp;quot;www.example.com&amp;quot;}, &amp;quot;verb&amp;quot;: &amp;quot;注册&amp;quot;, &amp;quot;time&amp;quot;: 1507000688.429523}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我用了 Elasticsearch 的官方 Python API &lt;a href="https://github.com/elastic/elasticsearch-py"&gt;elasticsearch-py&lt;/a&gt;，脚本放在了 &lt;a href="https://gist.github.com/lsdlab/194c7e4c3537741ba760ffb40b3667da"&gt;Gist&lt;/a&gt; 里面。&lt;/p&gt;
&lt;p&gt;日志存到 ES 中是这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="/images/es_and_kibana/2.png"&gt;&lt;/p&gt;
&lt;h2&gt;Kibana&lt;/h2&gt;
&lt;p&gt;Kibana 是一个可是化工具，能看到 ES 中的数据，做一些报表，只要把数据导入到 ES 中，做报表就很简单了，简单的也是有前提的，前提是你要定义好日志的内容。&lt;/p&gt;
&lt;p&gt;比如点赞数量，在 Visualize 里面新建一个柱状图，搜索 &lt;code&gt;item.verb="点赞"&lt;/code&gt;，然后第一个 Y 轴聚合搜索出来的日志条数，就是点赞的数量，再添加一个 Y 轴 &lt;code&gt;Unique Count&lt;/code&gt; &lt;code&gt;item.actor.username.keyword&lt;/code&gt; 就能得出多少个用户产生了这么多赞，X 轴就是按照时间，我都是按天来，选择 &lt;code&gt;Date Histogram&lt;/code&gt;，&lt;code&gt;Interval&lt;/code&gt;选 &lt;code&gt;Daily&lt;/code&gt;，如果你的日志系统要求的实时性比较高，还能选择 &lt;code&gt;Hourly&lt;/code&gt;，然后把实时刷新打开，就能看到比较实时的数据了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="/images/es_and_kibana/3.png"&gt;
&lt;img alt="4" src="/images/es_and_kibana/4.png"&gt;&lt;/p&gt;
&lt;p&gt;Kibana 最终是这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="0" src="/images/es_and_kibana/0.png"&gt;
&lt;img alt="1" src="/images/es_and_kibana/1.png"&gt;&lt;/p&gt;
&lt;p&gt;过几天我把这个东西拆分出来变成一个仓库再详细写一下教程。&lt;/p&gt;</content><category term="ES"></category></entry><entry><title>三个北上广</title><link href="https://breakwire.me/three-top-cities.html" rel="alternate"></link><published>2017-06-10T16:58:29+08:00</published><updated>2017-06-10T16:58:29+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2017-06-10:/three-top-cities.html</id><summary type="html">&lt;p&gt;实际上最终都是殊途同归，达到目标，没有达到目标。&lt;/p&gt;</summary><content type="html">&lt;p&gt;英文原文的标题 "The Three Bay Areas" 我觉得挺难翻译成中文，我也就写成 《三个北上广》，虽然拗口但也算接近。&lt;/p&gt;
&lt;p&gt;这篇文章也不是我自己挖掘出来的，&lt;a href="https://wanqu.co"&gt;湾区日报&lt;/a&gt; 作为我的英文阅读练习来源，一直都有追新，&lt;a href="https://wanqu.co/a/4827/2017-03-21-the-three-bay-areas-the-bold-italic.html?s=/issues"&gt;三个湾区&lt;/a&gt; 一看到推荐的时候我觉得我也能写一个中国版。虽然我去年才毕业，因为个人原因从新一线城市毕业回到老家工作，八个月后被 fire，现在赋闲在家，到现在为止只工作了一年不到。但在知乎上看过了这么多相关的问题回答，想想周围同学朋友的经历，自己有限的经历，想象一下自己将来可能的经历，忽然有种抽离感，胡诌一通。&lt;/p&gt;
&lt;p&gt;引用湾区日报的短评：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;旧金山湾区长大的三个不同家境的人：1，家境好，读藤校或斯坦福，毕业后生活小资；2，家境中等，读非伯克利的州立大学或二流文理学院，最终湾区待不下去，搬到外州；3，家境一般，父母一方是移民，社区学校毕业，屌丝一生。
阶层是会流动的，只是流动得很慢。家庭能提供的起点，真的对以后的路怎么走影响很大。你能举出一些出身贫寒最终发达人尽皆知的例子，但更多的情况是家境好、接受好教育、有好的人际圈子、毕业后高收入或创业小成功（卖几千万但不被新闻报道的那种）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我也可以写简评三种情况：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;北上广，江浙沪地区三个不同家境的人：1，家境好，读交大或者复旦，毕业后生活小资，薪酬可观，事业可期，在一线城市生活定居；2，家境中等，读双非或其他不知名一本，最终北上广待不下去，搬到新一线城市，靠家里的支持买下一套房；3，家境一般，新一线城市也无法定居，回到老家，做父母安排的稳定工作，屌丝一生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际上我没法按照英文原文那样写出三种情况，所以只写了两种，但这两种已经代表了很多人的境遇，最后都是殊途同归，达到目标，没有达到目标。&lt;/p&gt;
&lt;h2&gt;一&lt;/h2&gt;
&lt;p&gt;1990 年后，你出生在一线城市，小学初中高中都是上的片区里最好的学校，附小、附中。班上的同学非富即贵，小学的家长会或者春游秋游，甚至是接送上下学，停在学校门口的各色豪车，丝毫不输一个五线城市的汽车展销会。你的父亲年轻的时候是国企的一名技术工人，用自己的技术和拼搏已经在这个大型国企中有了一席之地，你的母亲是一所附属中学的教导主任，同样管理着许多老师和学生。&lt;/p&gt;
&lt;p&gt;你高中毕业后进入了一个老牌 985 大学，听从父母的意见，选择了金融专业，尽管你不感兴趣，但也不抵触。凭借着高中学习训练的底子，你也能够获得不错的成绩。毕业后，你和你的大学同学一样进入了四大工作，工作枯燥乏味，出差频繁，压力极大，让你怀疑自己的父母是不是帮你选错了专业。尽管四大的薪酬已经非常可观，但想到你有一个认识的同学毕业后没有从事本专业的工作，而是去了腾讯做产品经理，拿着二十多万一年的薪酬，你有些嫉妒，因为你知道你比他聪明。&lt;/p&gt;
&lt;p&gt;当你离开校园开始工作时，你在自如上租了一个离公司只有三站地铁的房间，一个月租金两千八百块钱。这个精装修的三室一厅并没有被隔断，所以你的房间并不是主卧也需要两千八百块。你的两个室友，一个在证券公司工作，一周工作九十个小时以上，从不在厨房做饭，只吃全家便当或者餐厅外卖，总是把便当盒留在餐桌上，用过的餐具留在水池里，当和他争吵了几次公共空间的打扫问题后，你同意请保洁公司打扫。在经过两三年和室友关于清洁问题的争吵后，你在二十六岁的时候租了一个一室一厅的公寓自己一个人住，一个月租金 5000。又过了几年，在你二十九岁的时候，你在当地房价稍低的区首付一百万买下了一个两室一厅的九十年代的二手房。&lt;/p&gt;
&lt;p&gt;你很少去超市，全部通过网购，日用百货，零食，都在固定的电商上购买，水果也在生鲜电商上固定采购，这也都形成了习惯，你把你的储蓄分散在几大 P2P 平台上，每天都会看自己的收益，或者自己买的几只股票情况。工作日的中饭也是通过订餐 App 解决。&lt;/p&gt;
&lt;p&gt;你的所有朋友都在金融、互联网行业，你经常思考自己是否应该创业，因为你看到有的朋友的创业公司十分成功，你有些嫉妒。当你认识一个新朋友的时候，第一件事情就是询问他们的工作，看是否有合作或者合伙创业的机会。&lt;/p&gt;
&lt;p&gt;你支持同性婚姻、LGBTQ，你十分确定你自己没有性别歧视，没有同性恋歧视，尽管你的朋友圈子中没有一个 Gay 或者 Lesbian。&lt;/p&gt;
&lt;p&gt;在一线城市生活了五年多，从滴滴、Uber 刚开始运营的时候你就是忠实用户，一直用到现在，已经变成了出行必备。&lt;/p&gt;
&lt;h2&gt;二&lt;/h2&gt;
&lt;p&gt;你从一个不是 985 也不是 211 的学校本科毕业，毕业后你的父母希望你能够回到老家工作，你有些犹豫，因为你做的更好。老家虽然不是一线城市，但也算是次一线，各方面也比一线城市有差距，但也差不了太多。你觉得自己在学校的牌子上已经是和那些 985/211 的毕业生有了差距，如果回到老家工作，在工作上的积累会差距更大，没了学校的各种牵制，你觉得在工作中一定能够发挥自己的能力，达到理想的目标。&lt;/p&gt;
&lt;p&gt;你比班上的其他同学提前找到了一个实习工作，因为工作上手很快，在不到两个月的时候就拿到了正式 Offer，你没有立刻接下来，因为你觉得你还能找到更好的，更大的公司，更可观的薪酬。但到了毕业的时候，因为忙于论文、毕业设计，不再想准备面试，跑东跑西了，所以你接受了这个 Offer，薪酬算是中上，超过了很多人，但也远达不到能够炫耀的地步。当你向父母汇报这些情况的时候，他们又在念叨：你拿这点钱还不如回来工作，你那里生活成本那么高，回来的话和我们住，吃住不用给钱，赚得钱都是到手的，blabla……你很无奈，一遍遍的解释自己的现在的工作，自己的专业，不想在刚进入社会的时候就去那些不好、甚至是很差的公司工作，说自己和现在的同事相处的很好很开心，同事都很厉害，能向同事、老板请教问题，他们都会乐意回答。你父母的一句话：这有什么用？就把你直接打回去了，你决定不再和父母解释自己的工作了，以后只向他们说好，其他的事情全部打哈哈回去，解释实在是浪费口水。&lt;/p&gt;
&lt;p&gt;你和几个交好的同学合租，你们的工作地点也相近，在学校的时候就玩得比较好，所以在毕业后也能维持很好的关系。&lt;/p&gt;
&lt;p&gt;空闲的时候和高中朋友聊天，他们毕业后回到了老家工作，一两年后他们都买了车，甚至有的人已经结婚，更有人连孩子都有了。节假日的小聚会上，你打趣到都是人生赢家，自己还什么都没有赚到，事业、友情、爱情的各种目标都还差得太远，还需要努力。有人劝你回老家，回家了什么都有了，你笑笑，本来像说两句，但一想到自己和父母谈论这个问题的结果，你就立刻收住了跳过了这个话题。&lt;/p&gt;
&lt;p&gt;又过了几年后，你跳了一次槽，薪水涨了不少，但相对于一线城市的房价来说还是小巫见大巫，于是你也不再考虑在一线城市定居了，开始着手考虑其他城市，甚至是考虑回老家。&lt;/p&gt;</content><category term="FML"></category></entry><entry><title>单干 - 自由职业者社区</title><link href="https://breakwire.me/my-first-offical-product.html" rel="alternate"></link><published>2017-05-19T21:58:53+08:00</published><updated>2017-05-19T21:58:53+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2017-05-19:/my-first-offical-product.html</id><summary type="html">&lt;p&gt;我的第一个「比较认真」的产品&lt;/p&gt;</summary><content type="html">&lt;p&gt;先说说是个什么产品吧，最早是看到 &lt;a href="https://github.com/ElaWorkshop"&gt;ElaWorkshop/awesome-cn-cafe&lt;/a&gt; 这个 Repo 都是大家提交的适合办公的咖啡馆的数据，GitHub 能够直接渲染 geojson 文件，只要编辑 geojson 文件，就能比较方便的看到地图上的点，评论什么的。我就想我能不能做个 App 更方便的提交分享这些地方，提供更多功能，甚至是做一个社交产品。后来一想，我不会写 iOS App 啊，Swift 也还在学，要做的话岂不是得花个一年半载才能做出来。刚好四月份的适合微信宣布个人开发者也能发布微信小程序了，我就想这个好像能非常快做出一个雏形，立刻就动手了，也和朋友聊了聊，本来写了一个雏形时候就扔在那了，朋友也鼓励我做出个东西来，也帮我备案域名，提出了些建议。&lt;/p&gt;
&lt;p&gt;说做就做，中间也经历了些麻烦事儿，就不在这篇文章里说了。断断续续做了一个月，后端 Django API 也是快糙猛的做了起来，还好最近一段时间也在折腾服务器，稍稍花了点时间就部署了起来，要照以前对服务器的各种依赖、环境问题没有头绪的情况下，Trouble Shoting 环境问题都要花个几天时间，这次只花了一个多小时就让后端 up &amp;amp; running 了，感觉对 Linux 的使用又多了些经验。&lt;/p&gt;
&lt;p&gt;为什么想做这个产品，一个原因是觉得自己不能死写代码，况且自己写代码又不是很厉害的情况下，得有自己代表性的作品，这个产品就算是一个尝试。其实我本来不愿意做微信小程序，我非常不喜欢微信，甚至是讨厌微信，但以现在我的技术栈，Python 作为后端，前端基础算是入门，React 等新工具（现在已经不算新了）没怎么大量实际用过，iOS 开发还在慢慢学（从三年前买了这台 MacBook Pro 开始……）的情况下，只能开发微信小程序了。微信小程序的底层应该和 React, Vue 是一样的原理，数据绑定，不用操作 DOM 了，简单的数据展示和交互写起来是十分的方便，如果遇到复杂的组件和交互就会有点麻烦，需要设计好数据传递。当然以前用 jQuery 操作 DOM 也是很麻烦，甚至是有些巨复杂的效果 jQuery 根本实现不了或者实现起来很复杂，现在有了 React 这些 “新” JS 框架就能实现了。虽然微信小程序的实现和 React 比起来肯定是弱很多的，但基本的原理还是一样的。&lt;/p&gt;
&lt;p&gt;上周和这周都花了些时间在做这个，雏形已经差不多了，再修改修改这个月底就发布。&lt;/p&gt;
&lt;p&gt;​       &lt;/p&gt;
&lt;p&gt;&lt;img alt="weixin-qrcode" src="/images/dangann/weixin-qrcode.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="0" src="/images/dangann/Group@2x.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="/images/dangann/Group2@2x.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="/images/dangann/Group3@2x.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="/images/dangann/Group4@2x.png"&gt;&lt;/p&gt;</content><category term="projectx"></category></entry><entry><title>Django 应用部署继续填坑</title><link href="https://breakwire.me/deploy-django-app-again.html" rel="alternate"></link><published>2017-05-18T21:58:53+08:00</published><updated>2017-05-18T21:58:53+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2017-05-18:/deploy-django-app-again.html</id><summary type="html">&lt;p&gt;选对发行版很重要……&lt;/p&gt;</summary><content type="html">&lt;p&gt;实践证明，部署 Django 应用最方便的发行版是 Ubuntu，我一直以为是 Debian，最近这次部署开了两台服务器对比，还是 Ubuntu 最方便，环境问题最少。&lt;/p&gt;
&lt;p&gt;最早部署一个简单的 Django 应用只要让 Nginx 把非静态文件的所有请求传给 8001 端口，uwsgi 作为 Nginx 和 Django 服务的桥接，最近有仔细看了一边 uwsgi 的示例文档，uwsgi 是推荐用 sock 套接字文件来传递，而且也大部分使用 ini 作为配置文件，uwsgi 的启动命令是 &lt;code&gt;uwsgi --ini dangann/conf/production/uwsgi.ini&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;也贴上我的 Nginx 配置和 &lt;code&gt;uwsgi.ini&lt;/code&gt; 文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;upstream&lt;/span&gt; &lt;span class="nt"&gt;django&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;server&lt;/span&gt; &lt;span class="n"&gt;unix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;///&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dangann&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dangann&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;for&lt;/span&gt; &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;file&lt;/span&gt; &lt;span class="err"&gt;socket&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;port&lt;/span&gt; &lt;span class="err"&gt;your&lt;/span&gt; &lt;span class="err"&gt;site&lt;/span&gt; &lt;span class="err"&gt;will&lt;/span&gt; &lt;span class="err"&gt;be&lt;/span&gt; &lt;span class="err"&gt;served&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;
    &lt;span class="err"&gt;listen&lt;/span&gt;      &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;domain&lt;/span&gt; &lt;span class="err"&gt;name&lt;/span&gt; &lt;span class="err"&gt;it&lt;/span&gt; &lt;span class="err"&gt;will&lt;/span&gt; &lt;span class="err"&gt;serve&lt;/span&gt; &lt;span class="err"&gt;for&lt;/span&gt;
    &lt;span class="err"&gt;server_name&lt;/span&gt; &lt;span class="err"&gt;dangann.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;substitute&lt;/span&gt; &lt;span class="err"&gt;your&lt;/span&gt; &lt;span class="err"&gt;machine&amp;#39;s&lt;/span&gt; &lt;span class="err"&gt;IP&lt;/span&gt; &lt;span class="err"&gt;address&lt;/span&gt; &lt;span class="err"&gt;or&lt;/span&gt; &lt;span class="err"&gt;FQDN&lt;/span&gt;
    &lt;span class="err"&gt;charset&lt;/span&gt;     &lt;span class="err"&gt;utf-8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Let&lt;/span&gt; &lt;span class="err"&gt;Encrypt&lt;/span&gt;
    &lt;span class="err"&gt;#ssl&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;#ssl_certificate&lt;/span&gt;     &lt;span class="err"&gt;/etc/letsencrypt/live/dangann.com/fullchain.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;#ssl_certificate_key&lt;/span&gt; &lt;span class="err"&gt;/etc/letsencrypt/live/dangann.com/privkey.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;#ssl_protocols&lt;/span&gt; &lt;span class="err"&gt;TLSv1&lt;/span&gt; &lt;span class="err"&gt;TLSv1.1&lt;/span&gt; &lt;span class="err"&gt;TLSv1.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;#ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;#ssl_ciphers&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;EECDH+ECDSA+AESGCM&lt;/span&gt; &lt;span class="err"&gt;EECDH+aRSA+AESGCM&lt;/span&gt; &lt;span class="err"&gt;EECDH+ECDSA+SHA384&lt;/span&gt; &lt;span class="err"&gt;EECDH+ECDSA+SHA256&lt;/span&gt; &lt;span class="err"&gt;EECDH+aRSA+SHA384&lt;/span&gt; &lt;span class="err"&gt;EECDH+aRSA+SHA256&lt;/span&gt; &lt;span class="err"&gt;EECDH+aRSA+RC4&lt;/span&gt; &lt;span class="err"&gt;EECDH&lt;/span&gt; &lt;span class="err"&gt;EDH+aRSA&lt;/span&gt; &lt;span class="err"&gt;RC4&lt;/span&gt; &lt;span class="err"&gt;!aNULL&lt;/span&gt; &lt;span class="err"&gt;!eNULL&lt;/span&gt; &lt;span class="err"&gt;!LOW&lt;/span&gt; &lt;span class="err"&gt;!3DES&lt;/span&gt; &lt;span class="err"&gt;!MD5&lt;/span&gt; &lt;span class="err"&gt;!EXP&lt;/span&gt; &lt;span class="err"&gt;!PSK&lt;/span&gt; &lt;span class="err"&gt;!SRP&lt;/span&gt; &lt;span class="err"&gt;!DSS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;#allow&lt;/span&gt; &lt;span class="err"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;gzip&lt;/span&gt;
    &lt;span class="err"&gt;gzip&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;gzip_min_length&lt;/span&gt; &lt;span class="err"&gt;1k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;gzip_buffers&lt;/span&gt; &lt;span class="err"&gt;4&lt;/span&gt; &lt;span class="err"&gt;16k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;gzip_comp_level&lt;/span&gt; &lt;span class="err"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;gzip_types&lt;/span&gt; &lt;span class="err"&gt;text/plain&lt;/span&gt; &lt;span class="err"&gt;application/x-javascript&lt;/span&gt; &lt;span class="err"&gt;text/css&lt;/span&gt; &lt;span class="err"&gt;application/xml&lt;/span&gt; &lt;span class="err"&gt;text/javascript&lt;/span&gt;  &lt;span class="err"&gt;image/jpeg&lt;/span&gt; &lt;span class="err"&gt;image/png&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;gzip_disable&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;MSIE&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;\.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;max&lt;/span&gt; &lt;span class="err"&gt;upload&lt;/span&gt; &lt;span class="err"&gt;size&lt;/span&gt;
    &lt;span class="err"&gt;client_max_body_size&lt;/span&gt; &lt;span class="err"&gt;75M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;adjust&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;taste&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;logs&lt;/span&gt;
    &lt;span class="err"&gt;access_log&lt;/span&gt; &lt;span class="err"&gt;/root/dangann_logs/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;error_log&lt;/span&gt; &lt;span class="err"&gt;/root/dangann_logs/error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Django&lt;/span&gt; &lt;span class="err"&gt;media&lt;/span&gt;
    &lt;span class="err"&gt;location&lt;/span&gt; &lt;span class="err"&gt;/media&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;alias&lt;/span&gt; &lt;span class="err"&gt;/root/dangann/media&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;your&lt;/span&gt; &lt;span class="err"&gt;Django&lt;/span&gt; &lt;span class="err"&gt;project&amp;#39;s&lt;/span&gt; &lt;span class="err"&gt;media&lt;/span&gt; &lt;span class="err"&gt;files&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;amend&lt;/span&gt; &lt;span class="err"&gt;as&lt;/span&gt; &lt;span class="err"&gt;required&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;alias&lt;/span&gt; &lt;span class="err"&gt;/root/dangann/static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;your&lt;/span&gt; &lt;span class="err"&gt;Django&lt;/span&gt; &lt;span class="err"&gt;project&amp;#39;s&lt;/span&gt; &lt;span class="err"&gt;static&lt;/span&gt; &lt;span class="err"&gt;files&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;amend&lt;/span&gt; &lt;span class="err"&gt;as&lt;/span&gt; &lt;span class="err"&gt;required&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Finally&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;send&lt;/span&gt; &lt;span class="nt"&gt;all&lt;/span&gt; &lt;span class="nt"&gt;non-media&lt;/span&gt; &lt;span class="nt"&gt;requests&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;Django&lt;/span&gt; &lt;span class="nt"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;uwsgi_pass&lt;/span&gt;  &lt;span class="err"&gt;django&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;include&lt;/span&gt;     &lt;span class="err"&gt;/root/dangann/conf/production/uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;uwsgi_params&lt;/span&gt; &lt;span class="err"&gt;file&lt;/span&gt; &lt;span class="err"&gt;you&lt;/span&gt; &lt;span class="err"&gt;installed&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# uwsgi.ini file
[uwsgi]

# Django-related settings
# the base directory (full path)
chdir           = /root/dangann/
# Django&amp;#39;s wsgi file
module          = dangann.wsgi

# process-related settings
# master
master          = true
# maximum number of worker processes
processes       = 4
# the socket (use the full path to be safe
socket          = /var/log/dangann/dangann.sock
# ... with appropriate permissions - may be needed
chmod-socket    = 664
# clear environment on exit
vacuum          = true

#  use python thread
enable-threads  = true

# set request block time
harakiri        = 600
# body size
# buffer-size
buffer-size=32768

# uwsgi.log
daemonize=/root/dangann_logs/uwsgi.log
&lt;/pre&gt;&lt;/div&gt;</content><category term="devops"></category></entry><entry><title>AwesomeCoffice 微信小程序</title><link href="https://breakwire.me/awesomecoffice-weixin-mini-app.html" rel="alternate"></link><published>2017-04-05T16:59:22+08:00</published><updated>2017-04-05T16:59:22+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2017-04-05:/awesomecoffice-weixin-mini-app.html</id><summary type="html">&lt;p&gt;Swift 学得太慢，iOS App 也不是那么容易就做出来的，就先写个微信小程序玩玩了&lt;/p&gt;</summary><content type="html">&lt;p&gt;微信小程序的底层应该是和各种 MVC 的 JS 框架类似，刚出来的时候不支持个人开发者，上个月底刚宣布支持个人开发者，然后我就想把我的这个产品先用微信小程序做个雏形出来。花了几天时间完成了 API，基本功能也做得差不多了，然后就想部署上去，才发现还有个严重的问题，需要备案，非常麻烦，顿时就不想部署了，但毕竟还是写了的，不部署就不部署吧，代码放到 GitHub 上了：&lt;a href="https://github.com/lsdlab/AwesomeCoffice"&gt;lsdlab/AwesomeCoffice&lt;/a&gt;，它有它背靠大树的优势，但还是限制太多，没法和原生应用比，甚至是和移动网页应用都还比不上，我还是把精力放到靠谱的东西上吧。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="/images/awesome_coffice_weixin_mini_app/1.png"&gt;
&lt;img alt="2" src="/images/awesome_coffice_weixin_mini_app/2.png"&gt;
&lt;img alt="3" src="/images/awesome_coffice_weixin_mini_app/3.png"&gt;
&lt;img alt="4" src="/images/awesome_coffice_weixin_mini_app/4.png"&gt;
&lt;img alt="5" src="/images/awesome_coffice_weixin_mini_app/5.png"&gt;
&lt;img alt="6" src="/images/awesome_coffice_weixin_mini_app/6.png"&gt;
&lt;img alt="7" src="/images/awesome_coffice_weixin_mini_app/7.png"&gt;
&lt;img alt="8" src="/images/awesome_coffice_weixin_mini_app/8.png"&gt;
&lt;img alt="9" src="/images/awesome_coffice_weixin_mini_app/9.png"&gt;
&lt;img alt="10" src="/images/awesome_coffice_weixin_mini_app/10.png"&gt;
&lt;img alt="11" src="/images/awesome_coffice_weixin_mini_app/11.png"&gt;
&lt;img alt="12" src="/images/awesome_coffice_weixin_mini_app/12.png"&gt;
&lt;img alt="13" src="/images/awesome_coffice_weixin_mini_app/13.png"&gt;&lt;/p&gt;</content><category term="projectx"></category></entry><entry><title>Spendingviz 1.0</title><link href="https://breakwire.me/spengdingviz1.0.html" rel="alternate"></link><published>2016-11-25T20:53:32+08:00</published><updated>2016-11-25T20:53:32+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-11-25:/spengdingviz1.0.html</id><summary type="html">&lt;p&gt;我的第一个自用产品 Spendingviz 1.0 完工啦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/lsdlab/spendingviz"&gt;lsdlab/spendingviz&lt;/a&gt; 现在这个只能自己用用，数据库从 MongoDB 换到了 PostgreSQL，已有一个用户就是我自己，就我自己用用，不开放注册。接下来就开始用 Python 重写，用 Django，要有给移动设备的 API，那些实用功能我觉得还是不要在网页上做了，网页上就看些大的统计图，实用功能就只放到 iOS App 上做。还要赶快开始学点 Swift，但在做之前得把后端完成，还不太好做，我想要这个后端能够自动对备注进行分类，做自然语言处理，还要有点机器学习能力，能预测支出，然后才开始做 iOS App，希望这个【巨大】的项目能在年前开工，17 年年底能作出个雏形出来，包括 iOS App 和 Web 端网页还有后端，对了，这两个小项目用 Node.js 写的，感觉不是太好，可能还是用的太少，我也准备弃用了，后面就写 Python  了，前端方面就只打算在学学 Vue 就行了，其他不再看了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="new" src="/images/spendingviz/new.png"&gt;
&lt;img alt="tables" src="/images/spendingviz/tables.png"&gt;
&lt;img alt="this-month-brief" src="/images/spendingviz/this-month-brief.png"&gt;
&lt;img alt="last-month-brief-0" src="/images/spendingviz/last-month-brief-0.png"&gt;
&lt;img alt="last-month-brief-1" src="/images/spendingviz/last-month-brief-1.png"&gt;
&lt;img alt="charts-year-0" src="/images/spendingviz/charts-year-0.png"&gt;
&lt;img alt="charts-year-1" src="/images/spendingviz/charts-year-1.png"&gt;
&lt;img alt="charts-month" src="/images/spendingviz/charts-month.png"&gt;
&lt;img alt="charts-category-year" src="/images/spendingviz/charts-category-year.png"&gt;
&lt;img alt="keyword-wordcloud" src="/images/spendingviz/keyword-wordcloud.png"&gt;&lt;/p&gt;</content><category term="projectx"></category></entry><entry><title>PostgreSQL 命令笔记</title><link href="https://breakwire.me/postgresql-note.html" rel="alternate"></link><published>2016-09-03T13:41:36+08:00</published><updated>2016-09-03T13:41:36+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-09-03:/postgresql-note.html</id><summary type="html">&lt;p&gt;这玩意要多坑有多坑……&lt;/p&gt;</summary><content type="html">&lt;h2&gt;本地&lt;/h2&gt;
&lt;p&gt;PostgreSQL 光要让它跑起来就挺麻烦的，Mac 上很方便，就 &lt;code&gt;brew install postgresql&lt;/code&gt;，然后 &lt;code&gt;initdb /usr/local/var/postgres -E utf8&lt;/code&gt; 初始化数据库。&lt;/p&gt;
&lt;p&gt;我在 &lt;code&gt;~/.zshrc&lt;/code&gt; 里面设置了两个 alias 快速启动停止：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;pgstart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;pgstop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pg_ctl -D /usr/local/var/postgres stop -s -m fast&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还有个非常好用的命令行工具 &lt;a href="https://github.com/dbcli/pgcli/"&gt;pgcli&lt;/a&gt;，有自动补全命令功能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brew services&lt;/code&gt; 也能设置开机启动和手动启动停止。&lt;/p&gt;
&lt;p&gt;Mac 上有个坑就是 PostgreSQL 版本不同需要迁移数据，这个好解决，随便 Google 下就行了。&lt;/p&gt;
&lt;h2&gt;VPS&lt;/h2&gt;
&lt;h3&gt;安装 创建用户 密码&lt;/h3&gt;
&lt;p&gt;debian 的 VPS 上直接 &lt;code&gt;sudo apt-get install postgresql&lt;/code&gt; 就行了，我也不知道为什么刚开始我这么装了之后，安装成功，但是根本没启动起来，最后也不知道怎么搞的就又好了。&lt;/p&gt;
&lt;p&gt;安装好了之后切到 Linux 的 postgres 用户下，创建一个新用户，设置密码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo su postgres
createuser --interactive
    chen
    y

psql
&lt;span class="se"&gt;\p&lt;/span&gt;assword chen
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;启动 停止 重启&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/postgresql start
/etc/init.d/postgresql stop
/etc/init.d/postgresql restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;远程连接&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vi /etc/postgres/9.5/main/postgresql.conf
     &lt;span class="nv"&gt;listen_addresses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# 改成&lt;/span&gt;
     &lt;span class="nv"&gt;listen_addresses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;

sudo vi /etc/postgres/9.5/main/pg_hba.conf
     host all all &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/32 md5 &lt;span class="c1"&gt;# 下面加一行&lt;/span&gt;
     host all all &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0/0 md5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后重启一下就能远程连接了。&lt;/p&gt;
&lt;h2&gt;创建数据库、表 连接 导出 导入&lt;/h2&gt;
&lt;h3&gt;创建数据库&lt;/h3&gt;
&lt;p&gt;前面已经建了 &lt;code&gt;chen&lt;/code&gt; 这个用户，直接在这个用户的 shell 下面新建或者删除数据库：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;createdb spending-vis
dropdb spending-vis
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者在 pgcli 里面操作，直接在 shell 里面输入 &lt;code&gt;pgcli&lt;/code&gt; 会默认用当前 Linux 的用户名，作为用户名和数据库名称去连接，所以在前面新建用户的时候就要在 &lt;code&gt;postgres&lt;/code&gt; 用户下把 &lt;code&gt;chen&lt;/code&gt; 这个数据库也创建好。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;create database &lt;span class="s2"&gt;&amp;quot;spending-vis&amp;quot;&lt;/span&gt;
drop database &lt;span class="s2"&gt;&amp;quot;spending-vis&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;命令都有自动补全，很方便。&lt;/p&gt;
&lt;h3&gt;创建表&lt;/h3&gt;
&lt;p&gt;创建一个 entry 表，id 字增主键：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;serial&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;categoryid&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt; &lt;span class="nb"&gt;DATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;year&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;month&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;day&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;note&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;连接&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql
psql -U Chen -d Chen
psql -U Chen -d spending-vis

pgcli
pgcli -U Chen -d Chen
pgcli -U Chen -d spending-vis

pgcli -h &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 -U chen -W -d spending-vis
    password:
&lt;span class="se"&gt;\l&lt;/span&gt;
&lt;span class="se"&gt;\d&lt;/span&gt;u
&lt;span class="se"&gt;\d&lt;/span&gt;t
&lt;span class="se"&gt;\d&lt;/span&gt; entry
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;导出 导入&lt;/h3&gt;
&lt;p&gt;导出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pg_dump -f spending-vis-postgresql.sql spending-vis
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;导入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql -d spending-vis -f export-postgresql/spending-vis-postgresql.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本地机器导出之后要导入到 VPS 上，本地用户名为 &lt;code&gt;Chen&lt;/code&gt;，VPS 上是 &lt;code&gt;chen&lt;/code&gt;，要在 &lt;code&gt;.sql&lt;/code&gt; 里面改一下，VPS 要先建好数据库，然后导入。
还有个坑就是导入的语句，数据库里面有个字段是能够为空的，导入的时候就报错了，没办法，我只能把那个字段写成了 &lt;code&gt;无备注&lt;/code&gt;，然后就能导入了。&lt;/p&gt;
&lt;h2&gt;postgrest&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/begriffs/postgrest"&gt;postgrest&lt;/a&gt; 这个工具挺好，把现有的 PostgreSQL 数据库直接变成一个 RESTful API。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./postgrest postgres://user:password@localhost:5432/spending-vis &lt;span class="se"&gt;\&lt;/span&gt;
          --port &lt;span class="m"&gt;3000&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
          --schema public &lt;span class="se"&gt;\&lt;/span&gt;
          --anonymous postgres &lt;span class="se"&gt;\&lt;/span&gt;
          --pool &lt;span class="m"&gt;200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直接就能 GET 获得 JSON&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://localhost:3000/entry
http://localhost:3000/entry?date&lt;span class="o"&gt;=&lt;/span&gt;eq.2014-06-01
http://localhost:3000/entry?year&lt;span class="o"&gt;=&lt;/span&gt;eq.2014&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;eq.6
&lt;/pre&gt;&lt;/div&gt;</content><category term="devops"></category></entry><entry><title>开个新坑</title><link href="https://breakwire.me/spending-vis-development-log-0.html" rel="alternate"></link><published>2016-08-06T15:37:47+08:00</published><updated>2016-08-06T15:37:47+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-08-06:/spending-vis-development-log-0.html</id><summary type="html">&lt;p&gt;要做个自己每天都用的产品&lt;/p&gt;</summary><content type="html">&lt;p&gt;之前有几个 side project idea 都因为水平有限，做个雏形就放那儿不做了，后来想想也挺烂的，还好没做。现在终于有一个我觉得不错的点子，我也每天都会在手机上用到的，嫌现有的都不能满足自己需求。&lt;/p&gt;
&lt;p&gt;手机上的记账 App 实在太多，我也用了不少，最早从用 Sony Xpreria S 的时候用的随手记，用到最后也嫌麻烦了，太难看，两年多的数据也没留下来，可惜了。后来换上 iPhone，开始用 Next for iPhone，就是功能太弱，只能用图表分类，记录个金额和备注，有些统计和图表。&lt;/p&gt;
&lt;p&gt;具体要做什么就不多写了，简单说就是一个满足我的需求的记账 App。后端自己做，桌面 Web 端做些数据可视化，iOS App 也需要做，简单能用就行，重点放在后端的数据分析上，也学学统计学。&lt;/p&gt;
&lt;h3&gt;2016/07/26&lt;/h3&gt;
&lt;p&gt;用 datatables 的表格基本完成了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="表格" src="/images/spendingviz/tables.png"&gt;&lt;/p&gt;
&lt;h3&gt;2016/08/6&lt;/h3&gt;
&lt;p&gt;以年、月为单位的统计条形图和折线图基本完成了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="年" src="/images/spendingviz/charts-year.png"&gt;
&lt;img alt="月" src="/images/spendingviz/charts-month.png"&gt;&lt;/p&gt;</content><category term="spending-vis"></category><category term="dev-log"></category></entry><entry><title>又部署了一遍 Django</title><link href="https://breakwire.me/deploy-django-app.html" rel="alternate"></link><published>2016-07-29T11:11:59+08:00</published><updated>2016-07-29T11:11:59+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-07-29:/deploy-django-app.html</id><summary type="html">&lt;p&gt;又部署了一遍 Django&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Ubuntu -- 14.04&lt;/li&gt;
&lt;li&gt;Django -- 1.9.8&lt;/li&gt;
&lt;li&gt;Nginx -- 1.4.6&lt;/li&gt;
&lt;li&gt;uwsgi -- 2.0.13.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ubuntu 上要依赖三个东西 python-dev, libxml2-dev, pcre。&lt;/p&gt;
&lt;p&gt;libxml2-dev 是用来解析 uwsgi 的 .xml 脚本的，pcre 是 Perl 的正则表达式解析库，Django 解析 URL 的，python-dev 我也不知道是干什么的&lt;/p&gt;
&lt;p&gt;Nginx 开个 80 端口，uwsgi_pass 传给 8001 这个端口，uwsgi 在通过这里把 Django 跑起来。&lt;/p&gt;
&lt;h3&gt;1. Nginx 配置 &lt;code&gt;/etc/nginx/sites-enabled/my_app.conf&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;# the port your site will be served on&lt;/span&gt;
       &lt;span class="kn"&gt;listen&lt;/span&gt;      &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="c1"&gt;# the domain name it will serve for&lt;/span&gt;
       &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;IP&lt;/span&gt; &lt;span class="s"&gt;OR&lt;/span&gt; &lt;span class="s"&gt;DOMAIN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# substitute your machine&amp;#39;s IP address or FQDN&lt;/span&gt;
       &lt;span class="kn"&gt;charset&lt;/span&gt;     &lt;span class="s"&gt;utf-8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

       &lt;span class="c1"&gt;# max upload size&lt;/span&gt;
       &lt;span class="kn"&gt;client_max_body_size&lt;/span&gt; &lt;span class="s"&gt;75M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;# adjust to taste&lt;/span&gt;

       &lt;span class="c1"&gt;# logs&lt;/span&gt;
       &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/home/chen/my_app/logs/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="kn"&gt;error_log&lt;/span&gt; &lt;span class="s"&gt;/home/chen/my_app/logs/error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

       &lt;span class="c1"&gt;# Django media&lt;/span&gt;
       &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/media&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/home/chen/my_app/media&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# your Django project&amp;#39;s media files - amend as required&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/home/chen/my_app/static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# your Django project&amp;#39;s static files - amend as required&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="c1"&gt;# Finally, send all non-media requests to the Django server.&lt;/span&gt;
       &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt;  &lt;span class="s"&gt;IP&lt;/span&gt; &lt;span class="s"&gt;OR&lt;/span&gt; &lt;span class="s"&gt;DOMAIN:8001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
               &lt;span class="kn"&gt;include&lt;/span&gt;    &lt;span class="s"&gt;/home/chen/my_app/uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# the uwsgi_params file you installed&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. Django 项目下需要从 Nginx 源码中复制出一份 &lt;code&gt;uwsgi_params&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;QUERY_STRING&lt;/span&gt;       &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;query_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;REQUEST_METHOD&lt;/span&gt;     &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;CONTENT_TYPE&lt;/span&gt;       &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;CONTENT_LENGTH&lt;/span&gt;     &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;content_length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;REQUEST_URI&lt;/span&gt;        &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;PATH_INFO&lt;/span&gt;          &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;document_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;DOCUMENT_ROOT&lt;/span&gt;      &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;document_root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;SERVER_PROTOCOL&lt;/span&gt;    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;server_protocol&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;REQUEST_SCHEME&lt;/span&gt;     &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;HTTPS&lt;/span&gt;              &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt; &lt;span class="n"&gt;if_not_empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;REMOTE_ADDR&lt;/span&gt;        &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;REMOTE_PORT&lt;/span&gt;        &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;remote_port&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;SERVER_PORT&lt;/span&gt;        &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;server_port&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;SERVER_NAME&lt;/span&gt;        &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;server_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. Django 项目下需要一个 &lt;code&gt;my_app_wsgi.py&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_wsgi_application&lt;/span&gt;    &lt;span class="c1"&gt;# Django 1.7 前是 from django.core.handlers.wsgi import WSGIHandler&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_app.settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# “你的项目.settings”&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_wsgi_application&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# 1.7以前是 application = WSGIHandler()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4. uwsgi 启动脚本 &lt;code&gt;my_app_socket.xml&lt;/code&gt; 放在 Django 项目下&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;uwsgi&amp;gt;
       &amp;lt;socket&amp;gt;IP OR DOMAIN:8001&amp;lt;/socket&amp;gt;
       &amp;lt;chdir&amp;gt;/home/chen/my_app&amp;lt;/chdir&amp;gt;
       &amp;lt;module&amp;gt;my_app_wsgi&amp;lt;/module&amp;gt;
       &amp;lt;processes&amp;gt;4&amp;lt;/processes&amp;gt;
       &amp;lt;daemonize&amp;gt;/home/chen/my_app/uwsgi.log&amp;lt;/daemonize&amp;gt;
&amp;lt;/uwsgi&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后重启 Nginx，启动 uwsgi 的脚本 load Django App&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nginx -s reload
uwsgi -x  my_app_socket.xml
&lt;/pre&gt;&lt;/div&gt;</content><category term="devops"></category></entry><entry><title>博客托管迁移、HTTPS 加持-续</title><link href="https://breakwire.me/secure-with-https-1.html" rel="alternate"></link><published>2016-07-11T22:56:46+08:00</published><updated>2016-07-11T22:56:46+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-07-11:/secure-with-https-1.html</id><summary type="html">&lt;p&gt;博客托管迁移、HTTPS 加持-续&lt;/p&gt;</summary><content type="html">&lt;p&gt;原来写的 &lt;a href="https://breakwire.me/secure-with-https.html"&gt;博客托管迁移、HTTPS 加持&lt;/a&gt; 没写全，里面的步骤我也没怎么明白，昨天想在 VPS 上装个 Gogs 代码托管用一下的，结果没折腾成功。虽然没把 Nginx 搞坏，但还是不爽，直接重装系统，静态网站配置起来也很快，配置下系统然后再配置 Nginx 就行了，到 HTTPS 这儿又有问题了，搞了好一会才明白。&lt;/p&gt;
&lt;h2&gt;Let’s Encrypt 配置&lt;/h2&gt;
&lt;p&gt;先按照小众软件的 &lt;a href="http://www.appinn.com/use-letsencrypt-with-nginx/"&gt;在 Nginx 上使用 Let’s Encrypt 加密(HTTPS)你的网站[简明教程]&lt;/a&gt;，先直接把网站的 HTTPS 跑起来。&lt;/p&gt;
&lt;p&gt;不过运行 Let’s Encrypt 的命令应该是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/letsencrypt-auto certonly
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;没有 &lt;code&gt;–standalone&lt;/code&gt; 这个参数，是在图形界面里面选择这个选项。&lt;/p&gt;
&lt;p&gt;还有一点是 &lt;code&gt;ssl_ciphers&lt;/code&gt; 不对，要参照这个&lt;a href="https://blog.qualys.com/ssllabs/2013/08/05/configuring-apache-nginx-and-openssl-for-forward-secrecy"&gt;链接&lt;/a&gt; 的参数。&lt;/p&gt;
&lt;p&gt;Nginx 配置好之后应该是能在 Chrome 里面看到绿色的小锁。&lt;/p&gt;
&lt;h2&gt;Let’s Encrypt 续签&lt;/h2&gt;
&lt;p&gt;Let’s Encrypt 证书只有九十天的有效期，需要续签，就有各种各样的续签脚本，小众软件里面的续签方法我是没试成功。&lt;/p&gt;
&lt;p&gt;用 &lt;a href="https://github.com/xdtianyu/scripts/blob/master/lets-encrypt/README-CN.md"&gt;一个快速获取/更新 Let's encrypt 证书的 shell script&lt;/a&gt; 是搞定了。&lt;/p&gt;
&lt;p&gt;运行脚本可能会有权限问题，把 Nginx 里面的 &lt;code&gt;ssl_certificate&lt;/code&gt; &lt;code&gt;ssl_certificate_key&lt;/code&gt; 改掉就行了，加入 &lt;code&gt;cron&lt;/code&gt; 定时任务，搞定。&lt;/p&gt;
&lt;p&gt;最后附上 Nginx 的配置文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;port&lt;/span&gt; &lt;span class="err"&gt;your&lt;/span&gt; &lt;span class="err"&gt;site&lt;/span&gt; &lt;span class="err"&gt;will&lt;/span&gt; &lt;span class="err"&gt;be&lt;/span&gt; &lt;span class="err"&gt;served&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;
    &lt;span class="err"&gt;listen&lt;/span&gt;      &lt;span class="err"&gt;443&lt;/span&gt; &lt;span class="err"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;domain&lt;/span&gt; &lt;span class="err"&gt;name&lt;/span&gt; &lt;span class="err"&gt;it&lt;/span&gt; &lt;span class="err"&gt;will&lt;/span&gt; &lt;span class="err"&gt;serve&lt;/span&gt; &lt;span class="err"&gt;for&lt;/span&gt;
    &lt;span class="err"&gt;server_name&lt;/span&gt; &lt;span class="err"&gt;breakwire.me&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;substitute&lt;/span&gt; &lt;span class="err"&gt;your&lt;/span&gt; &lt;span class="err"&gt;machine&amp;#39;s&lt;/span&gt; &lt;span class="err"&gt;IP&lt;/span&gt; &lt;span class="err"&gt;address&lt;/span&gt; &lt;span class="err"&gt;or&lt;/span&gt; &lt;span class="err"&gt;FQDN&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Let’s&lt;/span&gt; &lt;span class="err"&gt;Encrypt&lt;/span&gt;
    &lt;span class="err"&gt;ssl&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;ssl_certificate&lt;/span&gt;     &lt;span class="err"&gt;/home/chen/breakwire.chained.crt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="err"&gt;/home/chen/breakwire.me.key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;ssl_protocols&lt;/span&gt; &lt;span class="err"&gt;TLSv1&lt;/span&gt; &lt;span class="err"&gt;TLSv1.1&lt;/span&gt; &lt;span class="err"&gt;TLSv1.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;ssl_ciphers&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;EECDH+ECDSA+AESGCM&lt;/span&gt; &lt;span class="err"&gt;EECDH+aRSA+AESGCM&lt;/span&gt; &lt;span class="err"&gt;EECDH+ECDSA+SHA384&lt;/span&gt; &lt;span class="err"&gt;EECDH+ECDSA+SHA256&lt;/span&gt; &lt;span class="err"&gt;EECDH+aRSA+SHA384&lt;/span&gt; &lt;span class="err"&gt;EECDH+aRSA+SHA256&lt;/span&gt; &lt;span class="err"&gt;EECDH+aRSA+RC4&lt;/span&gt; &lt;span class="err"&gt;EECDH&lt;/span&gt; &lt;span class="err"&gt;EDH+aRSA&lt;/span&gt; &lt;span class="err"&gt;RC4&lt;/span&gt; &lt;span class="err"&gt;!aNULL&lt;/span&gt; &lt;span class="err"&gt;!eNULL&lt;/span&gt; &lt;span class="err"&gt;!LOW&lt;/span&gt; &lt;span class="err"&gt;!3DES&lt;/span&gt; &lt;span class="err"&gt;!MD5&lt;/span&gt; &lt;span class="err"&gt;!EXP&lt;/span&gt; &lt;span class="err"&gt;!PSK&lt;/span&gt; &lt;span class="err"&gt;!SRP&lt;/span&gt; &lt;span class="err"&gt;!DSS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;allow&lt;/span&gt; &lt;span class="err"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;location&lt;/span&gt;
    &lt;span class="err"&gt;location&lt;/span&gt; &lt;span class="err"&gt;/&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
       &lt;span class="err"&gt;root&lt;/span&gt; &lt;span class="err"&gt;/home/chen/BreakWire/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="err"&gt;index&lt;/span&gt; &lt;span class="err"&gt;index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;logs&lt;/span&gt;
    &lt;span class="nt"&gt;access_log&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;chen&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;nginx-log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;access&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;log&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;error_log&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;chen&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;nginx-log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;log&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;gzip&lt;/span&gt;
    &lt;span class="nt"&gt;gzip&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;gzip_min_length&lt;/span&gt; &lt;span class="nt"&gt;1k&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;gzip_buffers&lt;/span&gt; &lt;span class="nt"&gt;4&lt;/span&gt; &lt;span class="nt"&gt;16k&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;gzip_comp_level&lt;/span&gt; &lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;gzip_types&lt;/span&gt; &lt;span class="nt"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;plain&lt;/span&gt; &lt;span class="nt"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;x-javascript&lt;/span&gt; &lt;span class="nt"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;css&lt;/span&gt; &lt;span class="nt"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;xml&lt;/span&gt; &lt;span class="nt"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;javascript&lt;/span&gt;  &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;jpeg&lt;/span&gt; &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;png&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;gzip_disable&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;MSIE &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;\.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;listen&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;server_name&lt;/span&gt; &lt;span class="err"&gt;breakwire.me&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;301&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;HTTP 重定向至 HTTPS&lt;/h2&gt;
&lt;p&gt;这步照着小众软件里面的步骤做就搞定了，就是在 Nginx 里面再加个配置。&lt;/p&gt;</content><category term="devops"></category></entry><entry><title>关于离开南京的决定</title><link href="https://breakwire.me/the-desicion-about-leaving-nanjing.html" rel="alternate"></link><published>2016-07-04T22:42:43+08:00</published><updated>2016-07-04T22:42:43+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-07-04:/the-desicion-about-leaving-nanjing.html</id><summary type="html">&lt;p&gt;我倒是想离开地球来着……&lt;/p&gt;</summary><content type="html">&lt;h2&gt;这四年干了啥&lt;/h2&gt;
&lt;p&gt;在南京上了四年学，八流民办本科，最后连两张「纸」都没有拿到。专业选修少 2.5 个学分，结业处理，拖一个学期把学分补上就能拿，这事也挺讽刺的。对我没什么影响，该干嘛干嘛。我也没有觉得对我去什么公司造成了什么影响，因为我知道自己的水平，「歧视学校」、「歧视学历」这种事情根本轮不上我。&lt;/p&gt;
&lt;p&gt;15 年十月份开始实习，南京的一个小前端团队，从一个对前端的理解还停留在静态页面的菜鸟，成为一个对前端开发稍稍有点入门的菜鸟，方法论，前端开发的思想都学到了点。入职两个月的时候收到正式 offer，薪酬虽不比南京的某些「血汗工厂」，但综合考虑到时薪和付出的精力、时间，我还是比较满意的。当时也没急着接下来，因为大三下学期开始找实习的时候我是一心想着要去上海或者苏州。九月份接到过一个上海比特币中国的 Python 开发实习面试，无论是在技术上和行业知名度上都非常不错。但因为个人水平的问题，尽管最后说是能来实习，但实习补贴较低，低到维持上海的基本生存都够呛，也在上海玩了两天，深感大城市的压力，直接推掉然后接受了南京的这个实习工作。&lt;/p&gt;
&lt;p&gt;四月份的时候其实是和实习的团队答应了留下来，因为也没辙了。想去苏州就找人内推同城旅游，蜗牛就算了，人只招三年以上经验的，同城电面之后没下文了，本来觉得南京也有几个公司可以一去的，但连面试都没刷上，索性放弃。五月初的时候因为要交论文，从住处到学校也挺远的，跑了五六次，很不爽。正好刷论坛刷到一个南通的朋友在招人，就找到微信，约了见面聊，正好家里也有事，回家一趟，也见了面，聊了，还行，想了两天就决定了，回吧。&lt;/p&gt;
&lt;p&gt;回南京后就和团队的人说了，同事说你要是想尝试就去尝试，回家肯定得遇到很多你预料到的没预料到的事情，你自己也做好准备接受就行，南京这边你想回来也可以。因为学校的事情也就这样了，没必要再呆着了，和前同事道匆忙道别，提前打包东西撤了。&lt;/p&gt;
&lt;h2&gt;为什么&lt;/h2&gt;
&lt;p&gt;做这个决定前我刷了很多知乎，我觉得最有用的一条就是这个 &lt;a href="http://daily.zhihu.com/story/7436000"&gt;留在大城市还是回到小城市，列个式子算一下&lt;/a&gt;。计算效用的六个因素，前三个因素都与事业、工作有关，如果设计了比较好的模型的话是能够计算出数值的，因为里面的参数都是可量化的。后三个因素呢，涉及到个人、家庭、感情，就比较难量化了，有人是独身主义者，有人是丁克，有人不想和父母住在一起，甚至连呆在一个城市都不行，有人对于城市文化、历史底蕴、文明程度、教育资源非常看重。后三个参数如果要设计模型的话就有很多的参数，而且参数数量不定，计算出可能千差万别。我觉得最终量化这个效用出一个数字来还是挺复杂的，但是呢，能算出一个偏向那个选择更加合适还是可以的。从我个人角度上来说，我更倾向于在前三个因素中获得较高的效用，后三个我会在前三个有较好的基础之后尽力去做，现在回来也是一样，计划可能会变，加快或者变慢，细节上的变动，但是战略并没有改变。&lt;/p&gt;
&lt;p&gt;离开南京回到南通，我不想说太多我有多少牺牲，或者得到什么，人想要什么不想要什么都是随时会变，对于我这样在某些方面也有些自信的人来说，也不是我说想要就能达到的，保持对未知的敬畏，同时也有自信和能力去发掘未知。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个人的命运当然要靠自己奋斗，当然，历史的选择也是很重要的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;王垠的 &lt;a href="http://www.yinwang.org/blog-cn/2016/06/19/leaving-united-states"&gt;关于离开美国的决定&lt;/a&gt;，简单来说就是王垠觉得自己怀才不遇，虽然有吃有喝有女友，耽误了女友在国内的学业，然后供其出国读书，然后还分手了。但现在依然是有女友的，人家还有美国绿卡，他自己呢，钱也挣了不少，但都花了，供前女友读书生活，买不起湾区的房子，被前公司迫害，想回中国吃烧烤。&lt;/p&gt;
&lt;p&gt;隔了两天王垠又不回国了……&lt;a href="http://www.yinwang.org/blog-cn/2016/06/22/plan-change"&gt;两个计划的变动&lt;/a&gt;，原来我也可能是这样，作出一个决定，然后隔两天，又反悔了，现在呢我也不好这么搞了，已经回了南通，入职两周，感觉良好，修了点已有的 Rails 应用的 bug，大部分其实我也没怎么明白，Rails 的黑魔法真多，有点懵，然后开始写 Python，写嵌入式硬件和服务器间的脚本，写起来也挺头疼，Python 忘得差不多，但我还是挺乐意继续学 Python，Rails 虽然基本没怎么写，但我也感受出其厉害之处了，也值得一学，也为自己的开源、Side Project 制定了计划，希望能够完成。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但行好事，莫问前程。&lt;/p&gt;
&lt;p&gt;MacTalk 池建强&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="fml"></category></entry><entry><title>博客托管迁移、HTTPS 加持</title><link href="https://breakwire.me/secure-with-https.html" rel="alternate"></link><published>2016-06-21T23:19:19+08:00</published><updated>2016-06-21T23:19:19+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-06-21:/secure-with-https.html</id><summary type="html">&lt;p&gt;博客托管迁移、HTTPS 加持&lt;/p&gt;</summary><content type="html">&lt;p&gt;博客迁移到 Vultr VPS 上了，然后加上 &lt;a href="https://letsencrypt.org"&gt;Let's Encrypt&lt;/a&gt; 的免费 SSL 证书，速度好像是比放在 GitHub 上快了点。显示参考的小众软件 &lt;a href="http://www.appinn.com/use-letsencrypt-with-nginx/"&gt;在 Nginx 上使用 Let’s Encrypt 加密(HTTPS)你的网站[简明教程]&lt;/a&gt;，但是 Nginx 配置的地方 &lt;code&gt;ssl_ciphers&lt;/code&gt; 好像是不对，后来参考这个&lt;a href="https://blog.qualys.com/ssllabs/2013/08/05/configuring-apache-nginx-and-openssl-for-forward-secrecy"&gt;链接&lt;/a&gt; 能够配置成功，Chrome 能出现绿色的小锁。然后就是把 HTTP 的请求也重定向到 HTTPS 上，这步照着小众软件做是对的。最后一步是自动续签脚本，照着小众软件的做是不行的，就参考这个 &lt;a href="https://github.com/xdtianyu/scripts/blob/master/lets-encrypt/README-CN.md"&gt;一个快速获取/更新 Let's encrypt 证书的 shell script&lt;/a&gt;，设置好，就等到九月份看它能不能自动续签了。&lt;/p&gt;
&lt;p&gt;GitHub Pages 现在也提供 HTTPS 了，域名解析是用的 DNSPod，把 A 记录设置成 VPS 的 IP 就行了，停用 CNAME 解析，把静态文件的目录里的 CNAME 也删掉，这样两个网址&lt;a href="https://breakwire.me"&gt;https://breakwire.me&lt;/a&gt; &lt;a href="https://lsdlab.github.io"&gt;https://lsdlab.github.io&lt;/a&gt; 都是 HTTPS 加持了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="secure-with-https" src="/images/secure-with-https.png"&gt;&lt;/p&gt;</content><category term="devops"></category></entry><entry><title>I'm done here</title><link href="https://breakwire.me/i-am-done-here.html" rel="alternate"></link><published>2016-06-08T17:17:50+08:00</published><updated>2016-06-08T17:17:50+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-06-08:/i-am-done-here.html</id><summary type="html">&lt;p&gt;See your guys later or we will never see each ever again.&lt;/p&gt;</summary><content type="html">&lt;p&gt;半年多前端做下来的成果，208 个 commits 和 107 个 merge request，半年多从前端菜鸟到也算是新手了，Node.js, Express, React 等等都接触了些，也算不错。&lt;/p&gt;
&lt;p&gt;&lt;img alt="282-commits" src="/images/282-commits.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="107-pr" src="/images/107-pr.png"&gt;&lt;/p&gt;
&lt;p&gt;前公司没得说，工作上也算轻松，时间非常自由，空闲的时候就学学新东西，摸鱼抓虾，时不时下个馆子等等。同事相处的也挺好，老板也很好，都是值得学习的榜样。全职薪酬在南京的话，对于应届生来说已经是非常不错的了。不需要和南京的某些所谓的「大厂」以及「血汗工厂」相比，那样是完全没有可比性的。南京一堆外包大厂，某些人还冲着名头「大公司」就去了，实习生就「996」，工资低还要做很多事情，技术规范、水平，远达不到「大公司」的水平；南邮的研究生去华为，批发价一万，只要不是 special offer，基本都是这个价。谁想来燃烧青春请尽管来南京，就冲着南京的华为中兴，还有诸多外包大厂，前面的能燃烧自己以换取更多金钱，后面的燃烧自己只能为南京 GDP 做贡献了，金钱就别想了。&lt;/p&gt;
&lt;p&gt;学校的事情也就这样了，也没法搞了，专业选修少 2.5 个学分，两张厕纸都不如的东西还得晚一个学期才能拿到，不过也无所谓啦，晚就晚呗，我又不靠这个挣钱。&lt;/p&gt;
&lt;p&gt;本来说是二十号左右回去，没必要在这边呆着了就早点回去呗。明天收拾东西能快递的快递，后天老爹来接我，然后就约朋友玩玩，把书房弄起来，桌子椅子显示器全买上，就是一个 home office 啦，学学 Rails，二十号入职，尽管也也有一些很麻烦的事情要面对，但必须得处理。&lt;/p&gt;</content><category term="fml"></category></entry><entry><title>Screw you, i'm going home</title><link href="https://breakwire.me/screw-you-i-am-going-home.html" rel="alternate"></link><published>2016-06-02T23:20:14+08:00</published><updated>2016-06-02T23:20:14+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-06-02:/screw-you-i-am-going-home.html</id><summary type="html">&lt;p&gt;Actually, i don't wanna go home neither......&lt;/p&gt;</summary><content type="html">&lt;p&gt;前段时间工作、生活的状态都非常差，尝试 React 封装项目中的组件，用 React 写一个很复杂的页面，很难写，很头疼。学校里还有一些事情要处理，再加上个人的心理状态很差，休假一周，正好回家一趟，在家思考下人生，约了人谈谈，看有没有机会回去工作。&lt;/p&gt;
&lt;p&gt;和同事聊天说这个事情，我想回去和人聊聊，看看有没有机会。然后同事问我主要诉求，我没法回答，对我来说不是一个事情满足了主要诉求就能作出决定的，太多事情都是很多因素共同作用所导致的结果。我不可能因为一个公司给的钱很多，都超过了我的水平的价值了，我就看在钱的份上就直接去了。要综合考虑各个方面的因素，得失利弊，没法选择一个最好的，只能根据当下的情况选择一个最适合的。也有一种什么情况呢，因为个人的原因，就看中了一个点，这个点对我个人来讲占很大的比重，但这并不是主要诉求，也有其他一个在别人看来不重要的点，但我就是不能接受，也有可能拒绝这个机会。&lt;/p&gt;
&lt;p&gt;这篇博客写了跨度一个多礼拜，家也回了，也和潜在雇主详谈了，各个方面，做的事情，机会，薪酬。从实际衡量上讲，房租、物价、消费水平，在两边开到相同工资的情况下，回家的确是要获得更多的金钱效益，但从长远发展上来讲是有一定的影响，入职一个新工作，新公司，就得想着下一份工作，我希望在现在这份工作中获得多少成长，下一份工作雇主在行业中的影响力以及名气，薪酬要达到什么水平。要这么考虑的话回家绝对是一个很烂的选择，现在找到了一个工作，也不错，薪酬相当，也有挺大发挥空间，但做砸了，下一份工作在哪里呢？当然，也不是说回到小城市就不能再出去了，一个人的职业生涯成长主要还是靠个人能力，做事的能力，况且还是如此自由透明的互联网行业。&lt;/p&gt;
&lt;p&gt;最终还是作出了决定，回家。技术方面，Python 不会放弃，会继续学，还有数据分析，统计学的入门，基础需要补。做 Rails 开发，前端也会继续学继续做，但不会深入学习，不会去尝试学习曲线过于陡峭，更新过快的东西。设计方面我也会学，学 Sketch，模仿画原型。其他方面我会继续多看互联网文化方面的书，尝试自己写这方面的博客，或者是做播客，还有视频，尝试剪辑 GoPro 视频，也留着自己看看。&lt;/p&gt;
&lt;p&gt;六月二十号学校的事情应该都能够结束，这半个月也会在公司做收尾工作，写些博客，整理整理资料，留着给以后的新人快速配好开发环境，熟悉项目结构。&lt;/p&gt;
&lt;p&gt;后面的事情就再说啦~&lt;/p&gt;</content><category term="fml"></category></entry><entry><title>博客迁移至 Pelican</title><link href="https://breakwire.me/move-to-pelican.html" rel="alternate"></link><published>2016-03-27T13:15:36+08:00</published><updated>2016-03-27T13:15:36+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-03-27:/move-to-pelican.html</id><summary type="html">&lt;p&gt;博客迁移至 Pelican&lt;/p&gt;</summary><content type="html">&lt;p&gt;Octopress 挺麻烦的，还有些问题，依赖太多，Ruby 我也不会，看不懂插件也看不懂模板。想试一下 Hexo 的来着，都不能初始化工程，不知道什么毛病。Hugo 就不尝试了，Go 现在没时间学，就差不多只剩下一个 Python 的 Pelican 了。搜了下也基本搞好了，模板也能看得懂，就挑了一个简单的模板 &lt;a href="https://github.com/gilsondev/pelican-clean-blog"&gt;gilsondev/pelican-clean-blog&lt;/a&gt;，每篇文章都有题图，能直接引用本地的图片，能直接在 Markdown 中引用另一篇文章或者页面，RSS 什么的也都有，生成也很快，开发环境也挺方便，改了模板也能立刻看到改变。&lt;/p&gt;
&lt;p&gt;&lt;img alt="move-to-pelican" src="/images/move-to-pelican.png"&gt;&lt;/p&gt;
&lt;h2&gt;RSS 设置&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Feed generation is usually not desired when developing&lt;/span&gt;
&lt;span class="n"&gt;FEED_DOMAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/all.atom.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c1"&gt;# Social widget&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://blog.breakwire.me/feeds/all.atom.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://twitter.com/lsdvincent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Instagram&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://instagram.com/lsdvincent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GitHub&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com/lsdlab&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Medium&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://medium.com/@breakwire&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;RSS 的设置就是三个地方要改动，&lt;code&gt;FEED_DOMAIN&lt;/code&gt; 和 &lt;code&gt;FEED_ALL_ATOM&lt;/code&gt;，&lt;code&gt;SOCIAL&lt;/code&gt; 就是页边底部的几个图标，&lt;/p&gt;
&lt;h2&gt;本地图片的引用&lt;/h2&gt;
&lt;p&gt;在文章中要引用本地图片需要设置静态目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;images&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是个数组，在 &lt;code&gt;content&lt;/code&gt; 目录下新建一个 &lt;code&gt;images&lt;/code&gt; 目录，要想在 content 中的一篇文章中直接引用图片就是这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;![Merida R903 Blue](/images/my-road-bike.jpg)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再 &lt;code&gt;make html&lt;/code&gt; 生成文件的时候他会把 &lt;code&gt;images&lt;/code&gt; 目录中的文件复制到 &lt;code&gt;output&lt;/code&gt; 中的 &lt;code&gt;images&lt;/code&gt; 目录中。&lt;/p&gt;
&lt;p&gt;还有一个就是 &lt;code&gt;gilsondev/pelican-clean-blog&lt;/code&gt; 的每篇文章都有个题图能设置，和直接在文章中引用是一样的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Header_Cover: /images/my-road-bike.jpg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;需要注意的是图片文件名不能有中文&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;在文章中直接引用另一篇文章&lt;/h2&gt;
&lt;p&gt;应用的默认目录是 &lt;code&gt;content&lt;/code&gt;，所以我在 &lt;code&gt;pages&lt;/code&gt; ，&lt;code&gt;About&lt;/code&gt; 页面中想引用一篇文章应该是这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Ref to [Working for living]({filename}/2016-03-19.md).
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要在一篇文章中引用一个页面也很简单：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Ref to [Working for living]({filename}/pages/about.md).
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;新文章以及更新至 GitHub Pages 的 shell 脚本&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/lsdlab/957cc8887ef20514e27d"&gt;lsdlab/newblog.sh&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#! /bin/zsh&lt;/span&gt;

&lt;span class="nb"&gt;cd&lt;/span&gt; content/

&lt;span class="nv"&gt;fileName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date &lt;span class="s2"&gt;&amp;quot;+%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;currentTime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date &lt;span class="s2"&gt;&amp;quot;+%Y-%m-%d %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

cat&amp;gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;fileName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.md&lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;Title:&lt;/span&gt;
&lt;span class="s"&gt;Date: ${currentTime}&lt;/span&gt;
&lt;span class="s"&gt;Modified: ${currentTime}&lt;/span&gt;
&lt;span class="s"&gt;Category:&lt;/span&gt;
&lt;span class="s"&gt;Tags:&lt;/span&gt;
&lt;span class="s"&gt;Slug:&lt;/span&gt;
&lt;span class="s"&gt;Authors: Chen Jian&lt;/span&gt;
&lt;span class="s"&gt;Summary:&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://gist.github.com/lsdlab/89f6fbbd3c6681285167"&gt;lsdlab/publishblog.sh&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#! /bin/zsh&lt;/span&gt;

make html
&lt;span class="nb"&gt;cd&lt;/span&gt; output
git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;update&amp;quot;&lt;/span&gt;
git push origin master
&lt;/pre&gt;&lt;/div&gt;</content><category term="pelican"></category></entry><entry><title>过度思考 Over thinking</title><link href="https://breakwire.me/over-thinking.html" rel="alternate"></link><published>2016-01-14T23:02:31+08:00</published><updated>2016-01-14T23:02:31+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-01-14:/over-thinking.html</id><summary type="html">&lt;p&gt;Don't over thinking, OK?!&lt;/p&gt;</summary><content type="html">&lt;p&gt;写代码很多的时候都是在思考循环，给定输入、边界条件 (edge case)，获得输出，输入容易，剩下来就是如何抽象出一个循环的过程，构造边界条件了。根据不同的输入，为了让这个程序有尽可能强的容错能力，就需要好好思考如何构造边界条件了。&lt;/p&gt;
&lt;h2&gt;过度思考的例子&lt;/h2&gt;
&lt;p&gt;15 年暑假学了两个月的 Android 开发，网络请求获得 JSON 数据之后解析，解析可能会有网络的问题，可能服务端构造 JSON 就错了，移动端解析也解不出来，总之有很多种异常要去 catch()，能把每项异常都想到然后要写代码捕捉错误，根据不同的情况是要重试还是直接提示用户出错了，出错提示信息怎么写？真的把不同的出错原因 Toast 给用户说这个出错了那个出错了吗？用户根本不想知道，你只要告诉我出错了就行，不要告诉我具体原因。你要显示不同的出错信息的话，专业用户可能知道如何解决，是找你报错还是自己的网络原因重试能解决，可专业用户太少，根本没有必要过度思考做的这么细。&lt;/p&gt;
&lt;h2&gt;非专业知识的过度思考&lt;/h2&gt;
&lt;p&gt;实习了也得有三个多月了，刚开始感觉有点难度，逐渐上手，挺开心，又感觉有难度了，前端怎么这么坑！慢慢摸索，看书，不断尝试，又感觉上手了，挺开心，但一定是要继续做前端吗？也不一定，甚至都不一定要做这一行，不做前端做啥？Python 后端也不错，iOS 也不错，都想做，专门研究一个，变成这个语言的专家，可行；研究各种各样的小东西，自己倒腾，也行，没什么对于职业生涯利不利的，其实还没真正上手，成为一名工程师就考虑这些问题？有点过了吧？&lt;/p&gt;</content><category term="thinking"></category></entry><entry><title>2015</title><link href="https://breakwire.me/2015.html" rel="alternate"></link><published>2015-12-31T10:21:39+08:00</published><updated>2015-12-31T10:21:39+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-12-31:/2015.html</id><summary type="html">&lt;p&gt;This year was absolute shitty year for me......&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;大四。&lt;/li&gt;
&lt;li&gt;四月份开始找实习。&lt;/li&gt;
&lt;li&gt;面南京的一家公司，挂了。&lt;/li&gt;
&lt;li&gt;电话面试北京一家创业公司，挂了。&lt;/li&gt;
&lt;li&gt;去苏州两趟，感觉良好，环境，城市规划方面。&lt;/li&gt;
&lt;li&gt;这两家实习工资开太低，推了。&lt;/li&gt;
&lt;li&gt;学校安排的两个月的毫无任何用处的强制课程忍了两个月，感受了北上广般的每天四小时花在通勤上。&lt;/li&gt;
&lt;li&gt;去上海一趟面比特币中国，顿感压力山大，滚回南京接受了现在的实习工作。&lt;/li&gt;
&lt;li&gt;开始实习头一个月看代码比较困惑。&lt;/li&gt;
&lt;li&gt;搬家到离公司近的地方。&lt;/li&gt;
&lt;li&gt;又聊了一家南京的公司，被拒，虽然工资高，但算上辛苦程度，还是不划算。&lt;/li&gt;
&lt;li&gt;追求女生被发卡，我还借人情债给人安排了工作，还好老子问好了能不能追，不然浪费更多精力。&lt;/li&gt;
&lt;li&gt;工作两个多月，逐渐上手，能给正式 Offer，薪酬合理，准备接受。&lt;/li&gt;
&lt;li&gt;算账到炸裂，上四年学花了近十八万，工作两年是能挣回来，但对这个效率我还是不满意。&lt;/li&gt;
&lt;li&gt;16年需要全面提高效率，没什么可担心的，完成工作，刷几本经典教材，英文教材，刷 LeetCode，还有 Python。&lt;/li&gt;
&lt;li&gt;kindle可以买一个，PDF 可以在电脑上看。现在手上的 iPad mini 2 和 iPhone 5c 可以都出掉，加钱换部 iPhone 6s，虽然我很舍不得我的粉红色 iPhone 5c。&lt;/li&gt;
&lt;/ul&gt;</content><category term="fml"></category></entry><entry><title>JavaScript 模块化开发</title><link href="https://breakwire.me/javascript-development-in-module.html" rel="alternate"></link><published>2015-11-19T00:50:23+08:00</published><updated>2015-11-19T00:50:23+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-11-19:/javascript-development-in-module.html</id><summary type="html">&lt;p&gt;JavaScript 模块化开发&lt;/p&gt;</summary><content type="html">&lt;p&gt;两种规范，&lt;a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88)"&gt;AMD 异步模块定义&lt;/a&gt; 和 &lt;a href="https://github.com/seajs/seajs/issues/242"&gt;CMD 通用模块定义&lt;/a&gt;。
实现了这两个规范的库分别是 &lt;a href="http://requirejs.org/"&gt;RequireJS&lt;/a&gt; 和 &lt;a href="http://seajs.org/docs/"&gt;SeaJS&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;目的&lt;/h2&gt;
&lt;p&gt;模块化 JavaScript 开发。比如我需要在搜索页面放个翻页器，搜索结果二十万是准确数字，要显示出第一页和最后一页，随着当前的页数变化，只显示当前页的前后两页，包括首页和末页，要维护这个状态是很复杂的，基本不可能，只能是直接动态生成这个状态。输入结果数量，传入模块，模块动态生成翻页器，当前页的选中状态，输出整个翻页器。&lt;/p&gt;
&lt;h2&gt;区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;AMD 将模块依赖全部写在 JS 文件的开头，浏览器加载模块，异步加载这个模块指定的依赖，全部加载完成后执行回调；CMD 模块依赖是就近原则，不需要在文件最头部指定，就近指定依赖就近加载。&lt;/li&gt;
&lt;li&gt;其他区别我也没看出来，参照链接：&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20351507/answer/14859415"&gt;AMD 和 CMD 的区别有哪些？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/21347409#answer-2323656"&gt;YUI Modules 与 AMD/CMD，哪一种方式更好？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.youyo.name/archives/commonjs-amd-cmd-my-opinion.html"&gt;commonJS\AMD\CMD和我的看法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://justineo.github.io/singles/writing-modular-js/"&gt;使用 AMD、CommonJS 及 ES Harmony 编写模块化的 JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/seajs/seajs/issues/277"&gt;与 RequireJS 的异同&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20342350"&gt;LABjs、RequireJS、SeaJS 哪个最好用？为什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lifesinger.wordpress.com/2011/05/17/the-difference-between-seajs-and-requirejs/"&gt;SeaJS 和 RequireJS 的异同&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;RequireJS&lt;/h2&gt;
&lt;h3&gt;What&lt;/h3&gt;
&lt;p&gt;定义模块之间的依赖，并异步加载这些模块，当所有依赖都被满足之后，RequireJS 会执行预定义的回调函数。&lt;/p&gt;
&lt;h3&gt;define()&lt;/h3&gt;
&lt;p&gt;定义模块，不带扩展名作为模块的名称。&lt;/p&gt;
&lt;h3&gt;require()&lt;/h3&gt;
&lt;p&gt;加载依赖。&lt;/p&gt;
&lt;p&gt;参数一：数组，每一项都是一个模块的名称
参数二：函数，与数组相对应&lt;/p&gt;
&lt;p&gt;保证所有的依赖（数组中的模块）被加载完成之后才会执行回调函数。&lt;/p&gt;
&lt;p&gt;underscore.js 在 RequireJS 中的 config 方法中配置模块名称与实际模块之间的映射关系：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;underscore&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;libs/underscore/underscore&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;shims&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;underscore&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;path 中可以省略扩展名 &lt;code&gt;.js&lt;/code&gt;，shims 中暴露出 &lt;code&gt;_&lt;/code&gt; underscore。&lt;/p&gt;
&lt;p&gt;具体的模块内部怎么写，能写啥，如何调用下次再写。&lt;/p&gt;</content><category term="javascript"></category></entry><entry><title>Python 基本类型及方法</title><link href="https://breakwire.me/python-types-and-methods.html" rel="alternate"></link><published>2015-08-25T13:47:21+08:00</published><updated>2015-08-25T13:47:21+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-08-25:/python-types-and-methods.html</id><summary type="html">&lt;p&gt;Python 基本类型及方法&lt;/p&gt;</summary><content type="html">&lt;h2&gt;内建 6 种序列&lt;/h2&gt;
&lt;p&gt;列表、元组、字符串、Unicode 字符串、buffer 对象、xrange 对象。&lt;/p&gt;
&lt;h2&gt;正文序列类型 str&lt;/h2&gt;
&lt;p&gt;字符串有穷序列 不可变 immutable。
操作：求长度，取成员，切字串（切片），查找字串，判断成员字符类型。
基于已有字符串构造新串：改变大小写，拼接， 格式化，字串替换，切片。&lt;/p&gt;
&lt;h3&gt;字符串方法&lt;/h3&gt;
&lt;h4&gt;join() split()&lt;/h4&gt;
&lt;p&gt;互为逆方法，作用分别为在字符串序列中规律添加元素，在字符串中删除规律元素，将字符串分割成单个序列：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1+2+3+4+5&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Using the default&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Using&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;the&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不带任何参数的 split()，所有空格符（空格，Tab，换行）都分隔开。还有其他方法：lsplit,rsplit&lt;/p&gt;
&lt;h4&gt;其他操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;input() raw_input()&lt;/li&gt;
&lt;li&gt;+  拼接字符串， 字符串表示 str 和 repr，将值转换为字符串的两种机制，一个是使用 str() 函数转换成合理形式的字符串，repr() 是创建一个字符串，以合法到的 Python 表达式形式来表示值。&lt;/li&gt;
&lt;li&gt;长字符串可用三个引号代替普通括号；原始字符串，需要显示路径需要很多的斜杠，不想要用太多转义符的地方，以 &lt;code&gt;r&lt;/code&gt; 开头，如 &lt;code&gt;r'/User/Chen/PythonProjects'&lt;/code&gt;；Unicode 字符串以 &lt;code&gt;u&lt;/code&gt; 开头，用 &lt;code&gt;decode()&lt;/code&gt; 和 &lt;code&gt;encode()&lt;/code&gt; 进行解码。&lt;/li&gt;
&lt;li&gt;字符串格式化 % ，设置宽度精度，左右对其，填充0&lt;/li&gt;
&lt;li&gt;替换 ，translate() 处理单个字符，可同时进行，replace() 替换所有匹配项&lt;/li&gt;
&lt;li&gt;strip() 返回去除两侧（不包括内部）空格的字符串，lstrip() rstrip() 左右。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;序列类型 list tuple&lt;/h2&gt;
&lt;p&gt;通用序列操作：索引，切片，加，乘，检查成员资格，长度，最大值，最小值。还有个最重要的操作迭代，以后单独讲。&lt;/p&gt;
&lt;h3&gt;列表 可变 mutable&lt;/h3&gt;
&lt;p&gt;任意元素序列，支持所有共有的序列操作。
所有可变序列操作（改变当前列表）：元素替换（复制），切变，替换/删除，元素插入删除。&lt;/p&gt;
&lt;h4&gt;切片&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;切片区间是左闭右开；支持负索引&lt;/li&gt;
&lt;li&gt;最后一个元素是 -1&lt;/li&gt;
&lt;li&gt;复制整个列表左右索引都为空，前索引后索引可有一个为空&lt;/li&gt;
&lt;li&gt;默认步长为 1，大于 1 的步长如 4，指的是每 4 个元素的第一个，负数步长就是反过来提取。&lt;/li&gt;
&lt;li&gt;a[1, 2, 3, 4, 5]：取偶数位置：a[1::2]，从索引 1 开始，取每两个元素的第一个&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;基本操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;序列相加（返回新序列，不改变原序列）；乘法，*；返回新序列；成员资格，in/not in；长度，最小值，最大值。&lt;/li&gt;
&lt;li&gt;通过索引、切片改变列表，元素赋值，删除元素使用 del 语句。&lt;/li&gt;
&lt;li&gt;list() 函数，适用于所有类型的序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;列表方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;append() 在末尾追加新的对象&lt;/li&gt;
&lt;li&gt;count() 统计某元素出现的次数&lt;/li&gt;
&lt;li&gt;extend() listB.extend(listB)在末尾一次性追缴另一个列表中的多个值，原位置操作(in-place operation)&lt;/li&gt;
&lt;li&gt;index() 匹配元素的第一个索引值&lt;/li&gt;
&lt;li&gt;insert() insert(3, "insert")，在原序列索引 3 前插入元素，等价于切片赋值 list[3:3] = "insert"&lt;/li&gt;
&lt;li&gt;pop() 移除最后一个元素，并返回，可以 用来实现栈这个数据结构，后进先出，LIFO&lt;/li&gt;
&lt;li&gt;remove() 移除第一个匹配项&lt;/li&gt;
&lt;li&gt;reverse() 将元素反向存放&lt;/li&gt;
&lt;li&gt;sort() 原位置排序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;元组 不可变 无方法&lt;/h3&gt;
&lt;p&gt;任意元素有穷序列，一个元组的成员可以为不同类型的对象   &lt;strong&gt;序列共有操作&lt;/strong&gt;：成员判断(in, not in)，取元素/切片，和长度，元素检索/计数，最大/最小，拼接/重复拼接（产生新序列）。
不变序列唯一特殊操作 hash，从任意个不变序列产生一个整数。
不变序列可作为字典的关键码，可作为 set/forzenset 的元素。&lt;/p&gt;
&lt;h2&gt;集合类型 set  forzenset&lt;/h2&gt;
&lt;p&gt;任意满足条件的元素的汇集。
forzenset 支持所有不变集合操作：元素个数，元素判断，集合之间的关系（包含/香蕉），集合运算（并/交/差/对称差）。
set 还支持可变集合操作，修改集合的运算（并/交/差/对称差），加入/删除元素
集合的元素只能至不可变对象，可求出 hash 值。&lt;/p&gt;
&lt;h2&gt;映射类型 dict&lt;/h2&gt;
&lt;p&gt;字典 一组关键码到一组值的映射。
基本操作：添加键值对，检索键值对。
其他操作：元素个数，键存在，元素删除（基于键），其它修改字典的操作。&lt;/p&gt;
&lt;h3&gt;字典基本操作&lt;/h3&gt;
&lt;p&gt;长度，将值关联到键上，依据键取值，依据键删除键值对，依据键检查键值对是否存在于字典中。&lt;/p&gt;
&lt;p&gt;字典和列表的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;键类型：整型，浮点，字符串，或元组等&lt;strong&gt;任何不可变类型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;自动添加：键不存在于字典中，可以为其分配一个默认值，列表 append() 方法不能在索引之外简历新项。&lt;/li&gt;
&lt;li&gt;成员资格：&lt;code&gt;for k in d&lt;/code&gt; 依据键查找字典中的键值对，&lt;code&gt;for v in l&lt;/code&gt; 查找列表中的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;字典方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;dict() 用键值对或者映射和关键字参数简历字典&lt;/li&gt;
&lt;li&gt;clear() 清除字典中所有项，原地操作，无返回值。&lt;/li&gt;
&lt;li&gt;copy() 浅拷贝(shallow copy)，返回一个键值对一样的字典，值就是本身，和深拷贝(deep copy)还是有区别的，用深拷贝的情况较多，后面单独讲。&lt;/li&gt;
&lt;li&gt;fromkeys() 依据给定的键简历新的字典，默认值为 None，也可以自己指定默认值。&lt;/li&gt;
&lt;li&gt;get() 宽松的访问字典项方法，访问不存在的键，返回默认值 None，也可指定默认值。&lt;/li&gt;
&lt;li&gt;has_key() 检查是否有给定的键。&lt;/li&gt;
&lt;li&gt;items() 和 iteritems() items() 将字典项以列表的形式返回，无序；iteritems() 返回一个迭代器对象，更为高效，迭代器对象可以用来进一步筛选操作。&lt;/li&gt;
&lt;li&gt;keys() iterkeys() 和上面一样，分别返回键的列表和迭代器。&lt;/li&gt;
&lt;li&gt;values() itervalues() 分别返回值的列表和迭代器。&lt;/li&gt;
&lt;li&gt;pop() 移除给定键的键值对，并返回。&lt;/li&gt;
&lt;li&gt;popitem() 移除随机一个键值对，并返回。&lt;/li&gt;
&lt;li&gt;setdefault() 获得给定键的值，不存在时设定键值，默认值 None。&lt;/li&gt;
&lt;li&gt;update() 用一个字典更新另一个字典，相同键会覆盖。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;其他数据结构&lt;/h2&gt;
&lt;p&gt;deque&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Django Tricks</title><link href="https://breakwire.me/django-tricks.html" rel="alternate"></link><published>2015-07-14T15:14:14+08:00</published><updated>2015-07-14T15:14:14+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-07-14:/django-tricks.html</id><summary type="html">&lt;p&gt;Django Tricks&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://shinyzhu.iteye.com/blog/593427"&gt;Django 新手需要注意的十个要点&lt;/a&gt;
新手建议，可以参考，第四点我还是没明白，看了别人的代码都是把各种业务逻辑写在 &lt;code&gt;views.py&lt;/code&gt;，怎么写到另外的地方。&lt;/p&gt;
&lt;h2&gt;1. 硬编码&lt;/h2&gt;
&lt;p&gt;像导航栏上的各种项目，需要进行跳转，或者静态文件，媒体文件，需要从开发环境部署上线 的时候就很麻烦。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;    &lt;span class="c1"&gt;# 项目的根目录，其它的模板文件，静态文件，媒体文件都是根据 `BASE_DIR`&lt;/span&gt;

&lt;span class="c1"&gt;# Template dir&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;templates/account/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;templates/garage/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;templates/review/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 每个 App 的模板文件都放在统一的 `templates` 下面的每个 App 文件夹下&lt;/span&gt;

&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;/var/www/static/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;STATIC_URL&lt;/code&gt; 是用来在模板里面载入静态的媒体文件，图片，音频，视频，用法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% load staticfiles %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;quot;&lt;/span&gt;&lt;span class="na"&gt;my_app&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;myexample&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jpg&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;%}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个地方还是把图片文件放在了项目下的 &lt;code&gt;static&lt;/code&gt; 文件夹，每个 App 单独一个文件夹。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- loading Bootstrap core CSS --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ STATIC_URL }}css/bootstrap.min.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- loading customise CSS --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ STATIC_URL }}css/base_customise.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CSS, JS 文件设置，注意 &lt;code&gt;css&lt;/code&gt; 前没有 &lt;code&gt;/&lt;/code&gt;，在 &lt;code&gt;STATIC_URL&lt;/code&gt; 中已经有了斜杠。
第二个 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; 我还没明白到底是干什么的，文档里面写的是设置不同的静态文件目录，不绑定给特定的 App 用（看了半天英文还是没有明白……不过这个是必须要设置的，不设置那就找不到 CSS 和 JS 文件了）。部署到线上的的话就要把 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; 换成 &lt;code&gt;STATIC_ROOT = "/home/chen/DjangoProjects/static"&lt;/code&gt;，服务器上的文件夹。&lt;/p&gt;
&lt;h2&gt;2. URL&lt;/h2&gt;
&lt;p&gt;URL 设置 &lt;code&gt;urls.py&lt;/code&gt; 放在每个 App 下面，除非 App 真的很小，功能很少那放在和 &lt;code&gt;settings.py&lt;/code&gt; 一个文件夹下的 &lt;code&gt;urls.py&lt;/code&gt; 也没问题，一旦 App 大了之后给每个 App 单独设置 URL，和 &lt;code&gt;models.py&lt;/code&gt; &lt;code&gt;views.py&lt;/code&gt; 一起在 App 文件夹下，这样能够重用 App 到不通的项目中，在项目的 &lt;code&gt;urls.py&lt;/code&gt; 中设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;garage.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;garage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的 &lt;code&gt;namespace&lt;/code&gt; 是给在模板中直接调用 URL 用的，避免硬编码&lt;/p&gt;
&lt;p&gt;{% raw %}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-brand&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% url &amp;#39;garage:index&amp;#39; %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;BookGarage&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;p&gt;硬编码的问题我最早也纠结了很久，还在上线到服务器的时候掉到坑里了，还好也爬上来了。&lt;/p&gt;
&lt;h2&gt;3. 其他&lt;/h2&gt;
&lt;p&gt;其他建议比如：不要将项目名称包含在一引用代码中，这样不利于重用（我也没见过有人会这么做）。
部署的时候不要忘记将 &lt;code&gt;DEBUG&lt;/code&gt; 设置改成 &lt;code&gt;False&lt;/code&gt;。
调试能够借助一些第三方工具获取更多的信息，&lt;a href="https://github.com/robhudson/django-debug-toolbar"&gt;django-debug-toolbar&lt;/a&gt;，前段时间是 Django 的十周年，调查显示这个工具用的人非常多。
还能用 &lt;a href="http://jinja.pocoo.org/2/"&gt;Jinja2&lt;/a&gt; 这个模板系统替换自带的模板系统，作者是 Flask 的作者，也是 Flask 的一部分。
13 年的文章里面很多的链接都没用了，我也不知道这个到底是什么情况。&lt;/p&gt;</content><category term="django"></category></entry><entry><title>Python专家一样编程: 地道的 Python 重新排版整理</title><link href="https://breakwire.me/reformat-code-like-a-pythonista-idiomatic-python.html" rel="alternate"></link><published>2015-07-07T14:48:37+08:00</published><updated>2015-07-07T14:48:37+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-07-07:/reformat-code-like-a-pythonista-idiomatic-python.html</id><summary type="html">&lt;p&gt;Python专家一样编程: 地道的 Python 重新排版整理&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.ch-linghu.me/article/idiomatic/handout_cn.html"&gt;Python专家一样编程: 地道的 Python&lt;/a&gt; 重新排版整理，这个小册子虽然很老了，但里面的内容都很好，值得反复阅读。&lt;/p&gt;
&lt;h1&gt;像 Python专家⼀样编程: 地道的 Python&lt;/h1&gt;
&lt;p&gt;David Goodger
&lt;a href="goodger@ python.org"&gt;goodger@python.org&lt;/a&gt;
&lt;a href="http://python.net/~goodger"&gt;http://python.net/~goodger&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;翻译: 令狐⾍虫 &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#99;&amp;#104;&amp;#46;&amp;#108;&amp;#105;&amp;#110;&amp;#103;&amp;#104;&amp;#117;&amp;#64;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#99;&amp;#104;&amp;#46;&amp;#108;&amp;#105;&amp;#110;&amp;#103;&amp;#104;&amp;#117;&amp;#64;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文原文：&lt;a href="http:// python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"&gt;http:// python.net/~goodger/projects/pycon/2007/idiomatic/handout.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这个交互教程中,我们会探讨很多基本 Python 惯用法及其深层技术, 让你⽴即拥有⼀些有用的
⼯具。
本演⽰有 3 个版本: &lt;a href="http://www.ch-linghu.me/article/idiomatic/presentation_cn.html"&gt;S5 幻灯⽚&lt;/a&gt; &lt;a href="http://www.ch-linghu.me/article/idiomatic/handout_cn.html"&gt;HTML 页⾯&lt;/a&gt; &lt;a href="http://www.ch-linghu.me/article/idiomatic/presentation_cn.txt"&gt;reStructuredText 源代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;©2006-2008, licensed under a &lt;a href="http://creativecommons.org/licenses/by-sa/3.0/"&gt;Creative Commons Attribution/Share-Alike (BY-SA) license&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;本⼈简历【译注:指作者本人】: 我是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蒙特利尔⼈,&lt;/li&gt;
&lt;li&gt;两个优秀孩子的⽗亲,⼀个特别⼥人的丈夫,&lt;/li&gt;
&lt;li&gt;全职 Python 程序员,&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docutils.sourceforge.net/"&gt;Docutils&lt;/a&gt; 项⽬和 &lt;a href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; 的作者,&lt;/li&gt;
&lt;li&gt;Python 改善建议(即 PEPs)的编辑,&lt;/li&gt;
&lt;li&gt;PyCon 2007 组织者, PyCon 2008 主席,&lt;/li&gt;
&lt;li&gt;Python 软件基⾦会成员,&lt;/li&gt;
&lt;li&gt;基⾦会过去一年的董事及秘书。
在 PyCon 2006 我演⽰⼀个教程(名字叫⽂本及数据处理 (Text &amp;amp; Data Processing)) 时,对于我使用的⼀些技术和我所认为的 ⼀些常识所得到的反应,我感到十分惊讶。这些有经验的  Python 程序员不假思索在使⽤的工具,很多与会者根本就不知道。
你们中的很多⼈应该之前已经了解了这些技术和惯⽤用法中的⼀部分。希望你们可以学到⼀些以前不知道的技术,或者在已经知道的那部分里学到些新东西。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;Python之禅 (1)&lt;/li&gt;
&lt;li&gt;Python之禅 (2)&lt;/li&gt;
&lt;li&gt;代码风格：可读性至上&lt;/li&gt;
&lt;li&gt;PEP 8: Style Guide for Python Code&lt;/li&gt;
&lt;li&gt;空格 1&lt;/li&gt;
&lt;li&gt;空格 2&lt;/li&gt;
&lt;li&gt;命名&lt;/li&gt;
&lt;li&gt;长代码行 &amp;amp; 续行&lt;/li&gt;
&lt;li&gt;长字符串&lt;/li&gt;
&lt;li&gt;复合语句&lt;/li&gt;
&lt;li&gt;Docstrings 和注释&lt;/li&gt;
&lt;li&gt;实用性大于纯粹性&lt;/li&gt;
&lt;li&gt;值交换&lt;/li&gt;
&lt;li&gt;关于 tuple 的更多&lt;/li&gt;
&lt;li&gt;交互模式下的 "_"&lt;/li&gt;
&lt;li&gt;通过子字符串构建字符串&lt;/li&gt;
&lt;li&gt;构建字符串, 变化 1&lt;/li&gt;
&lt;li&gt;构建字符串, 变化 2&lt;/li&gt;
&lt;li&gt;可能的话就用 &lt;code&gt;in&lt;/code&gt; (1)&lt;/li&gt;
&lt;li&gt;可能的话就用 &lt;code&gt;in&lt;/code&gt; (2)&lt;/li&gt;
&lt;li&gt;字典的 &lt;code&gt;get&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;字典的 &lt;code&gt;setdefault&lt;/code&gt; 方法 (1)&lt;/li&gt;
&lt;li&gt;字典的 &lt;code&gt;setdefault&lt;/code&gt; 方法 (2)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defaultdict&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;构建和拆分字典&lt;/li&gt;
&lt;li&gt;真值测试&lt;/li&gt;
&lt;li&gt;真值&lt;/li&gt;
&lt;li&gt;索引和项 (1)&lt;/li&gt;
&lt;li&gt;索引和项 (2): enumerate&lt;/li&gt;
&lt;li&gt;其它语言拥有「变量」&lt;/li&gt;
&lt;li&gt;Python拥有「名称」&lt;/li&gt;
&lt;li&gt;参数默认值&lt;/li&gt;
&lt;li&gt;% 字符串格式化&lt;/li&gt;
&lt;li&gt;高级 % 字符串格式化&lt;/li&gt;
&lt;li&gt;高级 % 字符串格式化&lt;/li&gt;
&lt;li&gt;列表推导&lt;/li&gt;
&lt;li&gt;生成器表达式(1)&lt;/li&gt;
&lt;li&gt;生成器表达式 (2)&lt;/li&gt;
&lt;li&gt;排序&lt;/li&gt;
&lt;li&gt;使用 DSU 进行排序 *&lt;/li&gt;
&lt;li&gt;按键值排序&lt;/li&gt;
&lt;li&gt;生成器&lt;/li&gt;
&lt;li&gt;生成器举例&lt;/li&gt;
&lt;li&gt;从文本/数据文件中按行读取&lt;/li&gt;
&lt;li&gt;EAFP vs. LBYL&lt;/li&gt;
&lt;li&gt;EAFP风格的 try/except 举例&lt;/li&gt;
&lt;li&gt;导入&lt;/li&gt;
&lt;li&gt;模块和脚本&lt;/li&gt;
&lt;li&gt;模块结构&lt;/li&gt;
&lt;li&gt;命令行处理&lt;/li&gt;
&lt;li&gt;包&lt;/li&gt;
&lt;li&gt;简单好过复杂&lt;/li&gt;
&lt;li&gt;不要重新发明轮子&lt;/li&gt;
&lt;li&gt;参考文献&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;h2&gt;Python之禅 (1)&lt;/h2&gt;
&lt;p&gt;这是 Python的指导性原则，但其解释是开放性的。想要正确解释它们， 需要点儿幽默感。&lt;/p&gt;
&lt;p&gt;如果你正在用一门以小品喜剧剧团命名的编程语言，你最好有点儿幽默感。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Beautiful&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;ugly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Explicit&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;implicit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Simple&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Complex&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;complicated&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Flat&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Sparse&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;dense&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Readability&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Special&lt;/span&gt; &lt;span class="n"&gt;cases&lt;/span&gt; &lt;span class="n"&gt;aren&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t special enough to break the rules.&lt;/span&gt;
&lt;span class="n"&gt;Although&lt;/span&gt; &lt;span class="n"&gt;practicality&lt;/span&gt; &lt;span class="n"&gt;beats&lt;/span&gt; &lt;span class="n"&gt;purity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Errors&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="n"&gt;silently&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Unless&lt;/span&gt; &lt;span class="n"&gt;explicitly&lt;/span&gt; &lt;span class="n"&gt;silenced&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

   &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Python之禅 (2)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;face&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;ambiguity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;refuse&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;temptation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;There&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;preferably&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="n"&gt;obvious&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Although&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;obvious&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;re Dutch.&lt;/span&gt;
&lt;span class="n"&gt;Now&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Although&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;often&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;hard&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;explain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s a bad idea.&lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;easy&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;explain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="n"&gt;idea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Namespaces&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;honking&lt;/span&gt; &lt;span class="n"&gt;great&lt;/span&gt; &lt;span class="n"&gt;idea&lt;/span&gt;&lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s do more of those!&lt;/span&gt;
&lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="n"&gt;Tim&lt;/span&gt; &lt;span class="n"&gt;Peters&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这首特别的「诗」以某种玩笑开头，不过它确实揭示了很多  python 背后哲学的真相。 「 Python 之禅」已经正式进入了 PEP 20，它的摘要里说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;元老级  Python 先锋 Tim Peters 将  Python 设计的 BDFL 指导性原则缩减成 20 条格言， 只有其中19条被写了下来。
— &lt;a href="http://www. python.org/dev/peps/pep-0020/"&gt;http://www. python.org/dev/peps/pep-0020/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可以想想你是一个「 Python 先锋」还是一个「 Python 专家」。这两个术语有些不一样的内涵。&lt;/p&gt;
&lt;p&gt;每当心存疑虑时:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;this&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;试试在 python交互环境中输入:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;this&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是另一个彩蛋:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;braces&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;chance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;【译注：上面这段意思是想在特性中引入大括号，会出来一个语法异常：没机会了。 其内涵不用解释了吧】&lt;/p&gt;
&lt;p&gt;真是一帮子喜剧演员！ :-)&lt;/p&gt;
&lt;h2&gt;代码风格：可读性至上&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;程序是写来给人读的，只是偶尔让机器去执行。--Abelson &amp;amp; Sussman, 计算机程序的构造与解释&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽量让你的程序一目了然，易于阅读。&lt;/p&gt;
&lt;h2&gt;PEP 8: Style Guide for Python Code&lt;/h2&gt;
&lt;p&gt;Worthwhile reading:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www. python.org/dev/peps/pep-0008/"&gt;http://www. python.org/dev/peps/pep-0008/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PEP =  python Enhancement Proposal&lt;/p&gt;
&lt;p&gt;PEP是一种设计文档，用于向 python社区提供信息，或者是用来描述  Python 语言或其处理或其环境的新特性。&lt;/p&gt;
&lt;p&gt;python社区对于源代码看起来应该怎么样有自己的标准，规范在 PEP 8 中。 这个标准不同于其它社区，比如 C、C++、C#、Java、VisualBasic，等等。&lt;/p&gt;
&lt;p&gt;由于缩进和空格对于  Python 如此重要， Python 代码的风格指南已经基本上算是标准了。跟着指南走才是聪明的做法！大多数的开源项目和内部项目(希望如此) 非常接近的遵守风格指南。&lt;/p&gt;
&lt;h2&gt;空格 1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每个缩进层次使用 4 个空格.&lt;/li&gt;
&lt;li&gt;不要使用硬 tab【译注：即 &lt;code&gt;'\t'&lt;/code&gt; 字符】.&lt;/li&gt;
&lt;li&gt;绝对不要混用 tab 和空格.&lt;/li&gt;
&lt;li&gt;这正是 IDLE 和 Emacs 的  Python 模式所支持的。其它的编辑器也应该提供这样的支持。&lt;/li&gt;
&lt;li&gt;函数和函数之间空一行.&lt;/li&gt;
&lt;li&gt;类和类之间空两行.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;空格 2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 dict、list、tuple 和参数列表的「,」后面，dict 的「:」后面加一个空格， 但前面不要加&lt;/li&gt;
&lt;li&gt;在赋值符和关系运算符的前后加空格(参数列表里的不用)&lt;/li&gt;
&lt;li&gt;紧邻括号的内部，也就是参数列表的最前面，不加空格&lt;/li&gt;
&lt;li&gt;紧邻 docstrings 的内部不加空格&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_squares&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return a dictionary and a list...&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;命名&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;函数、方法、属性用小写+下划线形式(&lt;code&gt;joined_lower&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;常量用小写+下划线形式(&lt;code&gt;joined_lower&lt;/code&gt;)或大写+下划线形式(&lt;code&gt;ALL_CAPS&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;类用首字母大写形式(&lt;code&gt;StudlyCaps&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;驼峰命名法(&lt;code&gt;camelCase&lt;/code&gt;)仅仅用于符合事先存在的约定&lt;/li&gt;
&lt;li&gt;属性: 接口(公开属性) &lt;code&gt;interface&lt;/code&gt; , 内部属性 &lt;code&gt;_internal&lt;/code&gt; , 私有属性 &lt;code&gt;__private&lt;/code&gt;
但是尽量避免使用私用属性 &lt;code&gt;__private&lt;/code&gt; 的形式。我从来没用过它。 相信我。如果你用它，你以后一定会后悔的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解释：
来自 C++/Java 背景的人特别容易过度使用/错误使用这个「特性」。但私有命名 &lt;code&gt;__private&lt;/code&gt; 并不像 Java 或 C++ 里那样工作。它们只是触发了一个 命名混淆其目的是防止在子类中发生命名空间的冲突： &lt;code&gt;MyClass.__private&lt;/code&gt; 会变成 &lt;code&gt;MyClass._MyClass__private&lt;/code&gt; 。（注意，当基类和子类名字相同时，这种方法 会失效。比如，子类在另外一个模块的时候。）在类的外部存取一个私有属性是 完全可能的，只是不太方便和靠谱（它增加了对基类名字的精确依赖）。
问题在于，一个类的作者会合理的认为「这个属性/方法名字应该是私有的， 只能被这个类定义本身存取」然后使用了私有属性 &lt;code&gt;__private&lt;/code&gt; 的约定。 但是后来，使用该类派生子类的用户会很合理的需要存取这个名字。所以 要么去改父类(一般很难甚至不可能)，要么就在子类里用手工混淆的名字(难看并且 不靠谱)。
在  python 里有一个概念：「在这里我们都是成年人」。如果你使用了私有属性 形式，你在保护谁的属性？对于子类来说，更可取的方法是正确的使用 来自父类的属性，父类把它自身的属性文档写正确才是可取之道。
更好的方法是使用单下划线约定 &lt;code&gt;_internal&lt;/code&gt; 表示内部属性。 这完全不会触发命名混淆，它只是在告诉别人「小心这个，这是一个内部实现细节。 如果你没有完全理解它，不要碰它。当然，这纯粹只是一个约定而已。
关于这个问题，这里有一些很好的解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70528/why-are-pythons-private-methods-not-actually-private"&gt;http://stackoverflow.com/questions/70528/why-are-pythons-private-methods-not-actually-private&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/1641219/does-python-have-private-variables-in-classes"&gt;http://stackoverflow.com/questions/1641219/does-python-have-private-variables-in-classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;长代码行 &amp;amp; 续行&lt;/h2&gt;
&lt;p&gt;保持每行长度不超过80字符。&lt;/p&gt;
&lt;p&gt;在括号/方括号/大括号里使用隐式续行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;fourth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fifth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sixth&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt;
         &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fourth&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fifth&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sixth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在最后加上反斜杠表示显式续行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;VeryLong&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left_hand_side&lt;/span&gt; \
    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;even_longer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right_hand_side&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;反斜杠是脆弱的，它必须是一行的最后一个字符。如果你在反斜杠后面加上一个空格， 它就不再工作了。另外，它也是丑陋的。&lt;/p&gt;
&lt;h2&gt;长字符串&lt;/h2&gt;
&lt;p&gt;相邻的字符串文本会被语法分析器自动连接：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;o&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;n&amp;#39;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;e&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;one&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;文本之间的空格不是必需的，但加空格可以提高可读性。 任何形式的引号都可以使用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\/\/&amp;#39;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;o&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt;\&lt;span class="o"&gt;/&lt;/span&gt;\&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;字符串加一个「r」前缀表示「原生」字符串。反斜杠在原生字符串中不再解释为脱字符。 这在写正则表达式和Windows文件系统路径时很有帮助。&lt;/p&gt;
&lt;p&gt;注意，字符串变量不会被连接：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;three&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;four&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
       &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;syntax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那是因为这种自动连接是  Python 语法分析器/编译器的特性，而不是解释器的。 在运行时连接字符串，你必须使用「+」操作符。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Long strings can be made up &amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;of several shorter strings.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;括号允许隐式续行。&lt;/p&gt;
&lt;p&gt;多行字符串用三引号：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Triple&lt;/span&gt;
&lt;span class="sd"&gt;double&lt;/span&gt;
&lt;span class="sd"&gt;quotes&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;\&lt;/span&gt;
&lt;span class="sd"&gt;Triple&lt;/span&gt;
&lt;span class="sd"&gt;single&lt;/span&gt;
&lt;span class="sd"&gt;quotes\&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的最后一个例子(三单引号)，演示了如何使用反斜杠来避免换行。 它消除了额外的换行，并将文字和引号保持为漂亮的左对齐。 反斜杠必须是每行的最后一个符号。&lt;/p&gt;
&lt;h2&gt;复合语句&lt;/h2&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blah&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;do_one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;do_two&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;do_three&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blah&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;do_one&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;do_two&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;do_three&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;空格和缩进可以非常有效的视觉化展现程序流程。上面「Good」第二行的 缩进就告诉了读者发生了什么事，而缺乏缩进的「Bad」则让「if」语句 变得不那么明显。&lt;/p&gt;
&lt;p&gt;将多条语句写成一行是重罪。在  Python 里， 可读性至上。&lt;/p&gt;
&lt;h2&gt;Docstrings 和注释&lt;/h2&gt;
&lt;p&gt;Docstrings = 如何使用代码&lt;/p&gt;
&lt;p&gt;注释 = 为什么 (解释) 以及代码是如何工作的&lt;/p&gt;
&lt;p&gt;Docstrings 解释了如何去使用代码，它是给你代码的用户看的。 Docstrings 的使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解释函数的目的，即使对你来说这不言自明，因为它也许对以后的其它人 来说并没有那么明显。&lt;/li&gt;
&lt;li&gt;描述期望接受的参数、返回值和可能产生的任何异常。&lt;/li&gt;
&lt;li&gt;如果这个方法跟一个调用者有紧密的绑定，对这个调用者做一些说明。 （但是要小心这个调用者以后可能会发生变化）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注释解释了为什么，是给你代码的维护者看的。 这里有一些例子，包括写给你自己的说明，比如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# !!! BUG: ...&lt;/span&gt;

&lt;span class="c1"&gt;# !!! FIX: This is a hack&lt;/span&gt;

&lt;span class="c1"&gt;# ??? Why is this here?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的「用户」和「维护者」都包含了 你自己 ，所以，把 Docstrings 和注释写好点！&lt;/p&gt;
&lt;p&gt;Docstrings 对于交互式使用(help())和自动文档工具来说很有用。&lt;/p&gt;
&lt;p&gt;错误的注释和 docstrings 比没有还要更糟。所以，保持它们的更新！当你做了 变更，确保注释和docstrings 和代码保持一致，不要让它们产生矛盾。&lt;/p&gt;
&lt;p&gt;这里有一个专门的关于 Docstring 的 PEP，PEP 257，"Docstring 约定"&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://www. python.org/dev/peps/pep-0257/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;实用性大于纯粹性&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A foolish consistency is the hobgoblin of little minds.
【译注：这句话里的 consisitency 带双关性，原意和这里的意思不一样，不好译，就不译了】
—Ralph Waldo Emerson&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(hobgoblin: 导致迷信的恐惧的事情; 一个稻草人.)&lt;/p&gt;
&lt;p&gt;永远都存在例外. PEP 8中说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但是最重要的一点：知道何时不一致 —— 有时风格指南无法应用。在有 疑问时，使用你的最佳判断。查看其它的例子，然后决定哪个看起来最好。 另外，别迟疑，赶快问！&lt;/p&gt;
&lt;p&gt;两个打破常规的好理由：
1. 当使用规则会让代码变得更难读，甚至对以前读过使用该规则代码 的人来说也是如此时。
2. 为了跟周围同样破坏规则的代码保持一致(通常是因为历史原因)。 —— 不过，这也是一个清理垃圾的机会(在真正的 XP 风格中)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;... 无论如何实用性不能把纯粹性打成一团肉酱！&lt;/p&gt;
&lt;h2&gt;值交换&lt;/h2&gt;
&lt;p&gt;在其它语言里:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 Python里:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可能你以前已经见过。但是你知道它是如何工作的吗？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逗号是 tuple 构造语法&lt;/li&gt;
&lt;li&gt;右边建立了一个 tuple (tuple packing).&lt;/li&gt;
&lt;li&gt;左边是一个目标 tuple (tuple unpacking).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;右手边 &lt;strong&gt;解包(unpacked)&lt;/strong&gt; 到左手边 tuple 里对应的名字&lt;/p&gt;
&lt;p&gt;更多 unpacking 的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;David&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; pythonista&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;+1-514-555-1234&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;David&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39; pythonista&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;+1-514-555-1234&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于循环处理结构数据很有用：&lt;/p&gt;
&lt;p&gt;l (L) 是我们刚刚在上面建立的 (David 的信息)。所以 people 是一个包含两个项的 list，每个项都是一个包含3个项的 list。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;BDFL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unlisted&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;David&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;514&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;555&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;
&lt;span class="n"&gt;Guido&lt;/span&gt; &lt;span class="n"&gt;unlisted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;people&lt;/code&gt; 中的每一项都被 unpacked 到&lt;code&gt;(name, title, phone)&lt;/code&gt;这个 tuple。&lt;/p&gt;
&lt;p&gt;可以任意嵌套 (只要保证左右两边的结构匹配):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;david&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gtitle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gphone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gname&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gtitle&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;BDFL&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gphone&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;unlisted&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;david&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;David&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; pythonista&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;+1-514-555-1234&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;关于 tuple 的更多&lt;/h2&gt;
&lt;p&gt;我们注意到，逗号是 tuple 的构造项，而不是括号。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了清晰起见， Python 解释器会显示括号。我也同样推荐你使用括号：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不要忘记逗号！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在单元素 tuple中，尾部的逗号是必需的；在两个及以上元素的 tuple 中， 尾部的逗号是可选的。0 元素的 tuple，也就是空 tuple，用一对括号来作为简化语法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个常见的错误就是在不需要 tuple 的地方留了一个逗号 【译注：于是变成了一个 tuple】 这会很轻易的让你的代码发生错误。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以如果你在意想不到的地方看到了一个 tuple，检查逗号！&lt;/p&gt;
&lt;h2&gt;交互模式下的 "_"&lt;/h2&gt;
&lt;p&gt;这真的是一个非常有用的特性。奇怪的是很少有人知道。&lt;/p&gt;
&lt;p&gt;在交互式解释器里，当你对一个表达式求值或调用了一个函数，其结果会 存入一个临时名称， &lt;code&gt;_&lt;/code&gt; (一个下划线):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;_&lt;/code&gt; 保存最后一个打印出来的结果&lt;/p&gt;
&lt;p&gt;当结果是 &lt;code&gt;None&lt;/code&gt; 的时候，什么也没有打印，所以 &lt;code&gt;_&lt;/code&gt; 不会发生变化。 这很方便！&lt;/p&gt;
&lt;p&gt;这只在交互式解释器里有用，在 module 里没用。&lt;/p&gt;
&lt;p&gt;当你交互式的解决一个问题，然后你想保存上一步的结果时，这个功能尤其方便。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mf"&gt;1.0471975511965976&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;0.50000000000000011&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
&lt;span class="mf"&gt;0.50000000000000011&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;通过子字符串构建字符串&lt;/h2&gt;
&lt;p&gt;从一个字符串列表开始：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们想把全部这些字符串合并成一个大字符串。尤其是子字符串数量很大的时候...
别这样做:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这么做非常的低效。&lt;/p&gt;
&lt;p&gt;这是一个典型的恐怖内存占用和恐怖性能的范例。「合并结果」在 每一个中间步骤都会计算、存储然后被抛弃。&lt;/p&gt;
&lt;p&gt;相反的，你应该这么做:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;字符串方法 &lt;code&gt;join()&lt;/code&gt; 会一次性做完全部的复制动作。&lt;/p&gt;
&lt;p&gt;当你只是处理几十甚至几百个字符串时，它们的差别不会很大。 但是要养成使用高效字符串构建方法的习惯， 因为当你处理上千个字符串，或者是在循环中进行处理， 它们确实有差别。&lt;/p&gt;
&lt;h2&gt;构建字符串, 变化 1&lt;/h2&gt;
&lt;p&gt;这里有一些使用字符串方法 &lt;code&gt;join()&lt;/code&gt; 的技巧。
如果你想在每一个子字符串之间插入一个空格:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者是逗号加空格:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一种常见情况:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Choose&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; \
     &lt;span class="s1"&gt;&amp;#39;or&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了生成语法更漂亮的句子，我们想在除了最后一对数据之外的全部数据对之间插入一个逗号， 最后一对数据之间我们放一个单词「or」。【译注：当然这符合的是英文语法。 中文可能更常见的是顿号和「和」】「直到 -1元素的切片」 (&lt;code&gt;[:-1]&lt;/code&gt;) 给出了除最后数据之外的全部数据，它们之间用「逗号加空格」分隔合并。&lt;/p&gt;
&lt;p&gt;当然，这个代码在边际条件下无法运行，当 list 的长度为 0 或 1 时。&lt;/p&gt;
&lt;p&gt;输出结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Choose&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;yellow&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;构建字符串, 变化 2&lt;/h2&gt;
&lt;p&gt;如果你需要应用一个函数来产生子字符串:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这涉及生成表达式(generator expression) ，我们随后会讨论。
如果你要增量计算子字符串的话，先将它们累积到一个列表中:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# many times&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# items is now complete&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们先把需要处理的部分累积到一个列表中， 然后我们就可以应用字符串方法 join ，高效处理。&lt;/p&gt;
&lt;h2&gt;可能的话就用 &lt;code&gt;in&lt;/code&gt; (1)&lt;/h2&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;in 通常情况下都会比较快。&lt;/li&gt;
&lt;li&gt;该模式也可以用于随机存取容器（比如 lists、tuples 和 sets）中的项&lt;/li&gt;
&lt;li&gt;in 也是一个操作符 (我们马上就会看到).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这会限制为只能操作有 keys() 方法的对象。&lt;/p&gt;
&lt;h2&gt;可能的话就用 &lt;code&gt;in&lt;/code&gt; (2)&lt;/h2&gt;
&lt;p&gt;但当我们修改一个字典时， &lt;code&gt;.keys()&lt;/code&gt; 是必需的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;d.keys()&lt;/code&gt; 创建了一个包含字典键值的静态链表。 如果不这样做, 你会得到一个异常 "RuntimeError: dictionary changed size during iteration".
从一致性来考虑, 使用 &lt;code&gt;key in dict&lt;/code&gt;, 而不是 &lt;code&gt;dict.has_key()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# do this:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# not this:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这种用法里， &lt;code&gt;in&lt;/code&gt; 是一个操作符.&lt;/p&gt;
&lt;h2&gt;字典的 &lt;code&gt;get&lt;/code&gt; 方法&lt;/h2&gt;
&lt;p&gt;We often have to initialize dictionary entries before use: 通常我们需要在使用之前初始化一个字典。&lt;/p&gt;
&lt;p&gt;这是比较幼稚的做法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;navs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;portfolio&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;navs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;navs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;navs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;dict.get(key, default)&lt;/code&gt; 移除了对条件判断的需要:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;navs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;navs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;navs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直观多了。&lt;/p&gt;
&lt;h2&gt;字典的 &lt;code&gt;setdefault&lt;/code&gt; 方法 (1)&lt;/h2&gt;
&lt;p&gt;现在我们要用初始化一个可变的字典的值。每个字典值是一个 list。 这是比较幼稚的做法：&lt;/p&gt;
&lt;p&gt;Initializing mutable dictionary values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;equities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;portfolio&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;equities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;equities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;equities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;dict.setdefault(key, default)&lt;/code&gt; 可以以高得多的效率完成同样的工作:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;equities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;equities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;dict.setdefault()&lt;/code&gt; 等价于 &lt;code&gt;get, or set &amp;amp; get&lt;/code&gt;. 也就是 "如果有必要的话，&lt;code&gt;set&lt;/code&gt;，然后 &lt;code&gt;get&lt;/code&gt;. 它对于字典键值计算代价昂贵或很长难以输入的情况特别有价值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dict.setdefault()&lt;/code&gt; 的唯一问题是默认值总是会被计算，无论需要与否。 这会在默认值计算代价昂贵的时候带来一些麻烦。&lt;/p&gt;
&lt;p&gt;如果默认值确实计算代价昂贵，你可能希望使用 &lt;code&gt;defaultdict&lt;/code&gt; 类， 我们下面很快就会涉及。&lt;/p&gt;
&lt;h2&gt;字典的 &lt;code&gt;setdefault&lt;/code&gt; 方法 (2)&lt;/h2&gt;
&lt;p&gt;现在我们来看看字典方法 &lt;code&gt;setdefault&lt;/code&gt; 也可以用在独立语句中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setdefault&lt;/code&gt; 同样可以用于独立语句中:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;navs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;navs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;navs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;setdefault&lt;/code&gt; dictionary method returns the default value, but we ignore it here. We're taking advantage of &lt;code&gt;setdefault&lt;/code&gt;'s side effect, that it sets the dictionary value only if there is no value already. 字典方法 &lt;code&gt;setdefault&lt;/code&gt; 返回一个默认值，但是在这里我们忽略了它。 我们用到了 &lt;code&gt;setdefault&lt;/code&gt; 的边际效应带来的优点， 它仅仅在字典对应键值没有值的情况下才会去设置值。&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;defaultdict&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;python 2.5 新增.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;defaultdict&lt;/code&gt; 在  python 2.5中新增, 是 &lt;code&gt;collections&lt;/code&gt; 模块中的一员. &lt;code&gt;defaultdict&lt;/code&gt; 跟一个普通的字典完全一样, 除了两点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它在构造时带一个额外的第一参数: 一个默认工厂函数。并且&lt;/li&gt;
&lt;li&gt;当字典键值第一次被操作时，默认工厂函数被调用，产生的结果用于初始化该键值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有两种方法可以得到一个 &lt;code&gt;defaultdict&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;导入 &lt;code&gt;collections&lt;/code&gt; 模块并通过模块引用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或直接导入 &lt;code&gt;defaultdict&lt;/code&gt; 名称:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是前面用过的一个例子，每一个字典值都必须被初始化成一个空 list， 现在用 &lt;code&gt;defaultdict&lt;/code&gt; 改写它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="err"&gt;å&lt;/span&gt;
&lt;span class="n"&gt;equities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;equities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根本没有做什么探索工作。在这个例子里，默认工厂函数是 &lt;code&gt;list&lt;/code&gt; ， 返回一个空 list。&lt;/p&gt;
&lt;p&gt;这个例子演示了如何得到一个初始值为 0 的字典：使用 &lt;code&gt;int&lt;/code&gt; 作为默认工厂函数:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;navs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;navs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;portfolio&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;equity&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不过你还是得小心使用 &lt;code&gt;defaultdict&lt;/code&gt; 。从一个正确初始化的 defaultdict 实例里你永远得不到 KeyError 异常。如果你需要检查特定键值存在与否， 必须使用「key in dict」条件判断。&lt;/p&gt;
&lt;h2&gt;构建和拆分字典&lt;/h2&gt;
&lt;p&gt;下面是一个很有用的技巧，如何通过两个 list (或其它序列)构建一个字典: 一个 list 是键，一个 list 是值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Eric&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Terry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Michael&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cleese&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Idle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Gilliam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Palin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="n"&gt;pythons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;family&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;pythons&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cleese&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Michael&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Palin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Eric&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Idle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;Terry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Gilliam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;反过来，当然，也很直观:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;pythons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Michael&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Eric&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Terry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;pythons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cleese&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Palin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Idle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Gilliam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意结果中 .keys() 和 .values() 的顺序和构建字典时的项顺序不同。 进去的顺序跟出来的顺序不一样。这是因为字典本质上是非顺序的。然而， 这个顺序可以保证一致性（换句话说，键的顺序和值的顺序是一一对应的）， 只要两次调用之间字典没有发生改变.&lt;/p&gt;
&lt;h2&gt;真值测试&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 这样做:         # 不要这样做:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;             &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种方法优雅且高效的利用了  python 对象内置的真值。&lt;/p&gt;
&lt;p&gt;测试一个列表:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 这样做:         # 不要这样做:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;             &lt;span class="k"&gt;pass&lt;/span&gt;

                 &lt;span class="c1"&gt;# 千万不要这样做:&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
                     &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;真值&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;True&lt;/code&gt; 和 &lt;code&gt;False&lt;/code&gt; 是两个 &lt;code&gt;bool&lt;/code&gt; 类型的内置实例，布尔值。 跟 &lt;code&gt;None&lt;/code&gt; 一样，它们各只会有一个实例存在。&lt;/p&gt;
&lt;p&gt;| False  |   True |
| ------| ------ | ------ |
| &lt;code&gt;False&lt;/code&gt; (== 0) | &lt;code&gt;True&lt;/code&gt; (== 1) |
| &lt;code&gt;""&lt;/code&gt; (空字符串)   除了 &lt;code&gt;""&lt;/code&gt; 之外的所有字符串(&lt;code&gt;" "&lt;/code&gt;, &lt;code&gt;"anything"&lt;/code&gt;) |
| &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;0.0&lt;/code&gt; | 除了 0 之外的所有数(1, 0.1, -1, 3.14) |
| &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;()&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;set()&lt;/code&gt; | 任何非空容器 (&lt;code&gt;[0]&lt;/code&gt;, &lt;code&gt;(None,)&lt;/code&gt;, &lt;code&gt;['']) |
|&lt;/code&gt;None`    | 几乎所有未被显式置为False 的对象。 |&lt;/p&gt;
&lt;p&gt;对象真值示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;  &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Examples: execute &lt;a href="http://www.ch-linghu.me/article/idiomatic/truth.py"&gt;truth.py&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;想要控制一个用户定义类实例的真值，使用特殊方法 &lt;code&gt;__nonzero__&lt;/code&gt; 或 &lt;code&gt;__len__&lt;/code&gt; 。如果你的类是一个有长度的容器:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return my length.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你的类不是一个容器，使用 &lt;code&gt;__nonzero__&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__nonzero__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return my truth value (True or False).&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# This could be arbitrarily complex:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在  Python 3.0 中，为了与 bool 内置类型保持一致性， &lt;code&gt;__nonzero__&lt;/code&gt; 被改名成了 &lt;code&gt;__bool__&lt;/code&gt; 。为了保持兼容性，在类中增加如下定义:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;__bool__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="fm"&gt;__nonzero__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;索引和项 (1)&lt;/h2&gt;
&lt;p&gt;当你需要一个单词列表的时候，有种可爱的方法可以节省你的打字时间:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zero one two three&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zero&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;three&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;假设我们需要遍历这些项，并且我们同时需要项和项的索引值:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="err"&gt;或&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;              &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;                   &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;索引和项 (2): &lt;code&gt;enumerate&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;函数 &lt;code&gt;enumerate&lt;/code&gt; 接受一个 list，并返回 (索引值, 项) 对:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zero&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;three&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出结果时，我们得用一个 &lt;code&gt;list&lt;/code&gt; 进行一下包装，因为 &lt;code&gt;enumerate&lt;/code&gt; 是一个惰性函数: 它仅仅在需要时才一次产生一项，一个索引项对。 for 循环就是一个一次需要一个结果的所在。 &lt;code&gt;enumerate&lt;/code&gt; 是生成器(generator) 的一个例子，我们将会在以后详细的讲解生成器。 &lt;code&gt;print&lt;/code&gt; 不是一次拿一个结果 —— 我们需要整个结果，所以我们在打印时， 必须显式的将一个生成器转换为一个 list。&lt;/p&gt;
&lt;p&gt;我们的循环变得简单多了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

&lt;span class="c1"&gt;# 对比:                     # 对比:&lt;/span&gt;
&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;                  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
    &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;enumerate&lt;/code&gt; 版本比左边的版本短得多也简单得多，而且也更加易读易理解。&lt;/p&gt;
&lt;p&gt;下面这个例子展现 &lt;code&gt;enumerate&lt;/code&gt; 函数实际上是如何返回一个迭代器(iterator)的 (生成器就是一种迭代器):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;enumerate&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x011EA1C0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zero&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;three&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="ne"&gt;StopIteration&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;其它语言拥有「变量」&lt;/h2&gt;
&lt;p&gt;在很多其它语言中，对一个变量赋值，就是将一个值放入一个盒子中。
&lt;code&gt;int a = 1;&lt;/code&gt;
&lt;img alt="a1box.png" src="http://www.ch-linghu.me/article/idiomatic/a1box.png"&gt;&lt;/p&gt;
&lt;p&gt;盒子「a」现在存放了一个整数1。&lt;/p&gt;
&lt;p&gt;将其它值赋值给同一个变量就是替换盒子中的内容:
&lt;code&gt;a = 2;&lt;/code&gt;
&lt;img alt="a2box.png" src="http://www.ch-linghu.me/article/idiomatic/a2box.png"&gt;&lt;/p&gt;
&lt;p&gt;现在盒子「a」存放了整数2。&lt;/p&gt;
&lt;p&gt;将一个变量赋值给其它变量，就是复制一个值，并将它放入新的盒子:
&lt;code&gt;int b = a;&lt;/code&gt;
&lt;img alt="b2box.png" src="http://www.ch-linghu.me/article/idiomatic/b2box.png"&gt;    &lt;img alt="a2box.png" src="http://www.ch-linghu.me/article/idiomatic/a2box.png"&gt;&lt;/p&gt;
&lt;p&gt;「b」是第二个盒子，存放着一个经过复制的2。盒子「a」里有一份独立的备份。&lt;/p&gt;
&lt;h2&gt;Python拥有「名称」&lt;/h2&gt;
&lt;p&gt;在 python中，「名字」或「标识符」就像一个打在对象上的邮件标签(也就是一个命名标签)。
&lt;code&gt;a = 1&lt;/code&gt;
&lt;img alt="a1tag.png" src="http://www.ch-linghu.me/article/idiomatic/a1tag.png"&gt;&lt;/p&gt;
&lt;p&gt;在这里，整数1对象有一个标签，上面写着「a」。&lt;/p&gt;
&lt;p&gt;如果我们对「a」重新赋值，我们只是将这个标签移动到了其它对象:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a = 2&lt;/code&gt;
&lt;img alt="a2tag.png" src="http://www.ch-linghu.me/article/idiomatic/a2tag.png"&gt;    &lt;img alt="1.png" src="http://www.ch-linghu.me/article/idiomatic/1.png"&gt;&lt;/p&gt;
&lt;p&gt;现在名字「a」跟整数2对象联系在了一起。&lt;/p&gt;
&lt;p&gt;原先的整数1对象不再有标签「a」了。对象本身可能还存在， 但是我们不能通过名字「a」得到它了。（当一个对象身上没有任何标签或者引用， 它会被从内存中删除。）&lt;/p&gt;
&lt;p&gt;如果我们将一个名字赋值给另一个，我们只是为一个已经存在的对象挂上另一个名字的标签:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;b = a&lt;/code&gt;
&lt;img alt="ab2tag.png" src="http://www.ch-linghu.me/article/idiomatic/ab2tag.png"&gt;&lt;/p&gt;
&lt;p&gt;名字「b」只是挂到原先「a」所指对象的第二个标签。&lt;/p&gt;
&lt;p&gt;虽然我们即使在  python中通常也使用「变量」(因为这是一个常用术语)， 我们实际上指的是「名字」或「标识符」。在  python 里， 「变量」是值的命名标签，而不是一个写了名字的盒子。&lt;/p&gt;
&lt;p&gt;如果你没有从本教程中得到别的什么收获， 我希望你至少能理解  python「名字」是如何工作的。 这种理解一定会成为额外的红利，帮助你避免以下情形:
➔&lt;/p&gt;
&lt;h2&gt;参数默认值&lt;/h2&gt;
&lt;p&gt;这是一个初学者常见的错误。甚至一些有经验的程序员， 如果他们没有理解  python「名字」，也会犯同样的错误。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bad_append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="n"&gt;a_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a_list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;问题在于 a_list 的默认值，一个空列表，是在函数定义时被求值的。 所以每次调用这个函数，我们得到的是同一个默认值。试试重复做几次:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print bad_append(&amp;#39;one&amp;#39;)
[&amp;#39;one&amp;#39;]
&amp;gt;&amp;gt;&amp;gt; print bad_append(&amp;#39;two&amp;#39;)
[&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;列表是一个可变对象；我们可以改变它们的内容。 得到一个默认列表的正确方法是在运行时创建，在函数内部:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;good_append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a_list&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;a_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;a_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a_list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;% 字符串格式化&lt;/h2&gt;
&lt;p&gt;python的 &lt;code&gt;%&lt;/code&gt; 操作符很像 C 语言的 &lt;code&gt;sprintf&lt;/code&gt; 函数那样运作。
就算你对 C 语言不了解，关系也不大。基本上，你给出了一个模板， 或者说是格式，以及用于插入的数据。&lt;/p&gt;
&lt;p&gt;在这个例子里，模板包含了两个转换规则：「%s」表示「在这里插入一个字符串」， 「%i」表示「将一个整型数转换成一个字符串并插入到这里」。 「%s」特别有用，因为它使用了  Python 的内置 str() 函数将任何对象转换成字符串。&lt;/p&gt;
&lt;p&gt;用于插入的数据必须跟模板匹配；这里我们用了两个数据，一个 tuple。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;David&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, you have &lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s1"&gt; messages&amp;#39;&lt;/span&gt;
        &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;David&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;详细的讨论在  python 库参考 ，第 2.3.6.2 节， 「字符串格式化操作」 。 一定要记得去看！
如果你还没做，去  Python.org ，下载 HTML 格式的文档(zip 包或者 tar 包)， 装到自己的电脑上。没什么事比最终文档就在你手边更好的。&lt;/p&gt;
&lt;h2&gt;高级 % 字符串格式化&lt;/h2&gt;
&lt;p&gt;大多数人都不知道有另外一种更灵活的字符串格式化方式:
利用字典键值:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s1"&gt;, you have &lt;/span&gt;&lt;span class="si"&gt;%(messages)i&lt;/span&gt;&lt;span class="s1"&gt; &amp;#39;&lt;/span&gt;
       &lt;span class="s1"&gt;&amp;#39;messages&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里我们指定了插入数据的名字，这些名字可以在随后提供的字典中找到。&lt;/p&gt;
&lt;p&gt;注意到什么冗余之处没有？ 名字 「name」 和 「messages」已经在本地命名空间中定义了。 我们可以利用这一点。&lt;/p&gt;
&lt;p&gt;使用本地命名空间中的名字:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s1"&gt;, you have &lt;/span&gt;&lt;span class="si"&gt;%(messages)i&lt;/span&gt;&lt;span class="s1"&gt; &amp;#39;&lt;/span&gt;
       &lt;span class="s1"&gt;&amp;#39;messages&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;locals()&lt;/code&gt; 函数返回一个本地可用的名字的字典。&lt;/p&gt;
&lt;p&gt;这非常强大。利用它，我们可以完成你想要的任何字符串格式化， 不用考虑模板的插入数据问题。&lt;/p&gt;
&lt;p&gt;不过能力也会带来危险。（「能力越大，责任越大」） 如果对一个外部提供的模板字符串使用 &lt;code&gt;locals()&lt;/code&gt; 形式， 你实际上将你的整个本地命名空间都暴露给了调用者。你必须对此保持警惕。&lt;/p&gt;
&lt;p&gt;检查你的本地命名空间:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;pprint&lt;/code&gt; 是一个非常有用的模块。如果你还不知道，尝试去把玩把玩。 它会让你调试数据结构更加轻松！&lt;/p&gt;
&lt;h2&gt;高级 % 字符串格式化&lt;/h2&gt;
&lt;p&gt;一个对象实例属性的名字空间实际上就是一个字典， &lt;code&gt;self.__dict__&lt;/code&gt; 。
使用实例名字空间中的名字:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;We found &lt;/span&gt;&lt;span class="si"&gt;%(error_count)d&lt;/span&gt;&lt;span class="s2"&gt; errors&amp;quot;&lt;/span&gt;
       &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;等价于，但比下面的形式更灵活:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;We found &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; errors&amp;quot;&lt;/span&gt;
       &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意：类属性在类的 &lt;code&gt;__dict__&lt;/code&gt; 里。名字空间查找实际上是链式字典查找。&lt;/p&gt;
&lt;h2&gt;列表推导&lt;/h2&gt;
&lt;p&gt;列表推导 (List Comprehensions) (简写为「listcomps」) 是以下这种常见模式的语法简写:
传统方法，使用 for 和 if 语句:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;new_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用列表推导:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a_list&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从某种程度上来说，列表推导清晰、简洁。你可以在列表推导中使用多个 &lt;code&gt;for&lt;/code&gt; 循环和 &lt;code&gt;if&lt;/code&gt; 条件，但是如果总数超过两个或三个， 或者条件非常复杂，我还是建议使用传统的 &lt;code&gt;for&lt;/code&gt; 循环。套用  python之禅 的说法，选择更易读的那个。
举个例子来说，0-9 的平方列表:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;0-9 中奇数的平方列表:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;生成器表达式(1)&lt;/h2&gt;
&lt;p&gt;假设我们要求 1-100 的平方的和:
循环解法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过构造适当的序列，我们可以使用 &lt;code&gt;sum&lt;/code&gt; 函数更快的达到目的。&lt;/p&gt;
&lt;p&gt;列表推导解法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成器表达式解法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成器表达式 (Generator expressions) (「genexps」) 跟列表推导很像， 不过列表推导是贪婪的，而生成器表达式是惰性的。列表推导一次性计算出 整个列表的全部结果，并以列表形式返回。生成器表达式只会在需要时一次计算一个数据， 以一个单独的值形式返回。这对于那种对很长的序列求解， 但计算结果只是中间步骤而并非最终结果的情况特别有用。&lt;/p&gt;
&lt;p&gt;在上面的例子中，我们只关心求和的结果，我们不需要列表中每个元素平方的中间结果。 基于同样的理由，我们使用了 &lt;code&gt;xrange&lt;/code&gt; ：它惰性产生结果，每次一个。&lt;/p&gt;
&lt;h2&gt;生成器表达式 (2)&lt;/h2&gt;
&lt;p&gt;举个例子来说，如果我们要计算数十亿整数的平方和，如果使用列表推导， 会内存溢出，但生成器表达式没有问题。不过要花些时间。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000000000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;语法方面的差别在于列表推导有方括号，生成器表达式没有。 有些时候生成器表达式需要用括号括住，所以你最好每次都这样做。
规则摘要:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当计算结果列表是最终结果时，使用列表推导。&lt;/li&gt;
&lt;li&gt;当计算结果列表仅作为中间步骤时，使用生成器表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是我在最近工作中见到的一个例子。&lt;/p&gt;
&lt;p&gt;我们需要为未来的合同产生一份月份数(同时以字符串形式和整型存在)到月份代码映射的字典。 这可以用一个逻辑行完成。&lt;/p&gt;
&lt;p&gt;完成方法如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内置的 &lt;code&gt;dict()&lt;/code&gt; 函数产生一个键/值对列表 (2个 tuple).&lt;/li&gt;
&lt;li&gt;我们有一份月份代码列表(每个月份代码是一个单字母，字符串就是字母的列表)。 我们遍历这个列表获得月份代码及其索引值。&lt;/li&gt;
&lt;li&gt;月份数从  1开始，但  Python 索引值从 0 开始，所以月份数等于索引值 +1。&lt;/li&gt;
&lt;li&gt;我们希望同时以字符串和整型检查月份。所以我们使用 int() 和 str() 函数来做，并在此基础上进行查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近的例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;month_codes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FGHJKMNQUVXZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;month_codes&lt;/code&gt; 的结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;J&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;J&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;排序&lt;/h2&gt;
&lt;p&gt;在  Python 里对一个 list 进行排序非常简单:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(注意，list的排序是就地进行的：原先的 list 直接变成排序好的，而且 &lt;code&gt;sort&lt;/code&gt; 方法不会返回这个list或其拷贝。)
但是当你不想以正常顺序 (比如，按第一列排序，然后按第二列，等等) 排序列表数据是应该怎么做呢？比如你想按先第二列排序，然后按第四列。&lt;/p&gt;
&lt;p&gt;我们可以为内置的 &lt;code&gt;sort&lt;/code&gt; 方法传入一个自定义函数:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;custom_cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

    &lt;span class="n"&gt;a_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;custom_cmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这行得通，不过在处理大型列表时会非常非常慢。&lt;/p&gt;
&lt;h2&gt;使用 DSU 进行排序 *&lt;/h2&gt;
&lt;p&gt;DSU = Decorate-Sort-Undecorate (修饰-排序-反修饰)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意: DSU现在一般用不到了。新的方法见下一节， &lt;a href="http://www.ch-linghu.me/article/idiomatic/handout_cn.html#id29"&gt;按键值排序&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们创建一个会自然排序的辅助列表，而不是创建一个自定义比较函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 修饰&lt;/span&gt;
&lt;span class="n"&gt;to_sort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a_list&lt;/span&gt;

&lt;span class="c1"&gt;# 排序&lt;/span&gt;
&lt;span class="n"&gt;to_sort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# 反修饰:&lt;/span&gt;
&lt;span class="n"&gt;a_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;to_sort&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一行我们创建一个包含 tuples 的列表，按优先级顺序复制排序列，后面跟着完整的数据记录
第二行做通常的  Python 排序，非常快速和高效。
第三行我们去获取排好序的列表的最后一个数据。记住，最后一个数据就是完整的数据记录。 我们扔掉排序列，它们已经完成了它们的工作，现在没用了。
这是一个空间、复杂度和时间的权衡。更简单、更快，但是我们需要复制一份原始列表。&lt;/p&gt;
&lt;h2&gt;按键值排序&lt;/h2&gt;
&lt;p&gt;Python 2.4 为 &lt;code&gt;sort&lt;/code&gt; 列表方法引入了一个可选参数，「key」， 用于指定一个单参数函数来返回列表中每个元素用于比较的键值。举例来说:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;to_sort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;函数 &lt;code&gt;my_key&lt;/code&gt; 会在操作 &lt;code&gt;to_sort&lt;/code&gt; 列表每一个项时都调用一次。&lt;/p&gt;
&lt;p&gt;You can make your own key function, or use any existing one-argument function if applicable: 你可以实现自己的key函数，或者在可能的情况下使用已经存在的单参数函数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;str.lower&lt;/code&gt; 可以用于按忽略大小写的字母顺序排序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len&lt;/code&gt; 可以用于按项的长度排序 (字符串或容器)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; 或 &lt;code&gt;float&lt;/code&gt; 可以用于对那些「数字型字符串」，比如 "2", "123", "35" 之类， 按实际数字大小排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;生成器&lt;/h2&gt;
&lt;p&gt;我们已经见过生成器表达式了。我们还可以定制我们自己的任意复杂的生成器， 就像定义函数一样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_range_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
            &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;my_range_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; 关键字把一个函数转变成一个生成器 (generator)。当我们调用一个生成器函数，  Python 并不是立即去运行代码，而是返回一个生成器对象，本质上它是一个迭代器； 它有一个 &lt;code&gt;next&lt;/code&gt; 方法。 &lt;code&gt;for&lt;/code&gt; 循环每次都会去调用迭代器的 &lt;code&gt;next&lt;/code&gt; 方法， 直到 &lt;code&gt;StopIteration&lt;/code&gt; 异常抛出。 你也可以显式抛出 &lt;code&gt;StopIteration&lt;/code&gt; , 或者如上所示，在生成器代码运行结束时隐式抛出。&lt;/p&gt;
&lt;p&gt;生成器可以简化序列/迭代器的处理，因为我们不需要去构建一个具体的列表； 只需要一次计算一个值。 生成器函数需要维护状态。&lt;/p&gt;
&lt;p&gt;【译注：说到「需要维护状态」，我们必须首先搞清楚函数的「状态」。一般的函数，只要不使用全局变量，我们都认为它是「无状态的」，也就是说，任何时候，我们调用函数，传入相同的输入参数， 必能得到相同的输出结果。但生成器函数不是这样，它是「带状态的」，我们使用相同输入参数去调用， 每次会得到不同的结果。其结果取决于上一次调用的「状态」。因此它是带状态的，我们需要仔细维护这种状态，否则我们会得不到想要的结果】&lt;/p&gt;
&lt;p&gt;这就是 &lt;code&gt;for&lt;/code&gt; 循环的实际工作原理。Python 在 in 关键字后面寻找一个序列。如果它是一个简单的容器 （比如list、tuple、dictionaryset，或者用户定义的容器）， Python 会把容器转换成一个迭代器。 如果它已经是一个迭代器， Python 就直接使用它。&lt;/p&gt;
&lt;p&gt;Python 重复调用迭代器的 &lt;code&gt;next&lt;/code&gt; 方法，将返回值复制给循环计数器(本例中就是 &lt;code&gt;i&lt;/code&gt; )， 然后执行循环体内的代码。这个动作周而复始，直到抛出 &lt;code&gt;StopIteration&lt;/code&gt; 异常， 或者在代码中执行到 &lt;code&gt;break&lt;/code&gt; 语句。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for&lt;/code&gt; 循环可以有一个 &lt;code&gt;else&lt;/code&gt; 子句，它会在迭代器运行完成后执行， 但不会在 &lt;code&gt;break&lt;/code&gt; 语句之后执行。这种区别可以用来完成一些优雅的使用。 &lt;code&gt;else&lt;/code&gt; 子句在 &lt;code&gt;for&lt;/code&gt; 循环中并不常用，但它们可以派上用场。 有时 &lt;code&gt;else&lt;/code&gt; 子句可以完美的表达你需要的逻辑。&lt;/p&gt;
&lt;p&gt;举个例子，如果我们需要对一个序列中的项做条件检查，只要任意项的条件符合就通过:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Condition not satisfied.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;生成器举例&lt;/h2&gt;
&lt;p&gt;从一个 CSV reader (或一个 list 的项)中过滤空行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row_iterator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row_iterator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;

&lt;span class="n"&gt;data_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;irows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;从文本/数据文件中按行读取&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;datafile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;datafile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;datafile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样做是可以的，因为文件对象支持 &lt;code&gt;next&lt;/code&gt; 方法，就像其它迭代器所做的那样: lists、tuples、字典(的键值)、生成器。&lt;/p&gt;
&lt;p&gt;这里有一个警告: 因为缓存实现方法的区别，你不能混合使用 &lt;code&gt;.next&lt;/code&gt; 和 &lt;code&gt;.read*&lt;/code&gt; 方法， 除非你用的是  Python 2.5+。&lt;/p&gt;
&lt;h2&gt;EAFP vs. LBYL&lt;/h2&gt;
&lt;p&gt;It's easier to ask forgiveness than permission
EAFP: 获得宽恕比获得许可要容易&lt;/p&gt;
&lt;p&gt;Look before you leap
LBYL: 三思而后行&lt;/p&gt;
&lt;p&gt;一般来说 EAFP 更好，但不是任何时候。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鸭子类型
如果一个东西走起来像鸭子，叫起来像鸭子，看起来像鸭子：它就是鸭子。 (鹅？反正看起来差不多。)&lt;/li&gt;
&lt;li&gt;异常
如果一个对象必须是一个特定类型，使用强制转换。 如果 x 必须是一个字符串才能让代码工作，为什么不直接调用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而不是去做尝试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;EAFP风格的 try/except 举例&lt;/h2&gt;
&lt;p&gt;你可以把容易发生异常的代码包裹进一个 &lt;code&gt;try/except&lt;/code&gt; 代码块来捕获错误， 你可以最终会给出一个非常通用的解决方案，而不是试图预测每一种可能性。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意：一定要指定捕获的异常。永远不要使用裸 &lt;code&gt;except&lt;/code&gt; 子句【译注：不带任何异常声明的 except， 如： except: pass 这样】。裸 &lt;code&gt;except&lt;/code&gt; 子句会捕获你不希望捕获的异常， 让你的代码非常难以调试。&lt;/p&gt;
&lt;h2&gt;导入&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;module&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你可能见过这种「通配符」形式的导入语句。你甚至可能喜欢这样做。 不要这样用。&lt;/p&gt;
&lt;p&gt;【译注：以下一段是某个 Python 幽默段子的片段，背景是《星球大战》。
为了快速翻译及我认为不会太影响理解，我就不费心去查找和介绍背景资料了。 感兴趣的同学请自行去查看原文和相关背景。】&lt;/p&gt;
&lt;p&gt;To adapt &lt;a href="http://www. python.org/doc/humor/# python-vs-perl-according-to-yoda"&gt;a well-known exchange&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(Exterior Dagobah, jungle, swamp, and mist.)
卢克: from module import * 比显式 imports 要好吗？
犹达: 不，不是更好。更快、更容易，更妖媚。
卢克: 但是我如何知道显式的 imports 比通配符形式的更好？
犹达：从现在开始的六个月后你试图读自己的代码时就会知道。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通配符导入来自  Python 的黑暗面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;永远不要！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;from module import *&lt;/code&gt; 通配符形式会导致命名空间污染。 你会在你的本地命名空间里得到你根本得到的东西。 你也许会发现导入的名字模糊了本地模块定义的名字。你可能无法辨认一个 具体的名字到底来自哪里。也许这样做方便快捷，但它不该存在于生产代码之中。&lt;/p&gt;
&lt;p&gt;正义的呼声： &lt;strong&gt;不要使用通配符导入！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;更好的做法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过模块引用名字(完整规格的标识符)&lt;/li&gt;
&lt;li&gt;使用一个较短的名称导入一个较长名字的模块 (别名; 推荐)，&lt;/li&gt;
&lt;li&gt;或者显式的仅仅导入你要用的名字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命名空间污染警告！
相反地,
通过模块引用名字(完整规格的标识符):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;module&lt;/span&gt;
&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者通过较短的名称导入较长名字的模块 (别名):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;long_module_name&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;mod&lt;/span&gt;
&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者显式的仅仅导入你需要的名字:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;module&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意交互环境下，当你需要编辑和「重载 (reload())」一个模块时，这种形式 不适合用于自身。&lt;/p&gt;
&lt;h2&gt;模块和脚本&lt;/h2&gt;
&lt;p&gt;想制作一个既是可导入的模块又是可执行的脚本:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# script code here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当模块被导入时，它的 &lt;code&gt;__name__&lt;/code&gt; 属性被设置成模块的文件名，不含「.py」。 因此上面那段用 if 语句守护着的代码不会在导入时被执行。 当以脚本形式执行的时候， &lt;code&gt;__name__&lt;/code&gt;属性会被设置称 &lt;code&gt;"__main__"&lt;/code&gt;, 这段脚本代码 会 运行。&lt;/p&gt;
&lt;p&gt;除了一些特殊情况，你不应该在最顶层放置任何重要可执行代码。 将代码放入函数、类、方法，或者用 &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; 守护起来。&lt;/p&gt;
&lt;h2&gt;模块结构&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;module docstring(模块 docstring)&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# imports(导入)&lt;/span&gt;
&lt;span class="c1"&gt;# constants(常量)&lt;/span&gt;
&lt;span class="c1"&gt;# exception classes(异常类)&lt;/span&gt;
&lt;span class="c1"&gt;# interface functions(接口函数)&lt;/span&gt;
&lt;span class="c1"&gt;# classes(类)&lt;/span&gt;
&lt;span class="c1"&gt;# internal functions &amp;amp; classes(内部函数和类)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;模块应该拥有如上一样的代码结构.&lt;/p&gt;
&lt;h2&gt;命令行处理&lt;/h2&gt;
&lt;p&gt;Example: &lt;a href="http://www.ch-linghu.me/article/idiomatic/cmdline.py"&gt;cmdline.py&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env  python&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Module docstring.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;optpars&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_command_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Return a 2-tuple: (settings object, args list).&lt;/span&gt;
&lt;span class="sd"&gt;    `argv` is a list of arguments, or `None` for ``sys.argv[1:]``.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

    &lt;span class="c1"&gt;# initialize the parser object:&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OptionParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;optparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TitledHelpFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;add_help_option&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# define options here:&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;      &lt;span class="c1"&gt;# customized description; put --help last&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;-h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--help&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;help&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Show this help message and exit.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# check number of arguments, verify values, etc.:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;program takes no command-line arguments; &amp;#39;&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot; ignored.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;

    &lt;span class="c1"&gt;# further process settings &amp;amp; args if necessary&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process_command_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# application code here, like:&lt;/span&gt;
    &lt;span class="c1"&gt;# run(settings, args)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;        &lt;span class="c1"&gt;# success&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;包&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;module1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;subpackage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
        &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
        &lt;span class="n"&gt;module2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;用来组织你的项目.&lt;/li&gt;
&lt;li&gt;减少加载路径的数量.&lt;/li&gt;
&lt;li&gt;减少导入名字冲突.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;package.module1&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;package.subpackage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;module2&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;package.subpackage.module2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 Python 2.5中我们可以通过一个future import来实现绝对导入和相对导入:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;absolute_import&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我自己还没有深入研究过这个特性，所以我们不会深入讨论它。&lt;/p&gt;
&lt;h2&gt;简单好过复杂&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;调试的难度是你第一次写代码的难度的两倍。因此，如果你写了尽你可能聪明的代码， 你，从定义上说，没聪明到可以调试它。—Brian W. Kernighan, co-author of The C Programming Language and the "K" in "AWK"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;换句话说，保持你的程序简单！&lt;/p&gt;
&lt;h2&gt;不要重新发明轮子&lt;/h2&gt;
&lt;p&gt;在着手写任何代码之前，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查  Python 标准库。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查  Python 包索引(pypi) (乳酪店): 【译注，现在的 pypi 已经升级了，不再是乳酪店了，直接访问 http://pypi. python.org/ 即可 】&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://cheeseshop. python.org/pypi"&gt;http://cheeseshop. python.org/pypi&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搜索网络. Google 是你的朋友.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.effbot.org/zone/ python-objects.htm"&gt;"python Objects", Fredrik Lundh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http:// python.net/crew/mwh/hacks/objectthink.html"&gt;"How to think like a  pythonista", Mark Hammond&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=4829"&gt;"python main() functions", Guido van Rossum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jaynes.colorado.edu/ pythonIdioms.html"&gt;"python Idioms and Efficiency"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.caltech.edu/courses/cs11/material/ python/misc/ python_idioms.html"&gt;"python track:  python idioms"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shalabh.infogami.com/Be_ pythonic2"&gt;"Be  pythonic", Shalabh Chaturvedi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dirtsimple.org/2004/12/ python-is-not-java.html"&gt;"python Is Not Java", Phillip J. Eby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://faassen.n--tree.net/blog/view/weblog/2005/08/06/0"&gt;"What is  pythonic?", Martijn Faassen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki. python.org/moin/HowTo/Sorting"&gt;"Sorting Mini-HOWTO", Andrew Dalke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gungfu.de/facts/wiki/Main/ pythonIdioms"&gt;"python Idioms"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www. python.org/doc/faq/"&gt;"python FAQs"&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="reformat"></category></entry><entry><title>LINUX 101 HACKS 中有用的技巧</title><link href="https://breakwire.me/linux-101-hacks-notes.html" rel="alternate"></link><published>2015-07-05T14:02:10+08:00</published><updated>2015-07-05T14:02:10+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-07-05:/linux-101-hacks-notes.html</id><summary type="html">&lt;p&gt;Linux 101 HACKS 中有用的技巧&lt;/p&gt;</summary><content type="html">&lt;p&gt;很多有用的实用技巧，原书是英文，很久很久前哈工大的一些学生的学习资料，他们一些学生翻译的，记录些我自己现在用到的 tricks，非鸟哥的那本书上讲到的基础的东西。&lt;/p&gt;
&lt;h2&gt;cd&lt;/h2&gt;
&lt;h3&gt;设置 cd 的根目录，就是最最常用的目录，写入到 &lt;code&gt;~/.bash_profile&lt;/code&gt; 中，能在任何目录下快速切换&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CDPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;cd 和 alias 配合快速返回多级上层目录&lt;/h3&gt;
&lt;p&gt;进入了很深的目录想要向上返回两级或者三级就很麻烦，要写很多 &lt;code&gt;../../..&lt;/code&gt;，特别麻烦，把这个写入到 &lt;code&gt;~/.bash_profile&lt;/code&gt; 中就很方便用了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;cd1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cd ..&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;cd2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cd ../..&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;cd3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cd ../../..&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;cd4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cd ../../../..&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;cd5&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cd ../../../../..&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置了五层，应该够用的，命令的简写怎么自己方便怎么来，也可以直接写成点 &lt;code&gt;..&lt;/code&gt; &lt;code&gt;...&lt;/code&gt; &lt;code&gt;....&lt;/code&gt;，也可以前面加个 cd，&lt;code&gt;cd..&lt;/code&gt; &lt;code&gt;cd...&lt;/code&gt; &lt;code&gt;cd....&lt;/code&gt;，又或者 &lt;code&gt;..&lt;/code&gt; &lt;code&gt;..2&lt;/code&gt; &lt;code&gt;..3&lt;/code&gt;，还是第一种最好使。&lt;/p&gt;
&lt;h3&gt;创建新目录的同时进入目录&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;~/.bash_profile&lt;/code&gt; 中添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; mkdircd &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; mkdir -p &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;quot;\$&lt;/span&gt;&lt;span class="nv"&gt;$#&lt;/span&gt;&lt;span class="s2"&gt;\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;history&lt;/h2&gt;
&lt;h3&gt;Ctl + R 搜索历史命令&lt;/h3&gt;
&lt;h3&gt;四种方式快速执行前一条命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;方向键上&lt;/li&gt;
&lt;li&gt;!!&lt;/li&gt;
&lt;li&gt;!-1&lt;/li&gt;
&lt;li&gt;Ctrl + P&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有很多很多的内容我也没法总结，只是照着练习了一下，还没在真正的服务器部署维护中使用过，没那么复杂的环境。&lt;/p&gt;</content><category term="*nix"></category></entry><entry><title>（译文）为什么编程很难</title><link href="https://breakwire.me/translate-why-programming-is-difficult.html" rel="alternate"></link><published>2015-06-28T04:06:42+08:00</published><updated>2015-06-28T04:06:42+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-06-28:/translate-why-programming-is-difficult.html</id><summary type="html">&lt;p&gt;Programming is difficult like a shit!&lt;/p&gt;</summary><content type="html">&lt;p&gt;很多年前我认为编程是简单的，后来我意识到编程并不简单，因为在我思考什么是编程和程序员做的事情的过程中慢慢有了转变。&lt;/p&gt;
&lt;p&gt;最开始我认为编程只需要告诉计算机做什么，这部份编程还是相对容易的。在实践了二十年后我认为这部份编程也很容易。&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG1" src="https://joearms.github.io/images/program.png"&gt;&lt;/p&gt;
&lt;p&gt;定义 1：程序是将输入转化成输出的东西
程序员就是编写程序的人，编写程序是一门艺术。
现在给程序的定义添加一些限制。&lt;/p&gt;
&lt;p&gt;定义 2：程序是将输入转化为输出的东西，需要遵循一下限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序的输出是优美的。&lt;/li&gt;
&lt;li&gt;程序的输入是优美的。&lt;/li&gt;
&lt;li&gt;程序是优美的。&lt;/li&gt;
&lt;li&gt;程序的输入是完整正确、文档化的。&lt;/li&gt;
&lt;li&gt;程序是被测试和证明正确的。&lt;/li&gt;
&lt;li&gt;问题解决的结果是具体说明的。&lt;/li&gt;
&lt;li&gt;问题是具体说明的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加了这些限制之后编程变得相当困难了。
对于一个特定的问题，这些限制可是适当放宽。
一些常见的场景是这样的：&lt;/p&gt;
&lt;h3&gt;不需要维护的程序&lt;/h3&gt;
&lt;p&gt;我们经常要写只需要一次输出结果的程序，在这样的情况下，在以后程序不需要维护，所以程序不需要特别优美和描述清楚。
我的 Erlang 书就是一个例子，一旦这本书出版了，维护输入和制作这本书的程序就没有必要了，结果看起来很好，很多的 XML 文件和一些测试程序将来不需要维护。
这本书的勘误表，以及在重新复印过程中的必要的修改，只需要涉及到很少的改变，这样的输入修改是很容易的，即使程序的输入不是文档化的。&lt;/p&gt;
&lt;h3&gt;需要维护的程序&lt;/h3&gt;
&lt;p&gt;对于有些需要维护的程序，程序的输入以及程序本身必须是优美的以及良好文档化的。
之前我也一位开发 Web 应用的顾问聊天，他说只要程序的输出看起来是正确的（比如网页看起来正常，程序运行正常。），顾客将会认为这个项目已经结束了，项目经理将着手进行接下来的其他项目。
没有时间和理解这样的观点：不仅仅是网站看起来正常，而且在开始下个项目前产生这个网站的代码也要清楚冗余和文档化。这是为所有将来需要维护的项目制定的要求。&lt;/p&gt;
&lt;h3&gt;其他使编程变得困难的事情&lt;/h3&gt;
&lt;p&gt;还有其他三件事情使编程变得困难：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修复本不应该损坏的东西&lt;/li&gt;
&lt;li&gt;没有时间学习新的东西&lt;/li&gt;
&lt;li&gt;恶劣的编程环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些都是“时间小偷”&lt;/p&gt;
&lt;h4&gt;修复不应该损坏的东西&lt;/h4&gt;
&lt;p&gt;我经常需要使用别人的软件，我不是非常理解为什么它能解决一个特定的问题。
最好的情况，我需要使用的程序由一个准确的描述告诉我如何使用，但是经常发生的情况是程序没有描述或者由一个错误的描述。
当文档告诉你说 ”执行 XYZ 然后 PQR 就会发生“，但是当你照做了 ”XYZ“ 但是 ”PQR“ 没有发生时你怎么做？如果你幸运的话写这个程序的人在你周围那你就能够掐死他们，如果失败了那你也能在 Google 上搜索试试运气，又或者看看源代码试着找到答案。
用 Google 搜索去解决一个 bug 和赌博一样十分令人沮丧，我 Google 搜索了一阵，发现一篇帖子，一个可怜的人也遇到了和我一模一样的问题 ，我高兴极了，点开链接……什么都没有，问题还留着。
为什么有些修改对有的人有效但对我没用，是不是怀有恶意的上帝在盯着我，或者我所在的大学的一块地方的物理定律暂时改变了？两台机器的初始环境不一样，所以在一台机器的一种环境中解决了一个问题，到另一台不同环境的机器上就不能使用同样的方法。
就像我希望我们都写 Smalltalk 程序，我们都用相同的环境，Smalltalk 程序员必须呆在一个天堂似地环境中，但这是不可能的，当他们的程序需要和其他程序通讯的时候他们就明白了。
修复损坏的东西是让人双倍沮丧的事情，即使你解决了一个 bug ，你也不能真正知道你为解决这个问题或者使之生效的最后一个修改是什么。
这些事情我估计占据我百分之六十至七十的时间。一次我花了一周的时间尝试使一个损坏的 LDAP 服务器恢复工作，我的老板禁止我实现自己的 LDAP 服务器，但是经过一周的时间与这个用 C 实现，没有良好的文档，损坏的 LDAP 服务器折腾之后，我意外忘记了我的老板说的话，在午休的间隙从零开始实现了一个服务器。
实话说这不是一个完整功能的 LDAP 服务器，但我也不需要一个完整功能的，我只需要一些功能能够正常工作，这非常容易解决。
现在我不会对于实现那些古董级协议感到兴奋了，但从零开始重新实现的最快的方法。&lt;/p&gt;
&lt;h4&gt;解决了问题但是没有学到什么&lt;/h4&gt;
&lt;p&gt;我很烂，最擅长与偷懒。但当我想在 LaTex 中插入一个图标时，我不想去读一个 391 页长的手册。现在我知道你会假设我是一个懒惰的不靠谱的性格的人，我也知道我应该先去阅读手册，但我想要在十分钟之内就把图表插入到我的文档中，阅读 391 页长的手册实在不是一个好方法。
当要解决一个问题的时候我会去找一个快速的解决方案，但长期来看，这将是灾难性的。
将文档带到真正的生产环境中，我在 Tex/LaTex 和 XSLT-FO 以及我自己的 Erlguten 之间犹豫。
每三年一次我就有种强烈的冲动想要用后记的方式重写我的所有文档，然后我就会深呼吸直达这种感觉消失。
我猜 Giambattista Bondoni 在 1818 年制作 Manuale Tipografico 是没有特别关心制作排版一页需要耗费一周时间，但我们现在有更多的时间因为我们有机器帮助完成枯燥且危险以及我们不能做正确的事情。
我问过我的老板，他是否需要漂亮的幻灯篇来演讲。他说需要，要我在明天事前做好给他。这就没留给我时间去学习 Tex（我才可能需要一年），没时间实现自己的排版语言（需要 5-10 年），没时间把它记录下来（一周时间），最终我只能用 PowerPoint 了。&lt;/p&gt;
&lt;h4&gt;恶劣的编程环境&lt;/h4&gt;
&lt;p&gt;如果你在这种情形下，你将理解我所说的编程是相当困难的。因为办公室就是设计成是编程变得更加困难。我们有开放式的工作空间，噪杂的环境破坏了专注力，手机影响我们，互联网也会分散我们的注意力。
幸运的是我们还好似有地方不被打扰的，那就是睡觉。很多的编程问题就是在睡觉的时候解决的。
这么做有两种方法，在睡觉前记住很多问题，然后睡觉，第二天你醒来就发现一些问题就解决了，很容易。
第二种方法就是在睡觉前将你的问题贴到网上，发条 tweet，第二天已经有人将解决方案告诉你了。
要成为一个优秀的程序员需要很长时间，你需要学习很多很多的东西，你需要知道当你在一个问题上卡住了能够请教谁。&lt;/p&gt;
&lt;h4&gt;令人吃惊但是是真的&lt;/h4&gt;
&lt;p&gt;当我写完这篇文章，我想要检查内容的拼写，emacs-ispell 罢工了，我一直使用的拼写检查程序，没有发现 aspell。
我的 emacs 拼写检查器在这台机器上忠实工作了好多年，就在我抱怨我花了太多时间维护修改本不应该坏的东西的时候 emacs 拼写检查器决定崩溃。
我不相信上帝有恶意，也不相信我房间里面左手变得沙发和右手边的沙发的物理定律不同，但有直接证据证明是不通的。
我不明白我的拼写检查器会不工作，所有东西都是正常的，我没有修改任何东西。我安装了一个新版本的 Erlang 以及安装了 Julia，并写了一些讲义自从上次使用拼写检查一个文档。
幸运的是十一分的 Google 搜索起作用了。第二个建议关于如何解决问题以及他们最终起作用了，我也不知道为什么 emacs 不能找到 aspell，没有时间去找到答案。
我猜有些事情我们永远都不知道答案。&lt;/p&gt;
&lt;h3&gt;原文&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://joearms.github.io/2014/02/07/why-programming-is-difficult.html"&gt;Why Programming is Difficult&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="translate"></category></entry><entry><title>Django one-to-one relationships</title><link href="https://breakwire.me/django-one-to-one-relationships.html" rel="alternate"></link><published>2015-06-16T00:01:39+08:00</published><updated>2015-06-16T00:01:39+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-06-16:/django-one-to-one-relationships.html</id><summary type="html">&lt;p&gt;Django one-to-one relationships&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Many-to-one relationships&lt;/h2&gt;
&lt;p&gt;一对一关系，一对一关系应该使用来分离抽象模型的，不让一张表里面的字段那么多，那么乱。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;models.py&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;              &lt;span class="c1"&gt;# __unicode__ on Python 2&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; the place&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OneToOneField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;serves_hot_dogs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;serves_pizza&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;              &lt;span class="c1"&gt;# __unicode__ on Python 2&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; the restaurant&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Waiter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;restaurant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;              &lt;span class="c1"&gt;# __unicode__ on Python 2&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; the waiter at &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Restaurant&lt;/code&gt; 表中的 &lt;code&gt;place&lt;/code&gt; 字段是 和 &lt;code&gt;Place&lt;/code&gt; 表是一对一的关系，且手动设置成了主键，一家餐厅有一个地址，这样把模型都分开来，虽然查询的时候可能比较麻烦，但这样分开来能更好的抽象模型的关系，我的应用里面也能够这么做，一个表中的字段太多，有的能够分离到一对一的关系中，也更好理解些。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;python manage.py shell&lt;/code&gt; API 用法&lt;/h3&gt;
&lt;h4&gt;实例化 &lt;code&gt;Place&lt;/code&gt; 对象&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Demon Dogs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;944 W. Fullerton&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Ace Hardware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1013 N. Ashland&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;实例化 &lt;code&gt;Restaurant&lt;/code&gt; 对象，将前面实例化好的的 &lt;code&gt;Place&lt;/code&gt; 对象绑定上去&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serves_hot_dogs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serves_pizza&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;通过 &lt;code&gt;Restaurant&lt;/code&gt; 获取其地点&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;通过 &lt;code&gt;Place&lt;/code&gt; 获取其绑定的 &lt;code&gt;Restaurant&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurane&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;code&gt;p2&lt;/code&gt; 没有绑定任何 &lt;code&gt;Restaurant&lt;/code&gt; 对象&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ObjectDoesNotExist&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ObjectDoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;There is no restaurant here.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;There&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;使用 &lt;code&gt;hasattr&lt;/code&gt; 避免捕捉异常&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;重新绑定 &lt;code&gt;Place&lt;/code&gt; 对象到 &lt;code&gt;Restaurant&lt;/code&gt; 中&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ace&lt;/span&gt; &lt;span class="n"&gt;Hardware&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ace&lt;/span&gt; &lt;span class="n"&gt;Hardware&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;r&lt;/code&gt; 的地点原来是 &lt;code&gt;p1&lt;/code&gt;，重新绑定成 &lt;code&gt;p2&lt;/code&gt;，验证已经变成了 &lt;code&gt;p2&lt;/code&gt; 的地址。
重新设置回来：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;不能绑定一个没有保存到数据库中的对象到另一个对象中，否则会触发 &lt;code&gt;ValueError&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Demon Dogs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;944 W. Fullerton&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serves_hot_dogs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serves_pizza&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cannot assign &amp;quot;&amp;lt;Place: Demon Dogs&amp;gt;&amp;quot;: &amp;quot;Place&amp;quot; instance isn&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serves_hot_dogs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serves_pizza&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cannot assign &amp;quot;&amp;lt;Restaurant: Demon Dogs the restaurant&amp;gt;&amp;quot;: &amp;quot;Restaurant&amp;quot; instance isn&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这上面的错误其实有两个，第一是 &lt;code&gt;p3&lt;/code&gt; 实例化没有保存，然后就是 第二行完全没来由，没有实例化任何 &lt;code&gt;Restaurant&lt;/code&gt; 对象就要把 &lt;code&gt;p3&lt;/code&gt; 绑定上去，触发两个 &lt;code&gt;ValueError&lt;/code&gt; 异常。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django 1.8 的改变：
前面也好几处提过了，绑定未保存的对象将会静默数据丢失，不会引发任何异常。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;其他用法就是增删改差了&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ace&lt;/span&gt; &lt;span class="n"&gt;Hardware&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ace&lt;/span&gt; &lt;span class="n"&gt;Hardware&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place__pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place__name__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Demon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place__address__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ashland&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waiter_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Joe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Waiter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Joe&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;waiter&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Waiter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;restaurant__place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Waiter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Joe&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;waiter&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Waiter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;restaurant__place__name__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Demon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Waiter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Joe&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;waiter&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="django"></category></entry><entry><title>Djanog many-to-one relationships</title><link href="https://breakwire.me/django-many-to-one-relationships.html" rel="alternate"></link><published>2015-06-13T14:28:08+08:00</published><updated>2015-06-13T14:28:08+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-06-13:/django-many-to-one-relationships.html</id><summary type="html">&lt;p&gt;Django many-to-one relationships&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Many-to-one relationships&lt;/h2&gt;
&lt;p&gt;三个数据库 API 例子中的第二个，有时候分不清，多对一和一对多，现在有点分得清了，但是有些查询方面还是有点糊，&lt;code&gt;QuerySet&lt;/code&gt; 这搞得，简单的查询很容易搞定，但是数据库模型设置的复杂了，或者要查询的东西复杂了，就搞不太明白了，而且基础的教程里面都没有讲，要自己去查文档。&lt;/p&gt;
&lt;h3&gt;我自己的应用模型实例&lt;/h3&gt;
&lt;p&gt;刚结合自己的应用的数据库模型，稍稍搞清了模型的多对一，一对多关系，先说在我自己的模型：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;读不下去&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag_name&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book_Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="c1"&gt;# Book Info 14 objects in total. (Book cover didn&amp;#39;t add yet)&lt;/span&gt;
   &lt;span class="n"&gt;isbn10&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;isbn13&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="c1"&gt;# My Customise Tags 想读、正在读、读过、!!! 读不下去!!!（独创标签，仅此一家！！！）&lt;/span&gt;
   &lt;span class="n"&gt;customise_tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Note&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="c1"&gt;# Book Notes. You can take some notes for one book your owned.&lt;/span&gt;
   &lt;span class="n"&gt;book_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book_Info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;省略了一些没用的字段，&lt;code&gt;Book_Info&lt;/code&gt; 这张表有一些基本的字段，都是 &lt;code&gt;models.CharField&lt;/code&gt;，&lt;code&gt;customise_tag&lt;/code&gt; 这个字段和 &lt;code&gt;Tag&lt;/code&gt; 这张表就是多对多的关系。&lt;code&gt;Note&lt;/code&gt; 中定义了一个 &lt;code&gt;book_info = models.ForeignKey(Book_Info, blank=True. null=True)&lt;/code&gt;，这个就说明 &lt;code&gt;Note&lt;/code&gt; 表中的 &lt;code&gt;book_info&lt;/code&gt; 字段是 &lt;code&gt;Note&lt;/code&gt; 表的外键，一个 &lt;code&gt;Book_Info&lt;/code&gt; 可以对应多个 &lt;code&gt;Note&lt;/code&gt;，一对多关系。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;models.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;下面这个示例就是文档中的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EmailField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;              &lt;span class="c1"&gt;# __unicode__ on Python 2&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;headline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;pub_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="n"&gt;reporter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;              &lt;span class="c1"&gt;# __unicode__ on Python 2&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;

   &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个模型中，&lt;code&gt;reporter&lt;/code&gt; 字段是 &lt;code&gt;Article&lt;/code&gt; 表的外键，一个 &lt;code&gt;Reporter&lt;/code&gt; 可以对应多个 &lt;code&gt;Article&lt;/code&gt;，刚才一想，好像又不太对了……怎么老是要搞这个字面上的解释呢，看来这个数据库还得多看书，表和字段的抽象关系理不怎么清啊。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;python manage.py shell&lt;/code&gt; API 用法&lt;/h3&gt;
&lt;h4&gt;实例化 &lt;code&gt;Reporter&lt;/code&gt; 对象，&lt;code&gt;save()&lt;/code&gt; 存到数据库中&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Paul&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Jones&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;paul@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;实例化 &lt;code&gt;Article&lt;/code&gt;，将已经实例化的 &lt;code&gt;Reporter&lt;/code&gt; 对象绑定到 &lt;code&gt;Article&lt;/code&gt; 中&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;This is a test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pub_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;绑定外键关系之前必须要保存对象，Django 1.8 前这么做会触发 &lt;code&gt;ValueError&lt;/code&gt; 异常，1.8 之后不会触发异常，数据静默丢失。&lt;/p&gt;
&lt;h4&gt;从 &lt;code&gt;Article&lt;/code&gt; 对象获得 &lt;code&gt;Reporter&lt;/code&gt; 对象&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;从 &lt;code&gt;Reporter&lt;/code&gt; 对象实例化 &lt;code&gt;Article&lt;/code&gt; 对象，直接将实例化的 &lt;code&gt;Article&lt;/code&gt; 绑定到已实例化 &lt;code&gt;Reporter&lt;/code&gt; 对象中&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;John&amp;#39;s second story&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pub_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s second story&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;先实例化 &lt;code&gt;Article&lt;/code&gt; 对象，再通过 &lt;code&gt;article_set.add&lt;/code&gt; 绑定 &lt;code&gt;Reporter&lt;/code&gt; 对象&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paul&amp;#39;s story&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pub_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2006&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_article2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s second story&amp;gt;, &amp;lt;Article: Paul&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;story&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;绑定上面同一个 &lt;code&gt;Article&lt;/code&gt; 对象到不同的 &lt;code&gt;Reporter&lt;/code&gt; 对象中，它就变了&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_article2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Paul&lt;/span&gt; &lt;span class="n"&gt;Jones&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;原来 &lt;code&gt;new_article2&lt;/code&gt; 的 &lt;code&gt;reporter&lt;/code&gt; 是 &lt;code&gt;r&lt;/code&gt; &lt;code&gt;&amp;lt;Reporter: John Smith&amp;gt;&lt;/code&gt;，现在变成了 &lt;code&gt;&amp;lt;Reporter: Paul Jones&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;h4&gt;绑定错误的对象就会引发异常&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Article&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s second story&amp;gt;, &amp;lt;Article: This is a test&amp;gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Paul&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s story&amp;gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将 &lt;code&gt;Reporter&lt;/code&gt; 对象绑定包另一个 &lt;code&gt;Reporter&lt;/code&gt; 对象上会引发 &lt;code&gt;TypeError&lt;/code&gt; 异常。&lt;/p&gt;
&lt;h4&gt;其他&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headline__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter__first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# filter 两个条件，转到 SQL 中就是 WHERE 和 AND 语句&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter__first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reporter__last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter__pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# 下面三条语句的结果是一样的&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__headline__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__headline__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__headline__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__headline__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__reporter__first_name__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__reporter__first_name__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__reporter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__headline__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="django"></category></entry><entry><title>GitHub 使用：参与协作，Fork 保持更新</title><link href="https://breakwire.me/stay-tuned-with-github-and-open-source.html" rel="alternate"></link><published>2015-06-12T18:38:15+08:00</published><updated>2015-06-12T18:38:15+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-06-12:/stay-tuned-with-github-and-open-source.html</id><summary type="html">&lt;p&gt;GitHub 使用：参与协作，Fork 保持更新&lt;/p&gt;</summary><content type="html">&lt;p&gt;看别人的 GitHub Profile 右边 Repositories contributed to 一堆，我啥都没有，就自己的几个仓库，看了些别人的教程，他们也把完成的代码放在上面，我发现了有些错误，原来就自己一个人用用 Git，也试试这个怎么多人协作。&lt;/p&gt;
&lt;p&gt;以昨天我刚给别人的一个项目加了个小功能为例，先是要在别人的仓库里 Fork 到自己的仓库中，然后 &lt;code&gt;git clone&lt;/code&gt; 下来，然后就是写代码了，写完了，测试好了，那就 &lt;code&gt;add commit push&lt;/code&gt; 走下去，在自己的仓库上创建 Pull Request，说明做了什么更改，等原仓库所有者审核合并到主分支上。&lt;/p&gt;
&lt;p&gt;原仓库再次更新添加了代码，我本地怎么才能同步获得新代码呢，原来就一个人用用不知道，后来查了查就基本会用了。&lt;/p&gt;
&lt;p&gt;原来 clone 自己的 Fork 仓库有两个 origin 来源，都是指向的自己的 Frok 仓库，要再次获得更新，就要建立原仓库的跟踪来源：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git remote add upstream git@github.com:Andrew-liu/my_blog_tutorial.git
$ git remote -v
origin  git@github.com:lsdlab/my_blog_tutorial.git &lt;span class="o"&gt;(&lt;/span&gt;fetch&lt;span class="o"&gt;)&lt;/span&gt;
origin  git@github.com:lsdlab/my_blog_tutorial.git &lt;span class="o"&gt;(&lt;/span&gt;push&lt;span class="o"&gt;)&lt;/span&gt;
upstream    git@github.com:Andrew-liu/my_blog_tutorial.git &lt;span class="o"&gt;(&lt;/span&gt;fetch&lt;span class="o"&gt;)&lt;/span&gt;
upstream    git@github.com:Andrew-liu/my_blog_tutorial.git &lt;span class="o"&gt;(&lt;/span&gt;push&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下载原仓库最新内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git fetch upstream
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;合并：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout master
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;</content><category term="github"></category></entry><entry><title>网站简单优化之 Nginx 开启文件压缩及缓存</title><link href="https://breakwire.me/simple-optimize-with-nginx-zip-and-cache.html" rel="alternate"></link><published>2015-06-06T16:46:54+08:00</published><updated>2015-06-06T16:46:54+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-06-06:/simple-optimize-with-nginx-zip-and-cache.html</id><summary type="html">&lt;p&gt;网站简单优化之 Nginx 开启文件压缩及缓存&lt;/p&gt;</summary><content type="html">&lt;h3&gt;简单优化&lt;/h3&gt;
&lt;p&gt;站点的基本功能完成后，简单维护，时不时看看日志，用 goaccess 分析下 &lt;code&gt;access.log&lt;/code&gt; 看看 4xx 5xx 的状态码，自己测试的时候用 &lt;code&gt;ngxtop&lt;/code&gt;，一个实时的请求分析程序，自己把链接都点点，看看哪边有问题，会出现 4xx 和 5xx 的状态码，想办法解决。这两个工具我就不再写怎么用了，小破网站也没有必要老分析。简单优化就靠 Google 提供的一个工具 &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;PageSpeed Insights&lt;/a&gt;，会分析移动设备和桌面浏览器的得分，下面会给出优化提示，现在能够解决的只有开启文件压缩的缓存了，优化完成之后的移动设备还是不太好，七十九分，桌面浏览器已经能够达到九十二分了，还算行。&lt;/p&gt;
&lt;h3&gt;Nginx 开启文件压缩&lt;/h3&gt;
&lt;p&gt;文件压缩设置是写在 &lt;code&gt;server&lt;/code&gt; 端，配置如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# gzip
gzip on;
gzip_min_length 1k;
gzip_buffers 4 16k;
gzip_comp_level 2;
gzip_types text/plain application/x-javascript text/css application/xml text/javascript  image/jpeg image/png;
gzip_disable &amp;quot;MSIE [1-6]\.&amp;quot;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一行开启压缩；第二行 &lt;code&gt;gzip_min_length 1k&lt;/code&gt;，设置允许压缩的页面的最小字节数，默认是 0，不管也米那多大都压缩，建议设置成大于 1k 的字节数，小于 1k 可能会越压越大；第三行 &lt;code&gt;gzip_buffers 4 16k&lt;/code&gt;，设置系统获取几个单位的缓存用于存储 gzip 的压缩结果数据流， &lt;code&gt;4 16k&lt;/code&gt; 代表以 16k 为单位的四倍申请内存，如过没有设置，默认值是申请跟原始数据相同大小的内存空间去存储 gzip 的压缩结果，第四行 &lt;code&gt;gzip_comp_level&lt;/code&gt; 设置压缩登记，1-9，1 压缩比最小处理速度最快，越大压缩比越大但处理更慢，传输快，消耗大量 CPU 资源；第五行设置压缩的文件种类，无论是否指定，&lt;code&gt;text/html&lt;/code&gt; 都会被压缩，第六行，设置 IE 不开启文件压缩。&lt;/p&gt;
&lt;h3&gt;开启文件缓存&lt;/h3&gt;
&lt;p&gt;需要缓存的文件就是媒体文件和 CSS, JS 文件，分别在 &lt;code&gt;location&lt;/code&gt; 下 媒体和静态文件设置就行了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Django media
location /media {
   alias /home/chen/DjangoProjects/my_blog/media; # your Django project&amp;#39;s media files - amend as required
   expires 30d;
   access_log off;
   add_header Cache-Control &amp;quot;public&amp;quot;;
}

location /static {
   alias /home/chen/DjangoProjects/my_blog/static; # your Django project&amp;#39;s static files - amend as required
   expires 30d;
   access_log off;
   add_header Cache-Control &amp;quot;public&amp;quot;;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;expires&lt;/code&gt; 缓存时间，&lt;code&gt;30d&lt;/code&gt;，三十天。&lt;/p&gt;
&lt;p&gt;对于一个个人网站的小站点，这俩项优化完成就差不多了，如果功能越来越多，页面交互更加复杂，那就是程序要写写好了，还有 JS 的优化。我的 &lt;a href="HTTP://breakwire.me"&gt;NO MAN'S LAND&lt;/a&gt; 将作为一个长期项目，后续将增加内容，增加功能，优化各个方面，最近还学习了 Redis 准备给博客加个阅读次数功能。&lt;/p&gt;
&lt;h3&gt;参考链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.nginx.cn/doc/standard/httpgzip.html"&gt;HttpGzip模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nginx.cn/doc/standard/httpheaders.html"&gt;HttpHeaders模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serversforhackers.com/nginx-caching"&gt;Nginx Caching - Servers for Hackers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="devops"></category><category term="nginx"></category></entry><entry><title>Django many-to-many relationalships</title><link href="https://breakwire.me/django-many-to-many-relationships.html" rel="alternate"></link><published>2015-05-25T01:12:07+08:00</published><updated>2015-05-25T01:12:07+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-05-25:/django-many-to-many-relationships.html</id><summary type="html">&lt;p&gt;Django many-to-many relationalships&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Many-to-many relationalships&lt;/h2&gt;
&lt;p&gt;这篇是 Django 文档中的一些例子，在 tutorial 中没有全部展示的东西看例子很容易就明白了，这里我就大概翻译一下，也作为自己的一个笔记。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;models.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;多对多关系，是在模型中用 &lt;code&gt;ManyToManyField&lt;/code&gt; 定义。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;

      &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;    &lt;span class="c1"&gt;# 这里是单元素元组请注意，有一个逗号&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;headline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;publications&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;

   &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;    &lt;span class="c1"&gt;# 同样是单元素元组请注意逗号&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Article&lt;/code&gt; 是一张表，有 &lt;code&gt;headline&lt;/code&gt; 和 &lt;code&gt;publication&lt;/code&gt; 两个字段，&lt;code&gt;publication&lt;/code&gt; 字段对应 &lt;code&gt;Publication&lt;/code&gt; 这张表，多对多关系，One Article can have mutiple Publication and one Publication can have Mutiple Publication。下面就是演示 &lt;code&gt;python manage.py shell&lt;/code&gt; 中的 API 用法：&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;python manage.py shell&lt;/code&gt; API 用法&lt;/h3&gt;
&lt;h4&gt;实例化 &lt;code&gt;Publication&lt;/code&gt; 对象，&lt;code&gt;save()&lt;/code&gt; 存到数据库中&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Python Journel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Science News&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Science Weekly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;实例化 &lt;code&gt;Article&lt;/code&gt;，与 &lt;code&gt;Publicaton&lt;/code&gt; 联系起来&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Django let&amp;#39;s you build Web apps easily&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;piblications&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里把前面实例化的三个 &lt;code&gt;Publication&lt;/code&gt; 全部加到 a2 中了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headlinde = &amp;quot;NASA use Python&amp;quot;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publications&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publications&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重复添加也没有问题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实例化 &lt;code&gt;Article&lt;/code&gt; 的同时添加 &lt;code&gt;Publication&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_publication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Highlings for Children&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看每个 &lt;code&gt;Article&lt;/code&gt; 对应的 &lt;code&gt;Publication&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publications&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Journal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publications&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Highlights&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Children&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Science&lt;/span&gt; &lt;span class="n"&gt;News&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Science&lt;/span&gt; &lt;span class="n"&gt;Weekly&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Journal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可通过 &lt;code&gt;Publication&lt;/code&gt; 关联的 &lt;code&gt;Article&lt;/code&gt; 查看，&lt;code&gt;QuerySet&lt;/code&gt; 对象&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NASA&lt;/span&gt; &lt;span class="n"&gt;uses&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Django&lt;/span&gt; &lt;span class="n"&gt;lets&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;Web&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt; &lt;span class="n"&gt;easily&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NASA&lt;/span&gt; &lt;span class="n"&gt;uses&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NASA&lt;/span&gt; &lt;span class="n"&gt;uses&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后就是各种 API，增删改查，没什么多说的，摸索两下就知道怎么用了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;publications&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;publications&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="django"></category></entry><entry><title>Django 多对多查询</title><link href="https://breakwire.me/django-many-to-many.html" rel="alternate"></link><published>2015-05-19T21:47:57+08:00</published><updated>2015-05-19T21:47:57+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-05-19:/django-many-to-many.html</id><summary type="html">&lt;p&gt;Django 多对多查询&lt;/p&gt;</summary><content type="html">&lt;h3&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Django 框架中外键就是 QuerySet  对象，刚开始我一直没明白很多复杂的查询在 Django 里面怎么实现，昨天在 StackOverflow 上问了下，果然就搞明白了，这下有的就好办多了：&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;models.py&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;


&lt;span class="c1"&gt;# Create your models here.&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag_name&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;publish_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;update_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一篇文章有多个标签，&lt;code&gt;Article&lt;/code&gt; 表中 &lt;code&gt;tag&lt;/code&gt; 字段是 &lt;code&gt;Tag&lt;/code&gt; 表的多对多外键，我要在文章列表做首页的地方怎么把每篇文章的标签全列出来我就不明白了，在 &lt;code&gt;views.py&lt;/code&gt; 里面能通过 &lt;code&gt;id&lt;/code&gt; 先把这篇文章取出来，再把对应的 &lt;code&gt;tag&lt;/code&gt; 取出来，两个参数列表传到模板中进行渲染：&lt;code&gt;post = Article.objects.get(id=str(id))    tags = post.tag.all()&lt;/code&gt;，这个倒是能理解。&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;views.py&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-publish_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;paginator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Paginator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;post_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;PageNotAnInteger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;post_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;EmptyPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;post_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;home.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;post_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;post_list&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里只把全部文章取出来，然后按发布时间倒序排列，还进行了分页，四篇一页，放在 &lt;code&gt;post_list&lt;/code&gt; 这个参数列表中，然后在给 &lt;code&gt;home.html&lt;/code&gt; 渲染：&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;home.html&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% raw %}
{% block content %}
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blog-post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       {% for post in post_list %}
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blog-post-title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% url &amp;#39;detail&amp;#39; id=post.id %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ post.title }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blog-post-meta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;发布时间：&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label label-primary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ post.publish_time | date:&amp;#39;Y/m/d&amp;#39; }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;更新时间：&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label label-primary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ post.update_time | date:&amp;#39;Y/m/d&amp;#39; }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;目录：&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label label-primary&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% url &amp;#39;category&amp;#39; post.category %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ post.category | title}}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;标签：&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp
               {% for tag in post.tag.all %}
                   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label label-primary&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ tag }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               {% endfor %}
               &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                   {{ post.content|custom_markdown | truncatewords:5}}
               &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label label-primary&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% url &amp;#39;detail&amp;#39; id=post.id %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Read More &amp;gt;&amp;gt;&amp;gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
       {{&amp;quot;{% endfor &amp;quot;}}%}

       {% if post_list.object_list and post_list.paginator.num_pages &amp;gt; 1 %}
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pager&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       {% if post_list.has_previous %}
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;?page={{ post_list.previous_page_number }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;上一页&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       {% endif %}

      {% if post_list.has_next %}
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;?page={{ post_list.next_page_number }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;下一页&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       {% endif %}
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       {% endif %}
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- /.blog-post --&amp;gt;&lt;/span&gt;
{% endblock %}
{% endraw %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关键就在于：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% raw %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;标签：&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp
{% for tag in post.tag.all %}
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label label-primary&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ tag }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endfor %}
{% endraw %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最开始已经把每篇文章通过 &lt;code&gt;for&lt;/code&gt; 循环放在 &lt;code&gt;post&lt;/code&gt; 里面了，想读单独一篇的文章的标签就再用 &lt;code&gt;for&lt;/code&gt; 循环 &lt;code&gt;for tag in post.tag.all&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;还是要多看文档……&lt;/p&gt;</content><category term="django"></category></entry><entry><title>Two posters i made</title><link href="https://breakwire.me/tow-posters-i-made.html" rel="alternate"></link><published>2015-04-30T10:27:08+08:00</published><updated>2015-04-30T10:27:08+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-04-30:/tow-posters-i-made.html</id><summary type="html">&lt;p&gt;Two posters i made&lt;/p&gt;</summary><content type="html">&lt;p&gt;两张海报，我拍的照片，用 iOS 上一个叫 Posters 的 App 做的。&lt;/p&gt;
&lt;p&gt;Live what you love.&lt;/p&gt;
&lt;p&gt;&lt;img alt="poster1" src="/images/poster1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It does not matter how slowly you go, as long as you do not stop.&lt;/p&gt;
&lt;p&gt;&lt;img alt="poster2" src="/images/poster2.jpg"&gt;&lt;/p&gt;</content><category term="design"></category><category term="poster"></category></entry><entry><title>Django Blog Frontend Reframe</title><link href="https://breakwire.me/django-blog-frontend-reframe.html" rel="alternate"></link><published>2015-04-19T10:19:48+08:00</published><updated>2015-04-19T10:19:48+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-04-19:/django-blog-frontend-reframe.html</id><summary type="html">&lt;p&gt;Django Blog Frontend Reframe&lt;/p&gt;</summary><content type="html">&lt;p&gt;重构了前端界面，用的 &lt;a href="http://designmodo.github.io/Flat-UI/"&gt;Flat-UI&lt;/a&gt;，好看多了，效果见图，还要吧右边的 sidebar 提上来，提到和 NO MAN'S LAND 标题一个高度，那就正好一屏显示联系方式和下面的几个连接。效果见图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-blog" src="/images/django-blog.png"&gt;&lt;/p&gt;
&lt;h3&gt;2015-6-9&lt;/h3&gt;
&lt;p&gt;又重新改了改，双栏设计感觉不太好，图已更新。&lt;/p&gt;</content><category term="frontend"></category></entry><entry><title>Django 博客上线</title><link href="https://breakwire.me/django-blog-deploy-online.html" rel="alternate"></link><published>2015-03-26T20:45:15+08:00</published><updated>2015-03-26T20:45:15+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-03-26:/django-blog-deploy-online.html</id><summary type="html">&lt;p&gt;Django 博客上线&lt;/p&gt;</summary><content type="html">&lt;p&gt;这个 Django 做的博客 &lt;a href="http://breakwire.me"&gt;MO MAN'S LAND&lt;/a&gt; 终于是用域名配置好上线了。用 nginx 作为服务器，查了一堆资料看怎么配置，最后还是摸索出来了。一直看人家配置的时候用的 8000 端口，然后 socket 用的 8001 端口，我也就这么做了，然后在 Godaddy 上把不带 www 的 A record 设置指向 VPS，&lt;code&gt;HOST&lt;/code&gt; 设置为&lt;code&gt;@&lt;/code&gt;，&lt;code&gt;POINT TO&lt;/code&gt; 设置为 VPS 的 IP，nginx 上&lt;code&gt;server_name&lt;/code&gt; 设置为&lt;code&gt;breakwire.me&lt;/code&gt;，然后用域名去访问就显示&lt;code&gt;Welcome to nginx!&lt;/code&gt;，不知道是为什么。昨天下午的时候想到去 stackoverflow 上问问吧，很快就有人回复了，把 8000 端口改到默认的 80 就行了，我一试，嘿，果然是这样，我就又问能不能不用默认的 80 端口，人家说不能…… &lt;a href="http://stackoverflow.com/questions/29252958/how-can-i-use-my-godaddy-domain-for-my-django-app"&gt;How can I use my godaddy domain for my Django App&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在这个东西还是有些 bug，把 bugfix 和待实现功能记在这边吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图床贴图过大直接就要错乱，不知道怎么回事。&lt;/li&gt;
&lt;li&gt;待实现功能有两个，一个是 RSS 订阅，还有一个是时间分类功能，类别分类倒是搞定了，在首页，归档，单独文章里面都能点击，时间分类好像也没有必要，一般都是在右侧边栏有个年月，每个月的文章都放在里面，这个倒是可以实现一下。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看了这么多美剧，各种俚语双关语都学了不少，得锻炼锻炼英文写作，从 quora 和 stackoverflow 答题开始，还有，就是在写 git commit 信息的时，经常不知道改怎么写，老是要写中式英语，太难看了，得多练练。&lt;/p&gt;</content><category term="devops"></category><category term="django"></category></entry><entry><title>Debian 服务器 Python 开发环境配置</title><link href="https://breakwire.me/configuration-for-python-development-in-a-debian-server.html" rel="alternate"></link><published>2015-03-19T11:41:11+08:00</published><updated>2015-03-19T11:41:11+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-03-19:/configuration-for-python-development-in-a-debian-server.html</id><summary type="html">&lt;p&gt;Debian 服务器 Python 开发环境配置&lt;/p&gt;</summary><content type="html">&lt;p&gt;就像之前倒腾 octopress 一样，老是出现各种问题，不会 Ruby，一通乱弄，经过无数次的 rebuild，deploy，终于基本上是可以了，删除重来删除重来，我都能够把各个步骤背出来了，还有那个地方有坑，要注意。（以下操作都在 debian 7 下实际测试过）&lt;/p&gt;
&lt;h3&gt;0. 用户配置&lt;/h3&gt;
&lt;p&gt;照着阮一峰老师的文章做就行：&lt;a href="http://www.ruanyifeng.com/blog/2014/03/server_setup.html"&gt;Linux服务器的初步配置流程&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;1. 服务器监控&lt;/h3&gt;
&lt;p&gt;要是新 build 的机器的话，ssh 登录上去先在 root 下装个机器的运行状态监控&lt;a href="https://nodequery.com/"&gt;NodeQuery&lt;/a&gt;， Linux 服务器监控程序太多了，免费的收费的都有，还有人不放心，自己写脚本监控，这个应用界面不错，免费支持十台机器，每三分钟更新一次数据，准确行还凑合，单有时候就误报 &lt;code&gt;not respond&lt;/code&gt;，不知道怎么回事，high load 和 not respond 都会发邮件提醒。&lt;/p&gt;
&lt;h3&gt;2. 包管理&lt;/h3&gt;
&lt;p&gt;debian 和 ubuntu 本身自带一个 apt-get  的包管理，但不是所有的二进制程序和工具包都在里面的，&lt;a href="https://github.com/Homebrew/linuxbrew"&gt;Homebrew/linuxbrew&lt;/a&gt; 是一个从 OS X 平台上移植过来的包管理程序，用 ruby 写的，对于只用 OS X 的开发者十分有用，安装一些包能自动安装依赖项。但移植的毕竟是移植的，在 Linux 上还是有各种的问题，经过我在 debian 7 上实际使用的情况，安装 Python 2.7.9、分屏 tmux、Ruby 以及 Ruby 的包管理工具 rbenv 都没有问题，还有 go 和 node 也没有问题，就是编译的时间有点长，CPU 占用一直卡在百分之百，内存到还好，以为是死机了，等等就好了。&lt;/p&gt;
&lt;h3&gt;3.  VIM 插件配置&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/gmarik/Vundle.vim"&gt;Vundle&lt;/a&gt; 是一个 vim 插件管理程序，vim 作为一个 Linux 下最重要的工具之一，必须是熟练使用，有很多插件能都使 vim 更加好用，这个要根据个人使用的情况来配置。安装的话直接 git clone 下来就行了，我自己的本地机器上也有装，我就直接把&lt;code&gt;~/.vimrc&lt;/code&gt; 直接复制到远程机器上了，&lt;code&gt;scp -P 8964 ~/.vimrc chen@xxx.xxx.xxx.xxx:/home/chen&lt;/code&gt;， 我改了默认ssh 端口，所以要用大写P 指定端口号。然后打开&lt;code&gt;vim&lt;/code&gt;， 命令模式 &lt;code&gt;:PluginInstall&lt;/code&gt;， 等着 done 就行了。Python 有个 vim 里的自动补全插件叫 jedi，在服务器那么大的延迟下用就算了吧，简直噩梦，本地机器用用还行，但我本地机器还有更好用的 Sublime Text 3 呢。&lt;/p&gt;
&lt;h3&gt;4. 数据库安装&lt;/h3&gt;
&lt;p&gt;MySQL 直接 &lt;code&gt;sudo apt-get update mysql-server&lt;/code&gt; 就行了，要设置 root 账户的密码。Python 和 MySQL 沟通要有一个接口，用 homebrew 安装好 Python 安装自带了 pip 工具，用来安装 Python 的各种包。这个接口叫 MySQL-python， 区分大小写，要是直接装是不行的，会出错，这个地方是有一个坑的，参见这个链接 &lt;a href="http://stackoverflow.com/questions/5178292/pip-install-mysql-python-fails-with-environmenterror-mysql-config-not-found"&gt;pip install mysql-python fails with EnvironmentError: mysql_config not found - Stack Overflow&lt;/a&gt;。如果是一个小博客就没有必要用 MySQL了，直接 SQLite 就行了，这个和 Python 的接口是&lt;code&gt;pysqlite&lt;/code&gt;，直接 pip 安装没有问题。&lt;/p&gt;
&lt;h3&gt;5. Python 的 pip 包安装&lt;/h3&gt;
&lt;p&gt;这个就有点坑了，我自己实测在 Ubuntu 和 Debian 下安装包的隔离工具 &lt;code&gt;virtualenvwrapper&lt;/code&gt; 都不行，我也没找到解决方法，作罢，把所有包全混在了一起。&lt;/p&gt;
&lt;h4&gt;Django 相关包&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;django-admin-bootstrapped&lt;/li&gt;
&lt;li&gt;django-bootstrap&lt;/li&gt;
&lt;li&gt;Markdown    # markdown&lt;/li&gt;
&lt;li&gt;MySQL-python    # MySQL 接口&lt;/li&gt;
&lt;li&gt;pip&lt;/li&gt;
&lt;li&gt;pysqlite    # SQLite 接口&lt;/li&gt;
&lt;li&gt;setuptools&lt;/li&gt;
&lt;li&gt;uWSGI&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;其他&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;pep8    # Python 编码规范，可以提示出代码不规范的地方&lt;/li&gt;
&lt;li&gt;joe    # 自动添加 .gitignore 文件，比如 *.pyc 这些就不 push 到仓库了&lt;/li&gt;
&lt;li&gt;ngxtop    # nginx 分析程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对了，还有一个重要的地方，在 CLI 中或者在 Python 解释器中有时候不能使用方向键移动光标，readline 这个包，用 pip 装上去是没有用的，要用 &lt;code&gt;easy_install readline&lt;/code&gt; 才行，&lt;code&gt;easy_install&lt;/code&gt; 是 &lt;code&gt;setuptools&lt;/code&gt; 的工具，也是和 Python 一起自带的。
&lt;code&gt;virtualenvwrapper&lt;/code&gt; 是个大坑，我还没有研究出来这个怎么解决，就先算了，要不直接用&lt;code&gt;virtualenv&lt;/code&gt; 用还行。&lt;/p&gt;
&lt;h3&gt;6. 补漏 Django 应用部署&lt;/h3&gt;
&lt;p&gt;之前一篇讲 Django 应用部署，有个 pcre 库的问题，自己编译太慢了，后来查了下还有直接从仓库里面安装的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
sudo apt-get install libpcre3 libpcre3-dev
sudo apt-get install openssl libssl-dev
&lt;/pre&gt;&lt;/div&gt;</content><category term="devops"></category><category term="*unix"></category><category term="debian"></category><category term="python"></category></entry><entry><title>Django 应用部署填坑</title><link href="https://breakwire.me/about-deploy-django-web-app-something-i-missed.html" rel="alternate"></link><published>2015-03-17T15:57:00+08:00</published><updated>2015-03-17T15:57:00+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-03-17:/about-deploy-django-web-app-something-i-missed.html</id><summary type="html">&lt;p&gt;Django 应用部署填坑&lt;/p&gt;</summary><content type="html">&lt;p&gt;在测试 Django 应用能都在服务器上执行 &lt;code&gt;python manage.py runserver&lt;/code&gt;, 功能正常，要把开发配置改成部署配置之后还有关键的一步：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 删掉这个配置项&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个地方要把 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; 删掉改成 &lt;code&gt;STATIC_ROOT = "/home/chen/DjangoProjects/my_blog/static"&lt;/code&gt;, 然后在执行 &lt;code&gt;python manage.py collectstatic&lt;/code&gt;, 这一步会把一些静态文件全复制到项目的静态文件夹下，这个步骤如果不执行的话就会发现部署之后后台的样式就没有了。&lt;/p&gt;</content><category term="devops"></category><category term="django"></category></entry><entry><title>Octopress 增加两个功能</title><link href="https://breakwire.me/add-two-new-features-for-octopress.html" rel="alternate"></link><published>2015-03-16T15:51:49+08:00</published><updated>2015-03-16T15:51:49+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-03-16:/add-two-new-features-for-octopress.html</id><summary type="html">&lt;p&gt;Octopress 增加两个功能&lt;/p&gt;</summary><content type="html">&lt;p&gt;之前又忍不住给 octopress 加了两个功能，都是参考郝海龙老师的一系列文章，一个是目录功能，还有一个是文章修改历史的功能。&lt;/p&gt;
&lt;p&gt;按照步骤一步步做下来没有什么问题，功能也是正常，效果也还不错，贴两张图看下效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="octopress1" src="/images/octopress1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="octopress2" src="/images/octopress2.png"&gt;&lt;/p&gt;
&lt;h3&gt;参考链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://shengmingzhiqing.com/blog/octopress-lean-modification-5.html/"&gt;Octopress 精益修改 (5)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="octopress"></category></entry><entry><title>Django web app 使用 uWSGI、Nginx 部署</title><link href="https://breakwire.me/deploy-django-web-app-with-uwsgi-and-nginx.html" rel="alternate"></link><published>2015-02-08T20:04:12+08:00</published><updated>2015-02-08T20:04:12+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-02-08:/deploy-django-web-app-with-uwsgi-and-nginx.html</id><summary type="html">&lt;p&gt;Django web app 使用 uWSGI、Nginx 部署&lt;/p&gt;</summary><content type="html">&lt;p&gt;Django 入门是挺简单的，这个框架把很多东西都给做好了在里面，但想要理解这个运作原理还是没那么简单的，有的东西刚开始也用不着，到后面要是应用需要的功能越来越多就要用到框架里更多组件了。前段时间刚好看到有人 Gitbook 上放了一个 Django 搭建简单 Blog 的一个教程，我就照着做了一下，发现错误挺多，还有的地方根本没讲清楚，框架包办很多事情但也不是这么简单吧，但也学到了一些之前不知道的框架里内置的很方便快捷的功能。我自己照着做了，然后基本还行，就是分类功能还有问题，我自己还要加个时间的功能，还有 RSS 订阅 我也没有搞定，不知道是怎么回事，但基本功能没问题，Markdown 写作，然后复制到后台里面就行了，我就准备放到 Linode 上了，虽然没有域名，先用 IP 凑合凑合，等功能完善了再买域名。&lt;/p&gt;
&lt;h3&gt;0. 原理&lt;/h3&gt;
&lt;p&gt;Nginx 作为服务器最前端，接受所有请求，静态请求，媒体文件由 Nginx 处理，非静态请求由 uWSGI 传递给 Django 处理。&lt;/p&gt;
&lt;h3&gt;1. 安装 Nginx&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install nginx
sudo /etc/init.d/nginx start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还有其他的用法&lt;code&gt;Usage: nginx {start|stop|restart|reload|force-reload|status|configtest}&lt;/code&gt;，后面每次修改站点的ngnix 配置文件都需要&lt;code&gt;reload&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;2. 安装 uWSGI&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python-dev
pip install uwsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我也不知道前面的 &lt;code&gt;python-dev&lt;/code&gt; 是干嘛的，但看别人说要不装就有可能要出错。 还有最后配置文件写在 XML 里面，还要装个 &lt;code&gt;libxml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libxml2-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. 测试 Django 应用是否能直接运行并更改为部署配置&lt;/h3&gt;
&lt;p&gt;整个项目放到服务器上，&lt;code&gt;python manage.py runserver 0.0.0.0:8000&lt;/code&gt;，在8000 这个端口上打开试试，运行没有问题就把项目里的&lt;code&gt;settings.py&lt;/code&gt;开发配置改成部署配置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;
&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 删掉这个配置项&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个地方要把 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; 删掉改成 &lt;code&gt;STATIC_ROOT = "/home/chen/DjangoProjects/static"&lt;/code&gt;, 然后在执行 &lt;code&gt;python manage.py collectstatic&lt;/code&gt;, 这一步会把一些静态文件全复制到项目的静态文件夹下，这个步骤如果不执行的话就会发现部署上去后台是看不到样式的。&lt;/p&gt;
&lt;h3&gt;4.  测试 uWSGI&lt;/h3&gt;
&lt;p&gt;在项目下面新建&lt;code&gt;test.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;uwsgi --http :8000 --wsgi-file test.py&lt;/code&gt;，在 &lt;code&gt;8000&lt;/code&gt; 端口打开试试，能出现 &lt;code&gt;Hello World&lt;/code&gt; 就没问题，这个地方由可能回出现一个 &lt;code&gt;libpcre&lt;/code&gt; 库 &lt;a href="http://www.linuxfromscratch.org/blfs/view/svn/general/pcre.html"&gt;PCRE-8.36&lt;/a&gt; 的问题，要自己下回来编译装上就行了。&lt;/p&gt;
&lt;h3&gt;5. &lt;code&gt;my_blog_wsgi.py&lt;/code&gt; uWSGI 配置文件&lt;/h3&gt;
&lt;p&gt;这个地方要是直接照抄各种中文博客到最后肯定都跑不起来，因为他们的 Django 版本太老了，这个地方还是查 stackoverflow 改了就整个跑起来了，&lt;a href="http://stackoverflow.com/questions/25537905/django-1-7-throws-django-core-exceptions-appregistrynotready-models-arent-load"&gt;Django 1.7 throws django.core.exceptions.AppRegistryNotReady: Models aren't loaded yet&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# my_blog_wsgi.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_wsgi_application&lt;/span&gt;    &lt;span class="c1"&gt;# Django 1.7 前是 from django.core.handlers.wsgi import WSGIHandler&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_blog.settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# “你的项目.settings”&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_wsgi_application&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# 1.7以前是 application = WSGIHandler()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;6. 配置 Nginx&lt;/h3&gt;
&lt;p&gt;首先由一个文件要复制到项目下面 可以从这里复制粘贴 &lt;a href="https://github.com/nginx/nginx/blob/master/conf/uwsgi_params"&gt;nginx/conf/uwsgi_params&lt;/a&gt;，也可以从 &lt;code&gt;/etc/nginx&lt;/code&gt; 里复制过去，可能权限要改下，还是直接自己 vi 粘贴比较好。&lt;/p&gt;
&lt;p&gt;第二步是站点的 nginx 配置文件，刚开始我照着别人的做，把这个文件放在自己的项目下，然后软连接上去，结果看 log 说我没有这个文件，然后在放到&lt;code&gt;/etc/nginx/sites-enabled&lt;/code&gt; 才行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;my_blog__nginx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;conf&lt;/span&gt;

&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;port&lt;/span&gt; &lt;span class="err"&gt;your&lt;/span&gt; &lt;span class="err"&gt;site&lt;/span&gt; &lt;span class="err"&gt;will&lt;/span&gt; &lt;span class="err"&gt;be&lt;/span&gt; &lt;span class="err"&gt;served&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;
       &lt;span class="err"&gt;listen&lt;/span&gt;      &lt;span class="err"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;domain&lt;/span&gt; &lt;span class="err"&gt;name&lt;/span&gt; &lt;span class="err"&gt;it&lt;/span&gt; &lt;span class="err"&gt;will&lt;/span&gt; &lt;span class="err"&gt;serve&lt;/span&gt; &lt;span class="err"&gt;for&lt;/span&gt;
       &lt;span class="err"&gt;server_name&lt;/span&gt; &lt;span class="err"&gt;XXX.XXX.XXX.XXX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;substitute&lt;/span&gt; &lt;span class="err"&gt;your&lt;/span&gt; &lt;span class="err"&gt;machine&amp;#39;s&lt;/span&gt; &lt;span class="err"&gt;IP&lt;/span&gt; &lt;span class="err"&gt;address&lt;/span&gt; &lt;span class="err"&gt;or&lt;/span&gt; &lt;span class="err"&gt;FQDN&lt;/span&gt;
       &lt;span class="err"&gt;charset&lt;/span&gt;     &lt;span class="err"&gt;utf-8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

       &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;max&lt;/span&gt; &lt;span class="err"&gt;upload&lt;/span&gt; &lt;span class="err"&gt;size&lt;/span&gt;
       &lt;span class="err"&gt;client_max_body_size&lt;/span&gt; &lt;span class="err"&gt;75M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;adjust&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;taste&lt;/span&gt;

       &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;logs&lt;/span&gt;
       &lt;span class="err"&gt;access_log&lt;/span&gt; &lt;span class="err"&gt;/home/chen/DjangoProjects/my_blog/logs/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="err"&gt;error_log&lt;/span&gt; &lt;span class="err"&gt;/home/chen/DjangoProjects/my_blog/logs/error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

       &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;Django&lt;/span&gt; &lt;span class="err"&gt;media&lt;/span&gt;
       &lt;span class="err"&gt;location&lt;/span&gt; &lt;span class="err"&gt;/media&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
               &lt;span class="err"&gt;alias&lt;/span&gt; &lt;span class="err"&gt;/home/chen/DjangoProjects/my_blog/media&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;your&lt;/span&gt; &lt;span class="err"&gt;Django&lt;/span&gt; &lt;span class="err"&gt;project&amp;#39;s&lt;/span&gt; &lt;span class="err"&gt;media&lt;/span&gt; &lt;span class="err"&gt;files&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;amend&lt;/span&gt; &lt;span class="err"&gt;as&lt;/span&gt; &lt;span class="err"&gt;required&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="err"&gt;alias&lt;/span&gt; &lt;span class="err"&gt;/home/chen/DjangoProjects/my_blog/static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;your&lt;/span&gt; &lt;span class="err"&gt;Django&lt;/span&gt; &lt;span class="err"&gt;project&amp;#39;s&lt;/span&gt; &lt;span class="err"&gt;static&lt;/span&gt; &lt;span class="err"&gt;files&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;amend&lt;/span&gt; &lt;span class="err"&gt;as&lt;/span&gt; &lt;span class="err"&gt;required&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Finally&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;send&lt;/span&gt; &lt;span class="nt"&gt;all&lt;/span&gt; &lt;span class="nt"&gt;non-media&lt;/span&gt; &lt;span class="nt"&gt;requests&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;Django&lt;/span&gt; &lt;span class="nt"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
       &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="err"&gt;uwsgi_pass&lt;/span&gt;  &lt;span class="err"&gt;XXX.XXX.&lt;/span&gt;&lt;span class="n"&gt;XXX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
               &lt;span class="err"&gt;include&lt;/span&gt;     &lt;span class="err"&gt;/home/chen/DjangoProjects/my_blog/uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;uwsgi_params&lt;/span&gt; &lt;span class="err"&gt;file&lt;/span&gt; &lt;span class="err"&gt;you&lt;/span&gt; &lt;span class="err"&gt;installed&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首页就在 &lt;code&gt;8000&lt;/code&gt; 这个端口上，&lt;code&gt;server_name&lt;/code&gt; 是 VPS 的 IP，&lt;code&gt;logs&lt;/code&gt; 文件夹要自己创建，哪都行，&lt;code&gt;/media /static&lt;/code&gt; 两个文件夹是静态请求，由 nginx 处理，其他非静态请求由 &lt;code&gt;uwsgi_pass&lt;/code&gt; 通过 socket 传递给 Django 处理，用的 8001 端口，&lt;code&gt;include&lt;/code&gt; 就是复制的那个文件，放在项目下。&lt;/p&gt;
&lt;h3&gt;7. &lt;code&gt;my_blog_socket.xml&lt;/code&gt; XML 配置文件&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;uwsgi&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;socket&amp;gt;&lt;/span&gt;XXX.XXX.XXX.XXX:8001&lt;span class="nt"&gt;&amp;lt;/socket&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;chdir&amp;gt;&lt;/span&gt;/home/chen/DjangoProjects/my_blog&lt;span class="nt"&gt;&amp;lt;/chdir&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;my_blog_wsgi&lt;span class="nt"&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;processes&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/processes&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;daemonize&amp;gt;&lt;/span&gt;/home/chen/DjangoProjects/my_blog/uwsgi.log&lt;span class="nt"&gt;&amp;lt;/daemonize&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/uwsgi&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;socket&lt;/code&gt; 就是刚才&lt;code&gt;my_blog_bginx.conf&lt;/code&gt; 里面的&lt;code&gt;uwsgi_pass&lt;/code&gt;通过socket 传递过来，&lt;code&gt;chdir&lt;/code&gt; 是项目文件夹，&lt;code&gt;module&lt;/code&gt; 是&lt;code&gt;my_blog_wsgi.py&lt;/code&gt; wsgi 配置文件，&lt;code&gt;processes&lt;/code&gt; nginx 分配四个线程，&lt;code&gt;daemonize&lt;/code&gt; 是日志文件，要是配置不成功，错误信息都在里面，什么 &lt;code&gt;libpcre&lt;/code&gt; 库没有啊，没有 app load 起来啊。&lt;/p&gt;
&lt;h3&gt;8. 最后一步&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/nginx reload
uwsgi -x my_blog_socket.xml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;reload&lt;/code&gt; 一下 nginx 的配置文件，然后用 xml 配置把 uwsgi 把应用挂起来，提示 &lt;code&gt;[uWSGI] parsing config file my_blog_socket.xml&lt;/code&gt;，然后到 &lt;code&gt;ip:8000&lt;/code&gt; 端口下看成不成功，不成功的话到项目的&lt;code&gt;uwsgi.log&lt;/code&gt; 最后面看，错误信息都在里面，然后去查。&lt;/p&gt;
&lt;h3&gt;9. 参考链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/e6ff4a28ab5a"&gt;基于nginx和uWSGI在Ubuntu上部署Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://django-china.cn/topic/101/"&gt;五步教你实现使用Nginx+uWSGI+Django方法部署Django程序(上)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://django-china.cn/topic/124/"&gt;五步教你实现使用Nginx+uWSGI+Django方法部署Django程序(下)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://simple-is-better.com/news/756"&gt;Nginx+uWSGI 部署 Django 应用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="devops"></category><category term="django"></category></entry><entry><title>基于 Octopress 和 GitHub 的个人博客搭建——配置及第三方插件配置问题</title><link href="https://breakwire.me/octopress-configuration.html" rel="alternate"></link><published>2014-11-20T18:54:53+08:00</published><updated>2014-11-20T18:54:53+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2014-11-20:/octopress-configuration.html</id><summary type="html">&lt;p&gt;基于 octopress 和 GitHub 的个人博客搭建——配置及第三方插件配置问题&lt;/p&gt;</summary><content type="html">&lt;p&gt;首先说一下 octopress 主目录下的文件结构，我不会 Ruby，也没有完全搞懂这个每个文件的作用和结构，就引用一下这篇 Blog：&lt;a href="http://812lcl.com/blog/2013/10/25/octopressbo-ke-da-jian-ji-mu-lu-jie-gou/"&gt;Octopress博客搭建及目录结构 - 812lcl的博客&lt;/a&gt;
由于 octopress 更新了，这篇 Blog 里面讲的有些旧了，新的文件我就自己修改说明了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;├─ config.rb  #指定额外的compass插件
├─ config.ru
├─ Rakefile   #rake的配置文件,类似于makefile 添加Tag 功能后要自动在编辑每篇Blog 时自动在前面添加tags: 提示
├─ Gemfile    #bundle要下载需要的gem依赖关系的指定文件
├─ Gemfile.lock  #这些gem依赖的对应关系,比如A的x版本依赖于B的y版本
├─ _config.yml   #站点的配置文件
├─ public/    #在静态编译完成后的目录,网站只需要这个目录下的文件树
├─ _deploy/   #deploy时候生成的缓存文件夹,和public目录一样
├─ sass/      #css文件的源文件,过程中会compass成css
├─ plugins/   #放置自带以及第三方插件的目录,ruby程序
│   └── xxx.rb
└─ source/    #站点的源文件目录,public目录就是根据这个目录下数据生成的
   └─ _includes/
      └─ custom/      #自定义的模板目录,被相应上级html include
         └─ asides/   #边栏模板自定义模板目录
      └─ asides/      #边栏模板目录
      └─ post/        #文章页面相应模板目录
   └─ _layouts/       #默认网站html相关文件,最底层
   └─ _posts/         #新增以及从其它程序迁移过来的数据都存在这里
   └─ images/         #图片目录 可手动添加，添加后Blog 应用图片可直接从这个文件中引用
└─ README.markdown    #octopress 说明
└─ CHANGELOG.markdown    # octopress 更新说明
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;0. &lt;code&gt;_config.yml&lt;/code&gt; 文件配置&lt;/h3&gt;
&lt;p&gt;主配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;url: http: //lsdlab.github.io   &lt;span class="c1"&gt;# Blog url&lt;/span&gt;
title: NO MAN&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;S LAND   &lt;span class="c1"&gt;# Blog 名称&lt;/span&gt;
subtitle: Too fast to live, too young to die.    &lt;span class="c1"&gt;# 副标题&lt;/span&gt;
author: Chen Jian    &lt;span class="c1"&gt;# 作者&lt;/span&gt;
simple_search: https://www.google.com/search    &lt;span class="c1"&gt;# 网站内搜索&lt;/span&gt;
description: coding freak, Mac, IOS, Unix, Linux, Microshit, Major in SE.   &lt;span class="c1"&gt;# Blog 介绍，SEO 相关&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;目录及第三方插件配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root: /    &lt;span class="c1"&gt;# 主目录&lt;/span&gt;
permalink: /blog/:year:month:day:/    &lt;span class="c1"&gt;# 每篇Blog 的url&lt;/span&gt;
source: &lt;span class="nb"&gt;source&lt;/span&gt;    &lt;span class="c1"&gt;# 站点源文件，写作目录&lt;/span&gt;
destination: public    &lt;span class="c1"&gt;# rake generate 生成的静态页面文件夹&lt;/span&gt;
plugins: plugins    &lt;span class="c1"&gt;# 第三方插件目录&lt;/span&gt;
tag_dir: tags    &lt;span class="c1"&gt;# 添加 tags 功能后必须添加的配置语句&lt;/span&gt;
markdown: kramdown    &lt;span class="c1"&gt;# markdown 语法，我给改了，后面会说到&lt;/span&gt;
hlghlghter: pygments    &lt;span class="c1"&gt;# 源代码高亮&lt;/span&gt;
paginate: &lt;span class="m"&gt;6&lt;/span&gt;    &lt;span class="c1"&gt;# 每页显示的文章数目&lt;/span&gt;
paginate_path: &lt;span class="s2"&gt;&amp;quot;post/:num&amp;quot;&lt;/span&gt;   &lt;span class="c1"&gt;# 根据文章列表显示的URL&lt;/span&gt;
recent_post: &lt;span class="m"&gt;6&lt;/span&gt;   &lt;span class="c1"&gt;# 侧边栏显示的最近文章数目&lt;/span&gt;
except_link: &lt;span class="s2"&gt;&amp;quot;Continue Reading &amp;amp;rarr;&amp;quot;&lt;/span&gt;    &lt;span class="c1"&gt;# 继续阅读按钮&lt;/span&gt;
except_separator: &lt;span class="s2"&gt;&amp;quot;&amp;lt;!--more--&amp;gt;&amp;quot;&lt;/span&gt;    &lt;span class="c1"&gt;# 在markdown 中假如 &amp;lt;!--more--&amp;gt; 可截断文章在新页面中继续阅读&lt;/span&gt;
titlecase: &lt;span class="nb"&gt;false&lt;/span&gt;   &lt;span class="c1"&gt;# 转换每篇文章的 title 至 titlecase&lt;/span&gt;
default_asides: &lt;span class="o"&gt;[&lt;/span&gt;custom/asides/about.html, asides/recent_posts.html, custom/asides/catagory_list.html, custom/asides/tags.html, asides/github.html&lt;span class="o"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;# 侧边栏定制导入HTML 文件，这个取决于主题支不支持，我用的 whitespace 主题有 about 页面，文章分类和标签侧边栏，其实这还不是侧边栏，一栏居中自适应，三个 asides 都跑到页面底部去了。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面就是第三方配置了，我只用了 GitHub还有 Twitter还有Google Analytics：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;github_user: lsdlab
github_repo_count: &lt;span class="m"&gt;0&lt;/span&gt;
github_show_profile_link: &lt;span class="nb"&gt;true&lt;/span&gt;
github_skip_forks: &lt;span class="nb"&gt;true&lt;/span&gt;

twitter_user: lsd
twitter_tweet_button: &lt;span class="nb"&gt;true&lt;/span&gt;

google_anaytics_tracking_id:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 navigation bar 右边会显示 GitHub 的图标和 RSS 订阅的图标，每个文章的全文右下方会显示 tweet 按钮，Google Anaytics 可以去申请一个 Tracking ID, 然后就能通过手机上的 Analytics 看到实时访问者，访问来源，访问量等等。&lt;/p&gt;
&lt;h3&gt;1. 文章分类功能&lt;/h3&gt;
&lt;p&gt;分类和标签是两种管理文件的方式，一种有序一种无序，有人喜欢我文件夹的管理方式，有人喜欢无序的标签。分类的方式得保证每一分文件都分好类了，分类也得是恰当的，但这个就会带来一个问题，不能保证每一个文件的分类都是恰当的，标签的出现恰好是解决了这个问题，不一定每一个文件都要分好类，都分恰当的了，分恰当了，那就太多类了，标签可以用来弥补这个缺点，无法快速准确分类的文件都用标签来标记，多标几个，方便以后查询使用。&lt;/p&gt;
&lt;p&gt;首先在 &lt;code&gt;/plugins&lt;/code&gt; 中新建一个 &lt;code&gt;category_list_tag.rb&lt;/code&gt;, 粘贴下面一段代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Jekyll&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CategoryListTag&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Liquid&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Tag&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
               &lt;span class="n"&gt;categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;registers&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:site&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;
               &lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
            &lt;span class="n"&gt;posts_in_category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;registers&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:site&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
                   &lt;span class="n"&gt;category_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;registers&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:site&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;category_dir&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
                   &lt;span class="n"&gt;category_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;category_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/_|\P{Word}/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/-{2,}/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;downcase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                   &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;li class=&amp;#39;category&amp;#39;&amp;gt;&amp;lt;a href=&amp;#39;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;category_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&amp;#39;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;posts_in_category&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
               &lt;span class="k"&gt;end&lt;/span&gt;
               &lt;span class="n"&gt;html&lt;/span&gt;
           &lt;span class="k"&gt;end&lt;/span&gt;
       &lt;span class="k"&gt;end&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt;
   &lt;span class="no"&gt;Liquid&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;category_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Jekyll&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CategoryListTag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二步是在 &lt;code&gt;/source/_includes/custom/asides/&lt;/code&gt; 添加一个 &lt;code&gt;category_list.html&lt;/code&gt;, 粘贴下面一段代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Categories&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;categories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       # 这个应该是花括号百分号 category_list 变量，我不能直接写，直接贴上来调用我的后台上的东西了，下面也有两个这样的变量
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第三步是在 &lt;code&gt;/_config.yml&lt;/code&gt; 中找到 &lt;code&gt;default_asides:&lt;/code&gt; 后面按照你自己的顺序添加 &lt;code&gt;custom/asides/category_list.html&lt;/code&gt;。 到这里就完成了，然后还有一个问题就是中文目录名，我没有用过中文目录名，但是后来看到了这个 &lt;a href="http://shengmingzhiqing.com/blog/octopress-lean-modification-5.html/#section"&gt;Octopress 精益修改 (5)&lt;/a&gt;，意识到还有一个中文的问题，怪不得看到有的人的文章 url 是中文拼音，目录也是这个道理。如果直接写成中文目录名称就会到时在目录列表里面不能链接到该分类的页面，需要在 &lt;code&gt;/plugins/category_list_tag.rb&lt;/code&gt; 中找到 &lt;code&gt;html &amp;lt;&amp;lt; "&amp;lt;li class='category'&amp;gt;&amp;lt;a href='/#{category_url}/'&amp;gt;#{category} (#{posts_in_category})&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;\n"&lt;/code&gt;，改成 &lt;code&gt;html &amp;lt;&amp;lt; "&amp;lt;li class='category'&amp;gt;&amp;lt;a href='/blog/categories/#{category.to_url.downcase}/'&amp;gt;#{category} (#{posts_in_category})&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;\n"&lt;/code&gt;，这里就正式完成了，点击中文目录的话应该会看到 url 链接到目录的全拼拼音。&lt;/p&gt;
&lt;h3&gt;2. 文章标签功能&lt;/h3&gt;
&lt;p&gt;首先需要复制两个插件还有一些其他文件：
&lt;a href="https://github.com/robbyedwards/octopress-tag-pages"&gt;https://github.com/robbyedwards/octopress-tag-pages&lt;/a&gt;
&lt;a href="https://github.com/robbyedwards/octopress-tag-cloud"&gt;https://github.com/robbyedwards/octopress-tag-cloud&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;octopress-tag-pages&lt;/code&gt;:
复制&lt;code&gt;tag_generator.rb&lt;/code&gt; 至&lt;code&gt;/plugins&lt;/code&gt; 下，&lt;code&gt;tag_index.html&lt;/code&gt; 至&lt;code&gt;/source/_layouts&lt;/code&gt; 下，&lt;code&gt;tag_feed.xml&lt;/code&gt; 至&lt;code&gt;/source/_includes/custom&lt;/code&gt; 下，一共三个文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;octopress-tag-cloud&lt;/code&gt;:
复制 &lt;code&gt;tag_cloud.rb&lt;/code&gt; 至 &lt;code&gt;/plugins&lt;/code&gt; 下，就这一个文件。&lt;/p&gt;
&lt;p&gt;第二步是添加下面的代码至 &lt;code&gt;/source/_includes/custom/asides/tags.html&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tags&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tag-cloud&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       # 这个也是，花括号百分号 tag_cloud font-size: 120-210%, limit: 20, style: para
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;font_size&lt;/code&gt; 标签大小，&lt;code&gt;limit&lt;/code&gt; 限定二十个，可以自己改。
最后一步是在 &lt;code&gt;/_config.yml&lt;/code&gt; 中的 &lt;code&gt;default_asides:&lt;/code&gt; 后添加 &lt;code&gt;custom/asides/category_list.html&lt;/code&gt;，大功告成。&lt;/p&gt;
&lt;p&gt;分类和标签功能都是参考的一个 Blog：
&lt;a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/"&gt;为octopress添加分类(category)列表&lt;/a&gt;
&lt;a href="http://codemacro.com/2012/07/18/add-tag-to-octopress/"&gt;为octopress添加tag cloud&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;3. Tag Cloud 功能&lt;/h3&gt;
&lt;p&gt;就是一个单独的页面显示所有的 Tag，首先生成一个页面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rake new_page&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tag-cloud&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;#在 `/source` 中生成一个 `/tag-cloud` 文件夹&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;ul &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tag-cloud&amp;quot;&lt;/span&gt;&amp;gt;# 花括号百分号 tag_cloud font-size: &lt;span class="m"&gt;120&lt;/span&gt;-210%, limit: &lt;span class="m"&gt;1000&lt;/span&gt;, style: para &amp;lt;/ul&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后是在增加一个新页面修改 &lt;code&gt;/source/_includes/custom/navigation.html&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main-navigation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ root_url }}/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ root_url }}/blog/archives&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Archives&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tag-cloud/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tag Cloud&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成。这个是参考的 &lt;a href="http://biaobiaoqi.me/blog/2013/07/10/decorate-octopress/"&gt;定制Octopress&lt;/a&gt; 第八个功能。&lt;/p&gt;
&lt;p&gt;全部整理好了，也不想加评论功能了，分享按钮什么的，有个 Tweet 按钮就差不多了，还有各种侧边栏，这个也得看主题，还是不要乱搞了，到时候主题看厌了想要换就要出问题了，这个就当是个笔记，以防除了问题要推倒重来，遇到各种问题还要再查资料，其实我来来回回推倒重来也有好几回了，差不多都记住了。&lt;/p&gt;
&lt;h3&gt;4. 参考链接&lt;/h3&gt;
&lt;p&gt;贴几个参考连链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/"&gt;为octopress添加分类(category)列表 - loop in codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://codemacro.com/2012/07/18/add-tag-to-octopress/"&gt;为octopress添加tag cloud - loop in codes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="octopress"></category></entry><entry><title>基于 Octopress 和 GitHub 的个人博客搭建——安装</title><link href="https://breakwire.me/octopress-install.html" rel="alternate"></link><published>2014-09-23T10:03:54+08:00</published><updated>2014-09-23T10:03:54+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2014-09-23:/octopress-install.html</id><summary type="html">&lt;p&gt;基于 octopress 和 GitHub 的个人博客搭建——安装&lt;/p&gt;</summary><content type="html">&lt;p&gt;Octopress 是基于 jeklly 的开源博客引擎，静态界面 + Markdown + Git + 不需要服务器，搭建于 GitHub Pages 托管，配置还是十分简单的。暑假的时候看到有人写过 Blog，也尝试了一下，遇到了各种各样问题。由于没有学过 Ruby，在添加各种插件的尝试中也是有各种问题，前后重复了不下二三十次，暑假的时候安装好了一次，也调整好了主题 CSS，上上周上课的时候也不知道改动了什么文件，就给彻底搞坏了，花了好久才修好 Orz。这过程中还顺带学了 Git，Terminal 和 Vim 都是十分酷的东西，把步骤整理一下备忘。&lt;/p&gt;
&lt;h3&gt;0.  Git 和 Ruby 环境&lt;/h3&gt;
&lt;p&gt;这两个可以用 Homebrew 安装，Homebrew 安装、使用参考&lt;a href="http://brew.sh/index_zh-cn.html"&gt;Homebrew&lt;/a&gt;。安装完成后查看版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git —version
ruby --version
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;1.  Octopress git clone 到本地&lt;/h3&gt;
&lt;p&gt;进入主目录 octopress 文件夹下安装相关依赖项及 Ruby 相关问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/imathis/octopress.git octopress
&lt;span class="nb"&gt;cd&lt;/span&gt; octopress
gem install bundler
rbenv rehash
bundle install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;gem install bundler&lt;/code&gt; 如提示权限问题这条命令可能要加上：&lt;code&gt;sudo&lt;/code&gt;。
&lt;code&gt;rbenv rehash&lt;/code&gt; 执行会提示没有这条命令，这个是 Ruby 的环境管理工具，也是通过 Homebrew 安装：&lt;code&gt;brew rbenv&lt;/code&gt;。
安装完成后检查是否可用：&lt;code&gt;rbenv -v&lt;/code&gt;。
如还有问题就参考这里：&lt;a href="http://www.jianshu.com/p/ACs3kA"&gt;Rbenv的一些使用记录&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;支线任务完成再次回到主线继续安装依赖项：
&lt;code&gt;bundle install&lt;/code&gt;
每当切换 Ruby 版本和执行 &lt;code&gt;bundle install&lt;/code&gt; 后都必须执行一次 &lt;code&gt;rbenv rehash&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;2. 继续安装默认主题或者是安装第三方主题&lt;/h3&gt;
&lt;p&gt;各种主题参考：&lt;a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes"&gt;3rd Party Octopress Themes&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rake install    &lt;span class="c1"&gt;# 安装默认主题&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我这里用的是 &lt;a href="https://github.com/lucaslew/whitespace"&gt;whitespace&lt;/a&gt; 主题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/lucaslew/whitespace.git .themes/whitespace
rake install&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;whitespace&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
rake generate    &lt;span class="c1"&gt;# 生成静态界面&lt;/span&gt;
rake preview    &lt;span class="c1"&gt;# localhost:4000 端口预览，预览完成 Ctrl+C&lt;/span&gt;
rake deploy    &lt;span class="c1"&gt;# 部署&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. 在 GitHub 上进行部署&lt;/h3&gt;
&lt;p&gt;GitHub 创建一个 repository，名为&lt;code&gt;yourBlogname.github.io&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rake setup_github_pages    &lt;span class="c1"&gt;# input your repository&amp;#39;s url&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后就是用Git 本地文件上传至GitHub 仓库：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .    &lt;span class="c1"&gt;# 工作区全部修改提交至暂存区&lt;/span&gt;
git commit -m &lt;span class="s2"&gt;&amp;quot;first commit&amp;quot;&lt;/span&gt;    &lt;span class="c1"&gt;# 添加commit 信息&lt;/span&gt;
git push origin &lt;span class="nb"&gt;source&lt;/span&gt;   &lt;span class="c1"&gt;# 提交至source 分支&lt;/span&gt;
rake deploy    &lt;span class="c1"&gt;# 部署&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到这里结束就已经搭建完成了，但是里面什么东西都没有。 octopress 目录中&lt;code&gt;_config.yml&lt;/code&gt; 是配置文件，里面保存这配置信息，博客名称，第三方组件设置信息，这个就留着第二篇在写吧。&lt;/p&gt;
&lt;p&gt;还有就是建立电脑 SSH Key 链接到 GitHub 的问题，很容易，直接看 GitHub 的英文说明都能看得懂：&lt;a href="https://help.github.com/articles/generating-ssh-keys"&gt;Generating SSH Keys&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;4. 发布文章&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rake new_post&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;# 生成 source/_post/YYYY-MM-DD-title.markdown 文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编辑好文章之后从第四步的 &lt;code&gt;git add .&lt;/code&gt;，接下来四个命令就完成了文章的发布。&lt;/p&gt;
&lt;h3&gt;5. 参考链接&lt;/h3&gt;
&lt;p&gt;当时自己搭建的时候各种问题都遇到了也查了很多其他人 Blog，贴几个连接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sumnous.github.io/blog/2014/05/11/octopress-build-blog-on-github/"&gt;Octopress Build Blog on Github 个人建站实录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/"&gt;象写程序一样写博客：搭建基于github的博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="octopress"></category></entry></feed>