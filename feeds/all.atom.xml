<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>BreakWire</title><link href="https://breakwire.me/" rel="alternate"></link><link href="//feeds/all.atom.xml" rel="self"></link><id>https://breakwire.me/</id><updated>2017-04-05T16:59:22+08:00</updated><entry><title>AwesomeCoffice 微信小程序</title><link href="https://breakwire.me/awesomecoffice-weixin-mini-app.html" rel="alternate"></link><published>2017-04-05T16:59:22+08:00</published><updated>2017-04-05T16:59:22+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2017-04-05:/awesomecoffice-weixin-mini-app.html</id><summary type="html">&lt;p&gt;Swift 学得太慢，iOS App 也不是那么容易就做出来的，就先写个微信小程序玩玩了&lt;/p&gt;</summary><content type="html">&lt;p&gt;微信小程序的底层应该是和各种 MVC 的 JS 框架类似，刚出来的时候不支持个人开发者，上个月底刚宣布支持个人开发者，然后我就想把我的这个产品先用微信小程序做个雏形出来。花了几天时间完成了 API，基本功能也做得差不多了，然后就想部署上去，才发现还有个严重的问题，需要备案，非常麻烦，顿时就不想部署了，但毕竟还是写了的，不部署就不部署吧，代码放到 GitHub 上了：&lt;a href="https://github.com/lsdlab/AwesomeCoffice"&gt;lsdlab/AwesomeCoffice&lt;/a&gt;，它有它背靠大树的优势，但还是限制太多，没法和原生应用比，甚至是和移动网页应用都还比不上，我还是把精力放到靠谱的东西上吧。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="/images/awesome_coffice_weixin_mini_app/1.png"&gt;
&lt;img alt="2" src="/images/awesome_coffice_weixin_mini_app/2.png"&gt;
&lt;img alt="3" src="/images/awesome_coffice_weixin_mini_app/3.png"&gt;
&lt;img alt="4" src="/images/awesome_coffice_weixin_mini_app/4.png"&gt;
&lt;img alt="5" src="/images/awesome_coffice_weixin_mini_app/5.png"&gt;
&lt;img alt="6" src="/images/awesome_coffice_weixin_mini_app/6.png"&gt;
&lt;img alt="7" src="/images/awesome_coffice_weixin_mini_app/7.png"&gt;
&lt;img alt="8" src="/images/awesome_coffice_weixin_mini_app/8.png"&gt;
&lt;img alt="9" src="/images/awesome_coffice_weixin_mini_app/9.png"&gt;
&lt;img alt="10" src="/images/awesome_coffice_weixin_mini_app/10.png"&gt;
&lt;img alt="11" src="/images/awesome_coffice_weixin_mini_app/11.png"&gt;
&lt;img alt="12" src="/images/awesome_coffice_weixin_mini_app/12.png"&gt;
&lt;img alt="13" src="/images/awesome_coffice_weixin_mini_app/13.png"&gt;&lt;/p&gt;</content><category term="projectx"></category></entry><entry><title>Spendingviz 1.0</title><link href="https://breakwire.me/spengdingviz1.0.html" rel="alternate"></link><published>2016-11-25T20:53:32+08:00</published><updated>2016-11-25T20:53:32+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-11-25:/spengdingviz1.0.html</id><summary type="html">&lt;p&gt;我的第一个自用产品 Spendingviz 1.0 完工啦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/lsdlab/spendingviz"&gt;lsdlab/spendingviz&lt;/a&gt; 现在这个只能自己用用，数据库从 MongoDB 换到了 PostgreSQL，已有一个用户就是我自己，就我自己用用，不开放注册。接下来就开始用 Python 重写，用 Flask，要有给移动设备的 API，那些实用功能我觉得还是不要在网页上做了，网页上就看些大的统计图，实用功能就只放到 iOS App 上做。还要赶快开始学点 Swift，但在做之前得把后端完成，还不太好做，我想要这个后端能够自动对备注进行分类，做自然语言处理，还要有点机器学习能力，能预测支出，然后才开始做 iOS App，希望这个【巨大】的项目能在年前开工，17 年年底能作出个雏形出来，包括 iOS App 和 Web 端网页还有后端，对了，这两个小项目用 Node.JS 写的，感觉不是太好，可能还是用的太少，我也准备弃用了，后面就写 Python 和 Rails 了，前端方面就只打算在学学 Vue 就行了，其他不再看了。&lt;/p&gt;</content><category term="projectx"></category></entry><entry><title>PostgreSQL 命令笔记</title><link href="https://breakwire.me/postgresql-note.html" rel="alternate"></link><published>2016-09-03T13:41:36+08:00</published><updated>2016-09-03T13:41:36+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-09-03:/postgresql-note.html</id><summary type="html">&lt;p&gt;这玩意要多坑有多坑……&lt;/p&gt;</summary><content type="html">&lt;h2&gt;本地&lt;/h2&gt;
&lt;p&gt;PostgreSQL 光要让它跑起来就挺麻烦的，Mac 上很方便，就 &lt;code&gt;brew install postgresql&lt;/code&gt;，然后 &lt;code&gt;initdb /usr/local/var/postgres -E utf8&lt;/code&gt; 初始化数据库。&lt;/p&gt;
&lt;p&gt;我在 &lt;code&gt;~/.zshrc&lt;/code&gt; 里面设置了两个 alias 快速启动停止：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;pgstart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;pgstop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pg_ctl -D /usr/local/var/postgres stop -s -m fast&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还有个非常好用的命令行工具 &lt;a href="https://github.com/dbcli/pgcli/"&gt;pgcli&lt;/a&gt;，有自动补全命令功能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brew services&lt;/code&gt; 也能设置开机启动和手动启动停止。&lt;/p&gt;
&lt;p&gt;Mac 上有个坑就是 PostgreSQL 版本不同需要迁移数据，这个好解决，随便 Google 下就行了。&lt;/p&gt;
&lt;h2&gt;VPS&lt;/h2&gt;
&lt;h3&gt;安装 创建用户 密码&lt;/h3&gt;
&lt;p&gt;debian 的 VPS 上直接 &lt;code&gt;sudo apt-get install postgresql&lt;/code&gt; 就行了，我也不知道为什么刚开始我这么装了之后，安装成功，但是根本没启动起来，最后也不知道怎么搞的就又好了。&lt;/p&gt;
&lt;p&gt;安装好了之后切到 Linux 的 postgres 用户下，创建一个新用户，设置密码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo su postgres
createuser --interactive
    chen
    y

psql
&lt;span class="se"&gt;\p&lt;/span&gt;assword chen
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;启动 停止 重启&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/postgresql start
/etc/init.d/postgresql stop
/etc/init.d/postgresql restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;远程连接&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vi /etc/postgres/9.5/main/postgresql.conf
     &lt;span class="nv"&gt;listen_addresses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# 改成&lt;/span&gt;
     &lt;span class="nv"&gt;listen_addresses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;

sudo vi /etc/postgres/9.5/main/pg_hba.conf
     host all all &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/32 md5 &lt;span class="c1"&gt;# 下面加一行&lt;/span&gt;
     host all all &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0/0 md5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后重启一下就能远程连接了。&lt;/p&gt;
&lt;h2&gt;创建数据库、表 连接 导出 导入&lt;/h2&gt;
&lt;h3&gt;创建数据库&lt;/h3&gt;
&lt;p&gt;前面已经建了 &lt;code&gt;chen&lt;/code&gt; 这个用户，直接在这个用户的 shell 下面新建或者删除数据库：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;createdb spending-vis
dropdb spending-vis
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者在 pgcli 里面操作，直接在 shell 里面输入 &lt;code&gt;pgcli&lt;/code&gt; 会默认用当前 Linux 的用户名，作为用户名和数据库名称去连接，所以在前面新建用户的时候就要在 &lt;code&gt;postgres&lt;/code&gt; 用户下把 &lt;code&gt;chen&lt;/code&gt; 这个数据库也创建好。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;create database &lt;span class="s2"&gt;&amp;quot;spending-vis&amp;quot;&lt;/span&gt;
drop database &lt;span class="s2"&gt;&amp;quot;spending-vis&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;命令都有自动补全，很方便。&lt;/p&gt;
&lt;h3&gt;创建表&lt;/h3&gt;
&lt;p&gt;创建一个 entry 表，id 字增主键：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;serial&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;categoryid&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt; &lt;span class="nb"&gt;DATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;year&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;month&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;day&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;note&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;连接&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql
psql -U Chen -d Chen
psql -U Chen -d spending-vis

pgcli
pgcli -U Chen -d Chen
pgcli -U Chen -d spending-vis

pgcli -h &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 -U chen -W -d spending-vis
    password:
&lt;span class="se"&gt;\l&lt;/span&gt;
&lt;span class="se"&gt;\d&lt;/span&gt;u
&lt;span class="se"&gt;\d&lt;/span&gt;t
&lt;span class="se"&gt;\d&lt;/span&gt; entry
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;导出 导入&lt;/h3&gt;
&lt;p&gt;导出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pg_dump -f spending-vis-postgresql.sql spending-vis
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;导入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql -d spending-vis -f export-postgresql/spending-vis-postgresql.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本地机器导出之后要导入到 VPS 上，本地用户名为 &lt;code&gt;Chen&lt;/code&gt;，VPS 上是 &lt;code&gt;chen&lt;/code&gt;，要在 &lt;code&gt;.sql&lt;/code&gt; 里面改一下，VPS 要先建好数据库，然后导入。
还有个坑就是导入的语句，数据库里面有个字段是能够为空的，导入的时候就报错了，没办法，我只能把那个字段写成了 &lt;code&gt;无备注&lt;/code&gt;，然后就能导入了。&lt;/p&gt;
&lt;h2&gt;postgrest&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/begriffs/postgrest"&gt;postgrest&lt;/a&gt; 这个工具挺好，把现有的 PostgreSQL 数据库直接变成一个 RESTful API。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./postgrest postgres://user:password@localhost:5432/spending-vis &lt;span class="se"&gt;\&lt;/span&gt;
          --port &lt;span class="m"&gt;3000&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
          --schema public &lt;span class="se"&gt;\&lt;/span&gt;
          --anonymous postgres &lt;span class="se"&gt;\&lt;/span&gt;
          --pool &lt;span class="m"&gt;200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直接就能 GET 获得 JSON&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://localhost:3000/entry
http://localhost:3000/entry?date&lt;span class="o"&gt;=&lt;/span&gt;eq.2014-06-01
http://localhost:3000/entry?year&lt;span class="o"&gt;=&lt;/span&gt;eq.2014&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;eq.6
&lt;/pre&gt;&lt;/div&gt;</content><category term="devops"></category></entry><entry><title>开个新坑</title><link href="https://breakwire.me/spending-vis-development-log-0.html" rel="alternate"></link><published>2016-08-06T15:37:47+08:00</published><updated>2016-08-06T15:37:47+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-08-06:/spending-vis-development-log-0.html</id><summary type="html">&lt;p&gt;要做个自己每天都用的产品&lt;/p&gt;</summary><content type="html">&lt;p&gt;之前有几个 side project idea 都因为水平有限，做个雏形就放那儿不做了，后来想想也挺烂的，还好没做。现在终于有一个我觉得不错的点子，我也每天都会在手机上用到的，嫌现有的都不能满足自己需求。&lt;/p&gt;
&lt;p&gt;手机上的记账 App 实在太多，我也用了不少，最早从用 Sony Xpreria S 的时候用的随手记，用到最后也嫌麻烦了，太难看，两年多的数据也没留下来，可惜了。后来换上 iPhone，开始用 Next for iPhone，就是功能太弱，只能用图表分类，记录个金额和备注，有些统计和图表。&lt;/p&gt;
&lt;p&gt;具体要做什么就不多写了，简单说就是一个满足我的需求的记账 App。后端自己做，桌面 Web 端做些数据可视化，iOS App 也需要做，简单能用就行，重点放在后端的数据分析上，也学学统计学。&lt;/p&gt;
&lt;h3&gt;2016/07/26&lt;/h3&gt;
&lt;p&gt;用 datatables 的表格基本完成了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="表格" src="/images/spendingviz/tables.png"&gt;&lt;/p&gt;
&lt;h3&gt;2016/08/6&lt;/h3&gt;
&lt;p&gt;以年、月为单位的统计条形图和折线图基本完成了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="年" src="/images/spendingviz/charts-year.png"&gt;
&lt;img alt="月" src="/images/spendingviz/charts-month.png"&gt;&lt;/p&gt;</content><category term="spending-vis"></category><category term="dev-log"></category></entry><entry><title>又部署了一遍 Django</title><link href="https://breakwire.me/deploy-django-app.html" rel="alternate"></link><published>2016-07-29T11:11:59+08:00</published><updated>2016-07-29T11:11:59+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-07-29:/deploy-django-app.html</id><summary type="html">&lt;p&gt;又部署了一遍 Django&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Ubuntu -- 14.04&lt;/li&gt;
&lt;li&gt;Django -- 1.9.8&lt;/li&gt;
&lt;li&gt;Nginx -- 1.4.6&lt;/li&gt;
&lt;li&gt;uwsgi -- 2.0.13.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ubuntu 上要依赖三个东西 python-dev, libxml2-dev, pcre。&lt;/p&gt;
&lt;p&gt;libxml2-dev 是用来解析 uwsgi 的 .xml 脚本的，pcre 是 Perl 的正则表达式解析库，Django 解析 URL 的，python-dev 我也不知道是干什么的&lt;/p&gt;
&lt;p&gt;Nginx 开个 80 端口，uwsgi_pass 传给 8001 这个端口，uwsgi 在通过这里把 Django 跑起来。&lt;/p&gt;
&lt;h3&gt;1. Nginx 配置 &lt;code&gt;/etc/nginx/sites-enabled/my_app.conf&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;# the port your site will be served on&lt;/span&gt;
       &lt;span class="kn"&gt;listen&lt;/span&gt;      &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="c1"&gt;# the domain name it will serve for&lt;/span&gt;
       &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;IP&lt;/span&gt; &lt;span class="s"&gt;OR&lt;/span&gt; &lt;span class="s"&gt;DOMAIN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# substitute your machine&amp;#39;s IP address or FQDN&lt;/span&gt;
       &lt;span class="kn"&gt;charset&lt;/span&gt;     &lt;span class="s"&gt;utf-8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

       &lt;span class="c1"&gt;# max upload size&lt;/span&gt;
       &lt;span class="kn"&gt;client_max_body_size&lt;/span&gt; &lt;span class="s"&gt;75M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;# adjust to taste&lt;/span&gt;

       &lt;span class="c1"&gt;# logs&lt;/span&gt;
       &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/home/chen/my_app/logs/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="kn"&gt;error_log&lt;/span&gt; &lt;span class="s"&gt;/home/chen/my_app/logs/error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

       &lt;span class="c1"&gt;# Django media&lt;/span&gt;
       &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/media&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/home/chen/my_app/media&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# your Django project&amp;#39;s media files - amend as required&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/home/chen/my_app/static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# your Django project&amp;#39;s static files - amend as required&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="c1"&gt;# Finally, send all non-media requests to the Django server.&lt;/span&gt;
       &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt;  &lt;span class="s"&gt;IP&lt;/span&gt; &lt;span class="s"&gt;OR&lt;/span&gt; &lt;span class="s"&gt;DOMAIN:8001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
               &lt;span class="kn"&gt;include&lt;/span&gt;    &lt;span class="s"&gt;/home/chen/my_app/uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# the uwsgi_params file you installed&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. Django 项目下需要从 Nginx 源码中复制出一份 &lt;code&gt;uwsgi_params&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;QUERY_STRING&lt;/span&gt;       &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;query_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;REQUEST_METHOD&lt;/span&gt;     &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;CONTENT_TYPE&lt;/span&gt;       &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;CONTENT_LENGTH&lt;/span&gt;     &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;content_length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;REQUEST_URI&lt;/span&gt;        &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;PATH_INFO&lt;/span&gt;          &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;document_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;DOCUMENT_ROOT&lt;/span&gt;      &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;document_root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;SERVER_PROTOCOL&lt;/span&gt;    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;server_protocol&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;REQUEST_SCHEME&lt;/span&gt;     &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;HTTPS&lt;/span&gt;              &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt; &lt;span class="n"&gt;if_not_empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;REMOTE_ADDR&lt;/span&gt;        &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;REMOTE_PORT&lt;/span&gt;        &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;remote_port&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;SERVER_PORT&lt;/span&gt;        &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;server_port&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;uwsgi_param&lt;/span&gt;  &lt;span class="n"&gt;SERVER_NAME&lt;/span&gt;        &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;server_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. Django 项目下需要一个 &lt;code&gt;my_app_wsgi.py&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_wsgi_application&lt;/span&gt;    &lt;span class="c1"&gt;# Django 1.7 前是 from django.core.handlers.wsgi import WSGIHandler&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my_app.settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# “你的项目.settings”&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_wsgi_application&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# 1.7以前是 application = WSGIHandler()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4. uwsgi 启动脚本 &lt;code&gt;my_app_socket.xml&lt;/code&gt; 放在 Django 项目下&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;uwsgi&amp;gt;
       &amp;lt;socket&amp;gt;IP OR DOMAIN:8001&amp;lt;/socket&amp;gt;
       &amp;lt;chdir&amp;gt;/home/chen/my_app&amp;lt;/chdir&amp;gt;
       &amp;lt;module&amp;gt;my_app_wsgi&amp;lt;/module&amp;gt;
       &amp;lt;processes&amp;gt;4&amp;lt;/processes&amp;gt;
       &amp;lt;daemonize&amp;gt;/home/chen/my_app/uwsgi.log&amp;lt;/daemonize&amp;gt;
&amp;lt;/uwsgi&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后重启 Nginx，启动 uwsgi 的脚本 load Django App&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nginx -s reload
uwsgi -x  my_app_socket.xml
&lt;/pre&gt;&lt;/div&gt;</content><category term="devops"></category></entry><entry><title>关于离开南京的决定</title><link href="https://breakwire.me/the-desicion-about-leaving-nanjing.html" rel="alternate"></link><published>2016-07-04T22:42:43+08:00</published><updated>2016-07-04T22:42:43+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-07-04:/the-desicion-about-leaving-nanjing.html</id><summary type="html">&lt;p&gt;我倒是想离开地球来着……&lt;/p&gt;</summary><content type="html">&lt;h2&gt;这四年干了啥&lt;/h2&gt;
&lt;p&gt;在南京上了四年学，八流民办本科，最后连两张「纸」都没有拿到。专业选修少 2.5 个学分，结业处理，拖一个学期把学分补上就能拿，这事也挺讽刺的。对我没什么影响，该干嘛干嘛。我也没有觉得对我去什么公司造成了什么影响，因为我知道自己的水平，「歧视学校」、「歧视学历」这种事情根本轮不上我。&lt;/p&gt;
&lt;p&gt;15 年十月份开始实习，南京的一个小前端团队，从一个对前端的理解还停留在静态页面的菜鸟，成为一个对前端开发稍稍有点入门的菜鸟，方法论，前端开发的思想都学到了点。入职两个月的时候收到正式 offer，薪酬虽不比南京的某些「血汗工厂」，但综合考虑到时薪和付出的精力、时间，我还是比较满意的。当时也没急着接下来，因为大三下学期开始找实习的时候我是一心想着要去上海或者苏州。九月份接到过一个上海比特币中国的 Python 开发实习面试，无论是在技术上和行业知名度上都非常不错。但因为个人水平的问题，尽管最后说是能来实习，但实习补贴较低，低到维持上海的基本生存都够呛，也在上海玩了两天，深感大城市的压力，直接推掉然后接受了南京的这个实习工作。&lt;/p&gt;
&lt;p&gt;四月份的时候其实是和实习的团队答应了留下来，因为也没辙了。想去苏州就找人内推同城旅游，蜗牛就算了，人只招三年以上经验的，同城电面之后没下文了，本来觉得南京也有几个公司可以一去的，但连面试都没刷上，索性放弃。五月初的时候因为要交论文，从住处到学校也挺远的，跑了五六次，很不爽。正好刷论坛刷到一个南通的朋友在招人，就找到微信，约了见面聊，正好家里也有事，回家一趟，也见了面，聊了，还行，想了两天就决定了，回吧。&lt;/p&gt;
&lt;p&gt;回南京后就和团队的人说了，同事说你要是想尝试就去尝试，回家肯定得遇到很多你预料到的没预料到的事情，你自己也做好准备接受就行，南京这边你想回来也可以。因为学校的事情也就这样了，没必要再呆着了，和前同事道匆忙道别，提前打包东西撤了。&lt;/p&gt;
&lt;h2&gt;为什么&lt;/h2&gt;
&lt;p&gt;做这个决定前我刷了很多知乎，我觉得最有用的一条就是这个 &lt;a href="http://daily.zhihu.com/story/7436000"&gt;留在大城市还是回到小城市，列个式子算一下&lt;/a&gt;。计算效用的六个因素，前三个因素都与事业、工作有关，如果设计了比较好的模型的话是能够计算出数值的，因为里面的参数都是可量化的。后三个因素呢，涉及到个人、家庭、感情，就比较难量化了，有人是独身主义者，有人是丁克，有人不想和父母住在一起，甚至连呆在一个城市都不行，有人对于城市文化、历史底蕴、文明程度、教育资源非常看重。后三个参数如果要设计模型的话就有很多的参数，而且参数数量不定，计算出可能千差万别。我觉得最终量化这个效用出一个数字来还是挺复杂的，但是呢，能算出一个偏向那个选择更加合适还是可以的。从我个人角度上来说，我更倾向于在前三个因素中获得较高的效用，后三个我会在前三个有较好的基础之后尽力去做，现在回来也是一样，计划可能会变，加快或者变慢，细节上的变动，但是战略并没有改变。&lt;/p&gt;
&lt;p&gt;离开南京回到南通，我不想说太多我有多少牺牲，或者得到什么，人想要什么不想要什么都是随时会变，对于我这样在某些方面也有些自信的人来说，也不是我说想要就能达到的，保持对未知的敬畏，同时也有自信和能力去发掘未知。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个人的命运当然要靠自己奋斗，当然，历史的选择也是很重要的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;王垠的 &lt;a href="http://www.yinwang.org/blog-cn/2016/06/19/leaving-united-states"&gt;关于离开美国的决定&lt;/a&gt;，简单来说就是王垠觉得自己怀才不遇，虽然有吃有喝有女友，耽误了女友在国内的学业，然后供其出国读书，然后还分手了。但现在依然是有女友的，人家还有美国绿卡，他自己呢，钱也挣了不少，但都花了，供前女友读书生活，买不起湾区的房子，被前公司迫害，想回中国吃烧烤。&lt;/p&gt;
&lt;p&gt;隔了两天王垠又不回国了……&lt;a href="http://www.yinwang.org/blog-cn/2016/06/22/plan-change"&gt;两个计划的变动&lt;/a&gt;，原来我也可能是这样，作出一个决定，然后隔两天，又反悔了，现在呢我也不好这么搞了，已经回了南通，入职两周，感觉良好，修了点已有的 Rails 应用的 bug，大部分其实我也没怎么明白，Rails 的黑魔法真多，有点懵，然后开始写 Python，写嵌入式硬件和服务器间的脚本，写起来也挺头疼，Python 忘得差不多，但我还是挺乐意继续学 Python，Rails 虽然基本没怎么写，但我也感受出其厉害之处了，也值得一学，也为自己的开源、Side Project 制定了计划，希望能够完成。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但行好事，莫问前程。&lt;/p&gt;
&lt;p&gt;MacTalk 池建强&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="fml"></category></entry><entry><title>博客托管迁移、HTTPS 加持</title><link href="https://breakwire.me/secure-with-https.html" rel="alternate"></link><published>2016-06-21T23:19:19+08:00</published><updated>2016-06-21T23:19:19+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-06-21:/secure-with-https.html</id><summary type="html">&lt;p&gt;博客托管迁移、HTTPS 加持&lt;/p&gt;</summary><content type="html">&lt;p&gt;博客迁移到 Vultr VPS 上了，然后加上 &lt;a href="https://letsencrypt.org"&gt;Let's Encrypt&lt;/a&gt; 的免费 SSL 证书，速度好像是比放在 GitHub 上快了点。显示参考的小众软件 &lt;a href="http://www.appinn.com/use-letsencrypt-with-nginx/"&gt;在 Nginx 上使用 Let’s Encrypt 加密(HTTPS)你的网站[简明教程]&lt;/a&gt;，但是 Nginx 配置的地方 &lt;code&gt;ssl_ciphers&lt;/code&gt; 好像是不对，后来参考这个&lt;a href="https://blog.qualys.com/ssllabs/2013/08/05/configuring-apache-nginx-and-openssl-for-forward-secrecy"&gt;链接&lt;/a&gt; 能够配置成功，Chrome 能出现绿色的小锁。然后就是把 HTTP 的请求也重定向到 HTTPS 上，这步照着小众软件做是对的。最后一步是自动续签脚本，照着小众软件的做是不行的，就参考这个 &lt;a href="https://github.com/xdtianyu/scripts/blob/master/lets-encrypt/README-CN.md"&gt;一个快速获取/更新 Let's encrypt 证书的 shell script&lt;/a&gt;，设置好，就等到九月份看它能不能自动续签了。&lt;/p&gt;
&lt;p&gt;GitHub Pages 现在也提供 HTTPS 了，域名解析是用的 DNSPod，把 A 记录设置成 VPS 的 IP 就行了，停用 CNAME 解析，把静态文件的目录里的 CNAME 也删掉，这样两个网址&lt;a href="https://breakwire.me"&gt;https://breakwire.me&lt;/a&gt; &lt;a href="https://lsdlab.github.io"&gt;https://lsdlab.github.io&lt;/a&gt; 都是 HTTPS 加持了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="secure-with-https" src="/images/secure-with-https.png"&gt;&lt;/p&gt;</content><category term="devops"></category></entry><entry><title>I'm done here</title><link href="https://breakwire.me/i-am-done-here.html" rel="alternate"></link><published>2016-06-08T17:17:50+08:00</published><updated>2016-06-08T17:17:50+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-06-08:/i-am-done-here.html</id><summary type="html">&lt;p&gt;See your guys later or we will never see each ever again.&lt;/p&gt;</summary><content type="html">&lt;p&gt;半年多前端做下来的成果，208 个 commits 和 107 个 merge request，半年多从前端菜鸟到也算是新手了，Node.js, Express, React 等等都接触了些，也算不错。&lt;/p&gt;
&lt;p&gt;&lt;img alt="282-commits" src="/images/282-commits.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="107-pr" src="/images/107-pr.png"&gt;&lt;/p&gt;
&lt;p&gt;前公司没得说，工作上也算轻松，时间非常自由，空闲的时候就学学新东西，摸鱼抓虾，时不时下个馆子等等。同事相处的也挺好，老板也很好，都是值得学习的榜样。正式全职薪酬在南京的话，对于应届生来说已经是非常不错的了。不需要和南京的某些所谓的「大厂」以及「血汗工厂」相比，那样是完全没有可比性的。南京一堆外包大厂，某些人还冲着名头「大公司」就去了，实习生就「996」，工资低还要做很多事情，技术规范、水平，远达不到「大公司」的水平；南邮的研究生去华为，批发价一万，只要不是 special offer，基本都是这个价。谁想来燃烧青春请尽管来南京，就冲着南京的华为中兴，还有诸多外包大厂，前面的能燃烧自己以换取更多金钱，后面的燃烧自己只能南京 GDP 做贡献了，金钱就别想了。&lt;/p&gt;
&lt;p&gt;学校的事情也就这样了，也没法搞了，专业选修少 2.5 个学分，两张厕纸都不如的东西还得晚一个学期才能拿到，不过也无所谓啦，晚就晚呗，我又不靠这个挣钱。我也问过了，也不影响入职的手续，社保什么的都不影响交。&lt;/p&gt;
&lt;p&gt;本来说是二十号左右回去，没必要在这边呆着了就早点回去呗。明天收拾东西能快递的快递，后天老爹来接我，然后就约朋友玩玩，把书房弄起来，桌子椅子显示器全买上，就是一个 home office 啦，学学 Rails，二十号入职，对于新环境我已经迫不及待啦，尽管也也有一些很麻烦的事情要面对，但是总是要处理&lt;/p&gt;</content><category term="fml"></category></entry><entry><title>Screw you, i'm going home</title><link href="https://breakwire.me/screw-you-i-am-going-home.html" rel="alternate"></link><published>2016-06-02T23:20:14+08:00</published><updated>2016-06-02T23:20:14+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-06-02:/screw-you-i-am-going-home.html</id><summary type="html">&lt;p&gt;Actually, i don't wanna go home neither......&lt;/p&gt;</summary><content type="html">&lt;p&gt;前段时间工作、生活的状态都非常差，尝试 React 封装项目中的组件，用 React 写一个很复杂的页面，很难写，很头疼。学校里还有一些事情要处理，再加上个人的心理状态很差，强行休假一周，正好回家一趟，在家思考下人生，约了人谈谈，看有没有机会回去工作。&lt;/p&gt;
&lt;p&gt;和同事聊天说这个事情，我想回去和人聊聊，看看有没有机会。然后同事问我主要诉求，我没法回答，对我来说不是一个事情满足了主要诉求就能作出决定的，太多事情都是很多因素共同作用所导致的结果。我不可能因为一个公司给的钱很多，都超过了我的水平的价值了，我就看在钱的份上就直接去了。要综合考虑各个方面的因素，得失利弊，没法选择一个最好的，只能根据当下的情况选择一个最适合的。也有一种什么情况呢，因为个人的原因，就看中了一个点，这个点对我个人来讲占很大的比重，但这并不是主要诉求，也有其他一个在别人看来不重要的点，但我就是不能接受，也有可能拒绝这个机会。&lt;/p&gt;
&lt;p&gt;这篇博客写了跨度一个多礼拜，家也回了，也和潜在雇主详谈了，各个方面，做的事情，机会，薪酬。从实际衡量上讲，房租、物价、消费水平，在两边开到相同甚至是潜在雇主开到的工资要更高的情况下，回家的确是要获得更多的金钱效益，但从长远发展上来讲是有一定的影响，入职一个新工作，新公司，就得想着下一份工作，我希望在现在这份工作中获得多少成长，下一份工作雇主在行业中的影响力以及名气，薪酬要达到什么水平。要这么考虑的话回家绝对是一个很烂的选择，现在找到了一个工作，也不错，薪酬甚至比这边还要高，也有挺大发挥空间，但创业的事情要是做不成呢？做砸了，下一份工作在哪里呢？当然，也不是说回到小城市就不能再出去了，一个人的职业生涯成长主要还是靠个人能力，做事的能力，况且还是如此自由透明的互联网行业。&lt;/p&gt;
&lt;p&gt;最终还是作出了决定，回家。接下来的一至两年我会将大部分精力投入到公司，投入到创业项目中。技术方面，Python 不会放弃，会继续学，还有数据分析，统计学的入门，基础需要补。做 Rails 开发，前端也会继续学继续做，但不会深入学习，不会去尝试学习曲线过于陡峭，更新过快的东西。设计方面我也会学，学 Sketch，模仿画原型。其他方面我会继续多看互联网文化方面的书，尝试自己写这方面的博客，或者是做播客，还有视频，尝试剪辑 GoPro 视频，也留着自己看看。&lt;/p&gt;
&lt;p&gt;六月二十号学校的事情应该都能够结束，这半个月也会在公司做收尾工作，写些博客，整理整理资料，留着给以后的新人快速配好开发环境，熟悉项目结构。&lt;/p&gt;
&lt;p&gt;后面的事情就再说啦~&lt;/p&gt;</content><category term="fml"></category></entry><entry><title>过度思考 Over thinking</title><link href="https://breakwire.me/over-thinking.html" rel="alternate"></link><published>2016-01-14T23:02:31+08:00</published><updated>2016-01-14T23:02:31+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2016-01-14:/over-thinking.html</id><summary type="html">&lt;p&gt;Don't over thinking, OK?!&lt;/p&gt;</summary><content type="html">&lt;p&gt;写代码很多的时候都是在思考循环，给定输入、边界条件 (edge case)，获得输出，输入容易，剩下来就是如何抽象出一个循环的过程，构造边界条件了。根据不同的输入，为了让这个程序有尽可能强的容错能力，就需要好好思考如何构造边界条件了。&lt;/p&gt;
&lt;h2&gt;过度思考的例子&lt;/h2&gt;
&lt;p&gt;15 年暑假学了两个月的 Android 开发，网络请求获得 JSON 数据之后解析，解析可能会有网络的问题，可能服务端构造 JSON 就错了，移动端解析也解不出来，总之有很多种异常要去 catch()，能把每项异常都想到然后要写代码捕捉错误，根据不同的情况是要重试还是直接提示用户出错了，出错提示信息怎么写？真的把不同的出错原因 Toast 给用户说这个出错了那个出错了吗？用户根本不想知道，你只要告诉我出错了就行，不要告诉我具体原因。你要显示不同的出错信息的话，专业用户可能知道如何解决，是找你报错还是自己的网络原因重试能解决，可专业用户太少，根本没有必要过度思考做的这么细。&lt;/p&gt;
&lt;h2&gt;非专业知识的过度思考&lt;/h2&gt;
&lt;p&gt;实习了也得有三个多月了，刚开始感觉有点难度，逐渐上手，挺开心，又感觉有难度了，前端怎么这么坑！慢慢摸索，看书，不断尝试，又感觉上手了，挺开心，但一定是要继续做前端吗？也不一定，甚至都不一定要做这一行，不做前端做啥？Python 后端也不错，iOS 也不错，都想做，专门研究一个，变成这个语言的专家，可行；研究各种各样的小东西，自己倒腾，也行，没什么对于职业生涯利不利的，其实还没真正上手，成为一名工程师就考虑这些问题？有点过了吧？&lt;/p&gt;</content><category term="thinking"></category></entry><entry><title>2015</title><link href="https://breakwire.me/2015.html" rel="alternate"></link><published>2015-12-31T10:21:39+08:00</published><updated>2015-12-31T10:21:39+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-12-31:/2015.html</id><summary type="html">&lt;p&gt;This year was absolute shitty year for me......&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;大四。&lt;/li&gt;
&lt;li&gt;四月份开始找实习。&lt;/li&gt;
&lt;li&gt;面南京的一家公司，挂了。&lt;/li&gt;
&lt;li&gt;电话面试北京一家创业公司，挂了。&lt;/li&gt;
&lt;li&gt;去苏州两趟，感觉良好，环境，城市规划方面。&lt;/li&gt;
&lt;li&gt;这两家实习工资开太低，推了。&lt;/li&gt;
&lt;li&gt;学校安排的两个月的毫无任何用处的强制课程忍了两个月，感受了北上广般的每天四小时花在通勤上。&lt;/li&gt;
&lt;li&gt;去上海一趟面比特币中国，顿感压力山大，滚回南京接受了现在的实习工作。&lt;/li&gt;
&lt;li&gt;开始实习头一个月看代码比较困惑。&lt;/li&gt;
&lt;li&gt;搬家到离公司近的地方。&lt;/li&gt;
&lt;li&gt;又聊了一家南京的公司，被拒，虽然工资高，但算上辛苦程度，还是不划算。&lt;/li&gt;
&lt;li&gt;追求女生被发卡，我还借人情债给人安排了工作，还好老子问好了能不能追，不然浪费更多精力。&lt;/li&gt;
&lt;li&gt;工作两个多月，逐渐上手，能给正式 Offer，薪酬合理，准备接受。&lt;/li&gt;
&lt;li&gt;算账到炸裂，上四年学花了近十八万，工作两年是能挣回来，但对这个效率我还是不满意。&lt;/li&gt;
&lt;li&gt;16年需要全面提高效率，没什么可担心的，完成工作，刷几本经典教材，英文教材，刷 LeetCode，还有 Python。&lt;/li&gt;
&lt;li&gt;kindle可以买一个，PDF 可以在电脑上看。现在手上的 iPad mini 2 和 iPhone 5c 可以都出掉，加钱换部 iPhone 6s，虽然我很舍不得我的粉红色 iPhone 5c。&lt;/li&gt;
&lt;/ul&gt;</content><category term="fml"></category></entry><entry><title>JavaScript 模块化开发</title><link href="https://breakwire.me/javascript-development-in-module.html" rel="alternate"></link><published>2015-11-19T00:50:23+08:00</published><updated>2015-11-19T00:50:23+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-11-19:/javascript-development-in-module.html</id><summary type="html">&lt;p&gt;JavaScript 模块化开发&lt;/p&gt;</summary><content type="html">&lt;p&gt;两种规范，&lt;a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88)"&gt;AMD 异步模块定义&lt;/a&gt; 和 &lt;a href="https://github.com/seajs/seajs/issues/242"&gt;CMD 通用模块定义&lt;/a&gt;。
实现了这两个规范的库分别是 &lt;a href="http://requirejs.org/"&gt;RequireJS&lt;/a&gt; 和 &lt;a href="http://seajs.org/docs/"&gt;SeaJS&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;目的&lt;/h2&gt;
&lt;p&gt;模块化 JavaScript 开发。比如我需要在搜索页面放个翻页器，搜索结果二十万是准确数字，要显示出第一页和最后一页，随着当前的页数变化，只显示当前页的前后两页，包括首页和末页，要维护这个状态是很复杂的，基本不可能，只能是直接动态生成这个状态。输入结果数量，传入模块，模块动态生成翻页器，当前页的选中状态，输出整个翻页器。&lt;/p&gt;
&lt;h2&gt;区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;AMD 将模块依赖全部写在 JS 文件的开头，浏览器加载模块，异步加载这个模块指定的依赖，全部加载完成后执行回调；CMD 模块依赖是就近原则，不需要在文件最头部指定，就近指定依赖就近加载。&lt;/li&gt;
&lt;li&gt;其他区别我也没看出来，参照链接：&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20351507/answer/14859415"&gt;AMD 和 CMD 的区别有哪些？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/21347409#answer-2323656"&gt;YUI Modules 与 AMD/CMD，哪一种方式更好？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.youyo.name/archives/commonjs-amd-cmd-my-opinion.html"&gt;commonJS\AMD\CMD和我的看法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://justineo.github.io/singles/writing-modular-js/"&gt;使用 AMD、CommonJS 及 ES Harmony 编写模块化的 JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/seajs/seajs/issues/277"&gt;与 RequireJS 的异同&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zhihu.com/question/20342350"&gt;LABjs、RequireJS、SeaJS 哪个最好用？为什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lifesinger.wordpress.com/2011/05/17/the-difference-between-seajs-and-requirejs/"&gt;SeaJS 和 RequireJS 的异同&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;RequireJS&lt;/h2&gt;
&lt;h3&gt;What&lt;/h3&gt;
&lt;p&gt;定义模块之间的依赖，并异步加载这些模块，当所有依赖都被满足之后，RequireJS 会执行预定义的回调函数。&lt;/p&gt;
&lt;h3&gt;define()&lt;/h3&gt;
&lt;p&gt;定义模块，不带扩展名作为模块的名称。&lt;/p&gt;
&lt;h3&gt;require()&lt;/h3&gt;
&lt;p&gt;加载依赖。&lt;/p&gt;
&lt;p&gt;参数一：数组，每一项都是一个模块的名称
参数二：函数，与数组相对应&lt;/p&gt;
&lt;p&gt;保证所有的依赖（数组中的模块）被加载完成之后才会执行回调函数。&lt;/p&gt;
&lt;p&gt;underscore.js 在 RequireJS 中的 config 方法中配置模块名称与实际模块之间的映射关系：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;underscore&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;libs/underscore/underscore&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;shims&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;underscore&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;path 中可以省略扩展名 &lt;code&gt;.js&lt;/code&gt;，shims 中暴露出 &lt;code&gt;_&lt;/code&gt; underscore。&lt;/p&gt;
&lt;p&gt;具体的模块内部怎么写，能写啥，如何调用下次再写。&lt;/p&gt;</content><category term="javascript"></category></entry><entry><title>Python 基本类型及方法</title><link href="https://breakwire.me/python-types-and-methods.html" rel="alternate"></link><published>2015-08-25T13:47:21+08:00</published><updated>2015-08-25T13:47:21+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-08-25:/python-types-and-methods.html</id><summary type="html">&lt;p&gt;Python 基本类型及方法&lt;/p&gt;</summary><content type="html">&lt;h2&gt;内建 6 种序列&lt;/h2&gt;
&lt;p&gt;列表、元组、字符串、Unicode 字符串、buffer 对象、xrange 对象。&lt;/p&gt;
&lt;h2&gt;正文序列类型 str&lt;/h2&gt;
&lt;p&gt;字符串有穷序列 不可变 immutable。
操作：求长度，取成员，切字串（切片），查找字串，判断成员字符类型。
基于已有字符串构造新串：改变大小写，拼接， 格式化，字串替换，切片。&lt;/p&gt;
&lt;h3&gt;字符串方法&lt;/h3&gt;
&lt;h4&gt;join() split()&lt;/h4&gt;
&lt;p&gt;互为逆方法，作用分别为在字符串序列中规律添加元素，在字符串中删除规律元素，将字符串分割成单个序列：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1+2+3+4+5&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Using the default&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Using&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;the&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不带任何参数的 split()，所有空格符（空格，Tab，换行）都分隔开。还有其他方法：lsplit,rsplit&lt;/p&gt;
&lt;h4&gt;其他操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;input() raw_input()&lt;/li&gt;
&lt;li&gt;+  拼接字符串， 字符串表示 str 和 repr，将值转换为字符串的两种机制，一个是使用 str() 函数转换成合理形式的字符串，repr() 是创建一个字符串，以合法到的 Python 表达式形式来表示值。&lt;/li&gt;
&lt;li&gt;长字符串可用三个引号代替普通括号；原始字符串，需要显示路径需要很多的斜杠，不想要用太多转义符的地方，以 &lt;code&gt;r&lt;/code&gt; 开头，如 &lt;code&gt;r'/User/Chen/PythonProjects'&lt;/code&gt;；Unicode 字符串以 &lt;code&gt;u&lt;/code&gt; 开头，用 &lt;code&gt;decode()&lt;/code&gt; 和 &lt;code&gt;encode()&lt;/code&gt; 进行解码。&lt;/li&gt;
&lt;li&gt;字符串格式化 % ，设置宽度精度，左右对其，填充0&lt;/li&gt;
&lt;li&gt;替换 ，translate() 处理单个字符，可同时进行，replace() 替换所有匹配项&lt;/li&gt;
&lt;li&gt;strip() 返回去除两侧（不包括内部）空格的字符串，lstrip() rstrip() 左右。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;序列类型 list tuple&lt;/h2&gt;
&lt;p&gt;通用序列操作：索引，切片，加，乘，检查成员资格，长度，最大值，最小值。还有个最重要的操作迭代，以后单独讲。&lt;/p&gt;
&lt;h3&gt;列表 可变 mutable&lt;/h3&gt;
&lt;p&gt;任意元素序列，支持所有共有的序列操作。
所有可变序列操作（改变当前列表）：元素替换（复制），切变，替换/删除，元素插入删除。&lt;/p&gt;
&lt;h4&gt;切片&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;切片区间是左闭右开；支持负索引&lt;/li&gt;
&lt;li&gt;最后一个元素是 -1&lt;/li&gt;
&lt;li&gt;复制整个列表左右索引都为空，前索引后索引可有一个为空&lt;/li&gt;
&lt;li&gt;默认步长为 1，大于 1 的步长如 4，指的是每 4 个元素的第一个，负数步长就是反过来提取。&lt;/li&gt;
&lt;li&gt;a[1, 2, 3, 4, 5]：取偶数位置：a[1::2]，从索引 1 开始，取每两个元素的第一个&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;基本操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;序列相加（返回新序列，不改变原序列）；乘法，*；返回新序列；成员资格，in/not in；长度，最小值，最大值。&lt;/li&gt;
&lt;li&gt;通过索引、切片改变列表，元素赋值，删除元素使用 del 语句。&lt;/li&gt;
&lt;li&gt;list() 函数，适用于所有类型的序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;列表方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;append() 在末尾追加新的对象&lt;/li&gt;
&lt;li&gt;count() 统计某元素出现的次数&lt;/li&gt;
&lt;li&gt;extend() listB.extend(listB)在末尾一次性追缴另一个列表中的多个值，原位置操作(in-place operation)&lt;/li&gt;
&lt;li&gt;index() 匹配元素的第一个索引值&lt;/li&gt;
&lt;li&gt;insert() insert(3, "insert")，在原序列索引 3 前插入元素，等价于切片赋值 list[3:3] = "insert"&lt;/li&gt;
&lt;li&gt;pop() 移除最后一个元素，并返回，可以 用来实现栈这个数据结构，后进先出，LIFO&lt;/li&gt;
&lt;li&gt;remove() 移除第一个匹配项&lt;/li&gt;
&lt;li&gt;reverse() 将元素反向存放&lt;/li&gt;
&lt;li&gt;sort() 原位置排序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;元组 不可变 无方法&lt;/h3&gt;
&lt;p&gt;任意元素有穷序列，一个元组的成员可以为不同类型的对象   &lt;strong&gt;序列共有操作&lt;/strong&gt;：成员判断(in, not in)，取元素/切片，和长度，元素检索/计数，最大/最小，拼接/重复拼接（产生新序列）。
不变序列唯一特殊操作 hash，从任意个不变序列产生一个整数。
不变序列可作为字典的关键码，可作为 set/forzenset 的元素。&lt;/p&gt;
&lt;h2&gt;集合类型 set  forzenset&lt;/h2&gt;
&lt;p&gt;任意满足条件的元素的汇集。
forzenset 支持所有不变集合操作：元素个数，元素判断，集合之间的关系（包含/香蕉），集合运算（并/交/差/对称差）。
set 还支持可变集合操作，修改集合的运算（并/交/差/对称差），加入/删除元素
集合的元素只能至不可变对象，可求出 hash 值。&lt;/p&gt;
&lt;h2&gt;映射类型 dict&lt;/h2&gt;
&lt;p&gt;字典 一组关键码到一组值的映射。
基本操作：添加键值对，检索键值对。
其他操作：元素个数，键存在，元素删除（基于键），其它修改字典的操作。&lt;/p&gt;
&lt;h3&gt;字典基本操作&lt;/h3&gt;
&lt;p&gt;长度，将值关联到键上，依据键取值，依据键删除键值对，依据键检查键值对是否存在于字典中。&lt;/p&gt;
&lt;p&gt;字典和列表的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;键类型：整型，浮点，字符串，或元组等&lt;strong&gt;任何不可变类型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;自动添加：键不存在于字典中，可以为其分配一个默认值，列表 append() 方法不能在索引之外简历新项。&lt;/li&gt;
&lt;li&gt;成员资格：&lt;code&gt;for k in d&lt;/code&gt; 依据键查找字典中的键值对，&lt;code&gt;for v in l&lt;/code&gt; 查找列表中的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;字典方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;dict() 用键值对或者映射和关键字参数简历字典&lt;/li&gt;
&lt;li&gt;clear() 清除字典中所有项，原地操作，无返回值。&lt;/li&gt;
&lt;li&gt;copy() 浅拷贝(shallow copy)，返回一个键值对一样的字典，值就是本身，和深拷贝(deep copy)还是有区别的，用深拷贝的情况较多，后面单独讲。&lt;/li&gt;
&lt;li&gt;fromkeys() 依据给定的键简历新的字典，默认值为 None，也可以自己指定默认值。&lt;/li&gt;
&lt;li&gt;get() 宽松的访问字典项方法，访问不存在的键，返回默认值 None，也可指定默认值。&lt;/li&gt;
&lt;li&gt;has_key() 检查是否有给定的键。&lt;/li&gt;
&lt;li&gt;items() 和 iteritems() items() 将字典项以列表的形式返回，无序；iteritems() 返回一个迭代器对象，更为高效，迭代器对象可以用来进一步筛选操作。&lt;/li&gt;
&lt;li&gt;keys() iterkeys() 和上面一样，分别返回键的列表和迭代器。&lt;/li&gt;
&lt;li&gt;values() itervalues() 分别返回值的列表和迭代器。&lt;/li&gt;
&lt;li&gt;pop() 移除给定键的键值对，并返回。&lt;/li&gt;
&lt;li&gt;popitem() 移除随机一个键值对，并返回。&lt;/li&gt;
&lt;li&gt;setdefault() 获得给定键的值，不存在时设定键值，默认值 None。&lt;/li&gt;
&lt;li&gt;update() 用一个字典更新另一个字典，相同键会覆盖。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;其他数据结构&lt;/h2&gt;
&lt;p&gt;deque&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Django Tricks</title><link href="https://breakwire.me/django-tricks.html" rel="alternate"></link><published>2015-07-14T15:14:14+08:00</published><updated>2015-07-14T15:14:14+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-07-14:/django-tricks.html</id><summary type="html">&lt;p&gt;Django Tricks&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://shinyzhu.iteye.com/blog/593427"&gt;Django 新手需要注意的十个要点&lt;/a&gt;
新手建议，可以参考，第四点我还是没明白，看了别人的代码都是把各种业务逻辑写在 &lt;code&gt;views.py&lt;/code&gt;，怎么写到另外的地方。&lt;/p&gt;
&lt;h2&gt;1. 硬编码&lt;/h2&gt;
&lt;p&gt;像导航栏上的各种项目，需要进行跳转，或者静态文件，媒体文件，需要从开发环境部署上线 的时候就很麻烦。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;    &lt;span class="c1"&gt;# 项目的根目录，其它的模板文件，静态文件，媒体文件都是根据 `BASE_DIR`&lt;/span&gt;

&lt;span class="c1"&gt;# Template dir&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;templates/account/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;templates/garage/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;templates/review/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 每个 App 的模板文件都放在统一的 `templates` 下面的每个 App 文件夹下&lt;/span&gt;

&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;/var/www/static/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;STATIC_URL&lt;/code&gt; 是用来在模板里面载入静态的媒体文件，图片，音频，视频，用法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% load staticfiles %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;quot;&lt;/span&gt;&lt;span class="na"&gt;my_app&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;myexample&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jpg&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;%}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个地方还是把图片文件放在了项目下的 &lt;code&gt;static&lt;/code&gt; 文件夹，每个 App 单独一个文件夹。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- loading Bootstrap core CSS --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ STATIC_URL }}css/bootstrap.min.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- loading customise CSS --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ STATIC_URL }}css/base_customise.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CSS, JS 文件设置，注意 &lt;code&gt;css&lt;/code&gt; 前没有 &lt;code&gt;/&lt;/code&gt;，在 &lt;code&gt;STATIC_URL&lt;/code&gt; 中已经有了斜杠。
第二个 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; 我还没明白到底是干什么的，文档里面写的是设置不同的静态文件目录，不绑定给特定的 App 用（看了半天英文还是没有明白……不过这个是必须要设置的，不设置那就找不到 CSS 和 JS 文件了）。部署到线上的的话就要把 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; 换成 &lt;code&gt;STATIC_ROOT = "/home/chen/DjangoProjects/static"&lt;/code&gt;，服务器上的文件夹。&lt;/p&gt;
&lt;h2&gt;2. URL&lt;/h2&gt;
&lt;p&gt;URL 设置 &lt;code&gt;urls.py&lt;/code&gt; 放在每个 App 下面，除非 App 真的很小，功能很少那放在和 &lt;code&gt;settings.py&lt;/code&gt; 一个文件夹下的 &lt;code&gt;urls.py&lt;/code&gt; 也没问题，一旦 App 大了之后给每个 App 单独设置 URL，和 &lt;code&gt;models.py&lt;/code&gt; &lt;code&gt;views.py&lt;/code&gt; 一起在 App 文件夹下，这样能够重用 App 到不通的项目中，在项目的 &lt;code&gt;urls.py&lt;/code&gt; 中设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;garage.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;garage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的 &lt;code&gt;namespace&lt;/code&gt; 是给在模板中直接调用 URL 用的，避免硬编码&lt;/p&gt;
&lt;p&gt;{% raw %}&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-brand&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% url &amp;#39;garage:index&amp;#39; %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;BookGarage&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;p&gt;硬编码的问题我最早也纠结了很久，还在上线到服务器的时候掉到坑里了，还好也爬上来了。&lt;/p&gt;
&lt;h2&gt;3. 其他&lt;/h2&gt;
&lt;p&gt;其他建议比如：不要将项目名称包含在一引用代码中，这样不利于重用（我也没见过有人会这么做）。
部署的时候不要忘记将 &lt;code&gt;DEBUG&lt;/code&gt; 设置改成 &lt;code&gt;False&lt;/code&gt;。
调试能够借助一些第三方工具获取更多的信息，&lt;a href="https://github.com/robhudson/django-debug-toolbar"&gt;django-debug-toolbar&lt;/a&gt;，前段时间是 Django 的十周年，调查显示这个工具用的人非常多。
还能用 &lt;a href="http://jinja.pocoo.org/2/"&gt;Jinja2&lt;/a&gt; 这个模板系统替换自带的模板系统，作者是 Flask 的作者，也是 Flask 的一部分。
13 年的文章里面很多的链接都没用了，我也不知道这个到底是什么情况。&lt;/p&gt;</content><category term="django"></category></entry><entry><title>LINUX 101 HACKS 中有用的技巧</title><link href="https://breakwire.me/linux-101-hacks-notes.html" rel="alternate"></link><published>2015-07-05T14:02:10+08:00</published><updated>2015-07-05T14:02:10+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-07-05:/linux-101-hacks-notes.html</id><summary type="html">&lt;p&gt;Linux 101 HACKS 中有用的技巧&lt;/p&gt;</summary><content type="html">&lt;p&gt;很多有用的实用技巧，原书是英文，很久很久前哈工大的一些学生的学习资料，他们一些学生翻译的，记录些我自己现在用到的 tricks，非鸟哥的那本书上讲到的基础的东西。&lt;/p&gt;
&lt;h2&gt;cd&lt;/h2&gt;
&lt;h3&gt;设置 cd 的根目录，就是最最常用的目录，写入到 &lt;code&gt;~/.bash_profile&lt;/code&gt; 中，能在任何目录下快速切换&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CDPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;cd 和 alias 配合快速返回多级上层目录&lt;/h3&gt;
&lt;p&gt;进入了很深的目录想要向上返回两级或者三级就很麻烦，要写很多 &lt;code&gt;../../..&lt;/code&gt;，特别麻烦，把这个写入到 &lt;code&gt;~/.bash_profile&lt;/code&gt; 中就很方便用了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;cd1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cd ..&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;cd2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cd ../..&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;cd3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cd ../../..&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;cd4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cd ../../../..&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;cd5&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cd ../../../../..&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置了五层，应该够用的，命令的简写怎么自己方便怎么来，也可以直接写成点 &lt;code&gt;..&lt;/code&gt; &lt;code&gt;...&lt;/code&gt; &lt;code&gt;....&lt;/code&gt;，也可以前面加个 cd，&lt;code&gt;cd..&lt;/code&gt; &lt;code&gt;cd...&lt;/code&gt; &lt;code&gt;cd....&lt;/code&gt;，又或者 &lt;code&gt;..&lt;/code&gt; &lt;code&gt;..2&lt;/code&gt; &lt;code&gt;..3&lt;/code&gt;，还是第一种最好使。&lt;/p&gt;
&lt;h3&gt;创建新目录的同时进入目录&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;~/.bash_profile&lt;/code&gt; 中添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; mkdircd &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; mkdir -p &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;quot;\$&lt;/span&gt;&lt;span class="nv"&gt;$#&lt;/span&gt;&lt;span class="s2"&gt;\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;history&lt;/h2&gt;
&lt;h3&gt;Ctl + R 搜索历史命令&lt;/h3&gt;
&lt;h3&gt;四种方式快速执行前一条命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;方向键上&lt;/li&gt;
&lt;li&gt;!!&lt;/li&gt;
&lt;li&gt;!-1&lt;/li&gt;
&lt;li&gt;Ctrl + P&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有很多很多的内容我也没法总结，只是照着练习了一下，还没在真正的服务器部署维护中使用过，没那么复杂的环境。&lt;/p&gt;</content><category term="*nix"></category></entry><entry><title>（译文）为什么编程很难</title><link href="https://breakwire.me/translate-why-programming-is-difficult.html" rel="alternate"></link><published>2015-06-28T04:06:42+08:00</published><updated>2015-06-28T04:06:42+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-06-28:/translate-why-programming-is-difficult.html</id><summary type="html">&lt;p&gt;Programming is difficult like a shit!&lt;/p&gt;</summary><content type="html">&lt;p&gt;很多年前我认为编程是简单的，后来我意识到编程并不简单，因为在我思考什么是编程和程序员做的事情的过程中慢慢有了转变。&lt;/p&gt;
&lt;p&gt;最开始我认为编程只需要告诉计算机做什么，这部份编程还是相对容易的。在实践了二十年后我认为这部份编程也很容易。&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG1" src="https://joearms.github.io/images/program.png"&gt;&lt;/p&gt;
&lt;p&gt;定义 1：程序是将输入转化成输出的东西
程序员就是编写程序的人，编写程序是一门艺术。
现在给程序的定义添加一些限制。&lt;/p&gt;
&lt;p&gt;定义 2：程序是将输入转化为输出的东西，需要遵循一下限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序的输出是优美的。&lt;/li&gt;
&lt;li&gt;程序的输入是优美的。&lt;/li&gt;
&lt;li&gt;程序是优美的。&lt;/li&gt;
&lt;li&gt;程序的输入是完整正确、文档化的。&lt;/li&gt;
&lt;li&gt;程序是被测试和证明正确的。&lt;/li&gt;
&lt;li&gt;问题解决的结果是具体说明的。&lt;/li&gt;
&lt;li&gt;问题是具体说明的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加了这些限制之后编程变得相当困难了。
对于一个特定的问题，这些限制可是适当放宽。
一些常见的场景是这样的：&lt;/p&gt;
&lt;h3&gt;不需要维护的程序&lt;/h3&gt;
&lt;p&gt;我们经常要写只需要一次输出结果的程序，在这样的情况下，在以后程序不需要维护，所以程序不需要特别优美和描述清楚。
我的 Erlang 书就是一个例子，一旦这本书出版了，维护输入和制作这本书的程序就没有必要了，结果看起来很好，很多的 XML 文件和一些测试程序将来不需要维护。
这本书的勘误表，以及在重新复印过程中的必要的修改，只需要涉及到很少的改变，这样的输入修改是很容易的，即使程序的输入不是文档化的。&lt;/p&gt;
&lt;h3&gt;需要维护的程序&lt;/h3&gt;
&lt;p&gt;对于有些需要维护的程序，程序的输入以及程序本身必须是优美的以及良好文档化的。
之前我也一位开发 Web 应用的顾问聊天，他说只要程序的输出看起来是正确的（比如网页看起来正常，程序运行正常。），顾客将会认为这个项目已经结束了，项目经理将着手进行接下来的其他项目。
没有时间和理解这样的观点：不仅仅是网站看起来正常，而且在开始下个项目前产生这个网站的代码也要清楚冗余和文档化。这是为所有将来需要维护的项目制定的要求。&lt;/p&gt;
&lt;h3&gt;其他使编程变得困难的事情&lt;/h3&gt;
&lt;p&gt;还有其他三件事情使编程变得困难：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修复本不应该损坏的东西&lt;/li&gt;
&lt;li&gt;没有时间学习新的东西&lt;/li&gt;
&lt;li&gt;恶劣的编程环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些都是“时间小偷”&lt;/p&gt;
&lt;h4&gt;修复不应该损坏的东西&lt;/h4&gt;
&lt;p&gt;我经常需要使用别人的软件，我不是非常理解为什么它能解决一个特定的问题。
最好的情况，我需要使用的程序由一个准确的描述告诉我如何使用，但是经常发生的情况是程序没有描述或者由一个错误的描述。
当文档告诉你说 ”执行 XYZ 然后 PQR 就会发生“，但是当你照做了 ”XYZ“ 但是 ”PQR“ 没有发生时你怎么做？如果你幸运的话写这个程序的人在你周围那你就能够掐死他们，如果失败了那你也能在 Google 上搜索试试运气，又或者看看源代码试着找到答案。
用 Google 搜索去解决一个 bug 和赌博一样十分令人沮丧，我 Google 搜索了一阵，发现一篇帖子，一个可怜的人也遇到了和我一模一样的问题 ，我高兴极了，点开链接……什么都没有，问题还留着。
为什么有些修改对有的人有效但对我没用，是不是怀有恶意的上帝在盯着我，或者我所在的大学的一块地方的物理定律暂时改变了？两台机器的初始环境不一样，所以在一台机器的一种环境中解决了一个问题，到另一台不同环境的机器上就不能使用同样的方法。
就像我希望我们都写 Smalltalk 程序，我们都用相同的环境，Smalltalk 程序员必须呆在一个天堂似地环境中，但这是不可能的，当他们的程序需要和其他程序通讯的时候他们就明白了。
修复损坏的东西是让人双倍沮丧的事情，即使你解决了一个 bug ，你也不能真正知道你为解决这个问题或者使之生效的最后一个修改是什么。
这些事情我估计占据我百分之六十至七十的时间。一次我花了一周的时间尝试使一个损坏的 LDAP 服务器恢复工作，我的老板禁止我实现自己的 LDAP 服务器，但是经过一周的时间与这个用 C 实现，没有良好的文档，损坏的 LDAP 服务器折腾之后，我意外忘记了我的老板说的话，在午休的间隙从零开始实现了一个服务器。
实话说这不是一个完整功能的 LDAP 服务器，但我也不需要一个完整功能的，我只需要一些功能能够正常工作，这非常容易解决。
现在我不会对于实现那些古董级协议感到兴奋了，但从零开始重新实现的最快的方法。&lt;/p&gt;
&lt;h4&gt;解决了问题但是没有学到什么&lt;/h4&gt;
&lt;p&gt;我很烂，最擅长与偷懒。但当我想在 LaTex 中插入一个图标时，我不想去读一个 391 页长的手册。现在我知道你会假设我是一个懒惰的不靠谱的性格的人，我也知道我应该先去阅读手册，但我想要在十分钟之内就把图表插入到我的文档中，阅读 391 页长的手册实在不是一个好方法。
当要解决一个问题的时候我会去找一个快速的解决方案，但长期来看，这将是灾难性的。
将文档带到真正的生产环境中，我在 Tex/LaTex 和 XSLT-FO 以及我自己的 Erlguten 之间犹豫。
每三年一次我就有种强烈的冲动想要用后记的方式重写我的所有文档，然后我就会深呼吸直达这种感觉消失。
我猜 Giambattista Bondoni 在 1818 年制作 Manuale Tipografico 是没有特别关心制作排版一页需要耗费一周时间，但我们现在有更多的时间因为我们有机器帮助完成枯燥且危险以及我们不能做正确的事情。
我问过我的老板，他是否需要漂亮的幻灯篇来演讲。他说需要，要我在明天事前做好给他。这就没留给我时间去学习 Tex（我才可能需要一年），没时间实现自己的排版语言（需要 5-10 年），没时间把它记录下来（一周时间），最终我只能用 PowerPoint 了。&lt;/p&gt;
&lt;h4&gt;恶劣的编程环境&lt;/h4&gt;
&lt;p&gt;如果你在这种情形下，你将理解我所说的编程是相当困难的。因为办公室就是设计成是编程变得更加困难。我们有开放式的工作空间，噪杂的环境破坏了专注力，手机影响我们，互联网也会分散我们的注意力。
幸运的是我们还好似有地方不被打扰的，那就是睡觉。很多的编程问题就是在睡觉的时候解决的。
这么做有两种方法，在睡觉前记住很多问题，然后睡觉，第二天你醒来就发现一些问题就解决了，很容易。
第二种方法就是在睡觉前将你的问题贴到网上，发条 tweet，第二天已经有人将解决方案告诉你了。
要成为一个优秀的程序员需要很长时间，你需要学习很多很多的东西，你需要知道当你在一个问题上卡住了能够请教谁。&lt;/p&gt;
&lt;h4&gt;令人吃惊但是是真的&lt;/h4&gt;
&lt;p&gt;当我写完这篇文章，我想要检查内容的拼写，emacs-ispell 罢工了，我一直使用的拼写检查程序，没有发现 aspell。
我的 emacs 拼写检查器在这台机器上忠实工作了好多年，就在我抱怨我花了太多时间维护修改本不应该坏的东西的时候 emacs 拼写检查器决定崩溃。
我不相信上帝有恶意，也不相信我房间里面左手变得沙发和右手边的沙发的物理定律不同，但有直接证据证明是不通的。
我不明白我的拼写检查器会不工作，所有东西都是正常的，我没有修改任何东西。我安装了一个新版本的 Erlang 以及安装了 Julia，并写了一些讲义自从上次使用拼写检查一个文档。
幸运的是十一分的 Google 搜索起作用了。第二个建议关于如何解决问题以及他们最终起作用了，我也不知道为什么 emacs 不能找到 aspell，没有时间去找到答案。
我猜有些事情我们永远都不知道答案。&lt;/p&gt;
&lt;h3&gt;原文&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://joearms.github.io/2014/02/07/why-programming-is-difficult.html"&gt;Why Programming is Difficult&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="translate"></category></entry><entry><title>Django one-to-one relationships</title><link href="https://breakwire.me/django-one-to-one-relationships.html" rel="alternate"></link><published>2015-06-16T00:01:39+08:00</published><updated>2015-06-16T00:01:39+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-06-16:/django-one-to-one-relationships.html</id><summary type="html">&lt;p&gt;Django one-to-one relationships&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Many-to-one relationships&lt;/h2&gt;
&lt;p&gt;一对一关系，一对一关系应该使用来分离抽象模型的，不让一张表里面的字段那么多，那么乱。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;models.py&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;              &lt;span class="c1"&gt;# __unicode__ on Python 2&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; the place&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OneToOneField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;serves_hot_dogs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;serves_pizza&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;              &lt;span class="c1"&gt;# __unicode__ on Python 2&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; the restaurant&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Waiter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;restaurant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;              &lt;span class="c1"&gt;# __unicode__ on Python 2&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; the waiter at &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Restaurant&lt;/code&gt; 表中的 &lt;code&gt;place&lt;/code&gt; 字段是 和 &lt;code&gt;Place&lt;/code&gt; 表是一对一的关系，且手动设置成了主键，一家餐厅有一个地址，这样把模型都分开来，虽然查询的时候可能比较麻烦，但这样分开来能更好的抽象模型的关系，我的应用里面也能够这么做，一个表中的字段太多，有的能够分离到一对一的关系中，也更好理解些。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;python manage.py shell&lt;/code&gt; API 用法&lt;/h3&gt;
&lt;h4&gt;实例化 &lt;code&gt;Place&lt;/code&gt; 对象&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Demon Dogs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;944 W. Fullerton&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Ace Hardware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1013 N. Ashland&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;实例化 &lt;code&gt;Restaurant&lt;/code&gt; 对象，将前面实例化好的的 &lt;code&gt;Place&lt;/code&gt; 对象绑定上去&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serves_hot_dogs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serves_pizza&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;通过 &lt;code&gt;Restaurant&lt;/code&gt; 获取其地点&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;通过 &lt;code&gt;Place&lt;/code&gt; 获取其绑定的 &lt;code&gt;Restaurant&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurane&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;code&gt;p2&lt;/code&gt; 没有绑定任何 &lt;code&gt;Restaurant&lt;/code&gt; 对象&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ObjectDoesNotExist&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ObjectDoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;There is no restaurant here.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;There&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;使用 &lt;code&gt;hasattr&lt;/code&gt; 避免捕捉异常&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;重新绑定 &lt;code&gt;Place&lt;/code&gt; 对象到 &lt;code&gt;Restaurant&lt;/code&gt; 中&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ace&lt;/span&gt; &lt;span class="n"&gt;Hardware&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ace&lt;/span&gt; &lt;span class="n"&gt;Hardware&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;r&lt;/code&gt; 的地点原来是 &lt;code&gt;p1&lt;/code&gt;，重新绑定成 &lt;code&gt;p2&lt;/code&gt;，验证已经变成了 &lt;code&gt;p2&lt;/code&gt; 的地址。
重新设置回来：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;不能绑定一个没有保存到数据库中的对象到另一个对象中，否则会触发 &lt;code&gt;ValueError&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Demon Dogs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;944 W. Fullerton&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serves_hot_dogs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serves_pizza&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cannot assign &amp;quot;&amp;lt;Place: Demon Dogs&amp;gt;&amp;quot;: &amp;quot;Place&amp;quot; instance isn&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restaurant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serves_hot_dogs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serves_pizza&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cannot assign &amp;quot;&amp;lt;Restaurant: Demon Dogs the restaurant&amp;gt;&amp;quot;: &amp;quot;Restaurant&amp;quot; instance isn&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这上面的错误其实有两个，第一是 &lt;code&gt;p3&lt;/code&gt; 实例化没有保存，然后就是 第二行完全没来由，没有实例化任何 &lt;code&gt;Restaurant&lt;/code&gt; 对象就要把 &lt;code&gt;p3&lt;/code&gt; 绑定上去，触发两个 &lt;code&gt;ValueError&lt;/code&gt; 异常。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django 1.8 的改变：
前面也好几处提过了，绑定未保存的对象将会静默数据丢失，不会引发任何异常。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;其他用法就是增删改差了&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ace&lt;/span&gt; &lt;span class="n"&gt;Hardware&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ace&lt;/span&gt; &lt;span class="n"&gt;Hardware&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Place&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place__pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place__name__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Demon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Restaurant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place__address__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ashland&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waiter_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Joe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Waiter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Joe&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;waiter&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Waiter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;restaurant__place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Waiter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Joe&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;waiter&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Waiter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;restaurant__place__name__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Demon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Waiter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Joe&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;waiter&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;Demon&lt;/span&gt; &lt;span class="n"&gt;Dogs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;restaurant&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="django"></category></entry><entry><title>Djanog many-to-one relationships</title><link href="https://breakwire.me/django-many-to-one-relationships.html" rel="alternate"></link><published>2015-06-13T14:28:08+08:00</published><updated>2015-06-13T14:28:08+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-06-13:/django-many-to-one-relationships.html</id><summary type="html">&lt;p&gt;Django many-to-one relationships&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Many-to-one relationships&lt;/h2&gt;
&lt;p&gt;三个数据库 API 例子中的第二个，有时候分不清，多对一和一对多，现在有点分得清了，但是有些查询方面还是有点糊，&lt;code&gt;QuerySet&lt;/code&gt; 这搞得，简单的查询很容易搞定，但是数据库模型设置的复杂了，或者要查询的东西复杂了，就搞不太明白了，而且基础的教程里面都没有讲，要自己去查文档。&lt;/p&gt;
&lt;h3&gt;我自己的应用模型实例&lt;/h3&gt;
&lt;p&gt;刚结合自己的应用的数据库模型，稍稍搞清了模型的多对一，一对多关系，先说在我自己的模型：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;读不下去&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag_name&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book_Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="c1"&gt;# Book Info 14 objects in total. (Book cover didn&amp;#39;t add yet)&lt;/span&gt;
   &lt;span class="n"&gt;isbn10&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;isbn13&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="c1"&gt;# My Customise Tags 想读、正在读、读过、!!! 读不下去!!!（独创标签，仅此一家！！！）&lt;/span&gt;
   &lt;span class="n"&gt;customise_tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Note&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="c1"&gt;# Book Notes. You can take some notes for one book your owned.&lt;/span&gt;
   &lt;span class="n"&gt;book_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book_Info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;省略了一些没用的字段，&lt;code&gt;Book_Info&lt;/code&gt; 这张表有一些基本的字段，都是 &lt;code&gt;models.CharField&lt;/code&gt;，&lt;code&gt;customise_tag&lt;/code&gt; 这个字段和 &lt;code&gt;Tag&lt;/code&gt; 这张表就是多对多的关系。&lt;code&gt;Note&lt;/code&gt; 中定义了一个 &lt;code&gt;book_info = models.ForeignKey(Book_Info, blank=True. null=True)&lt;/code&gt;，这个就说明 &lt;code&gt;Note&lt;/code&gt; 表中的 &lt;code&gt;book_info&lt;/code&gt; 字段是 &lt;code&gt;Note&lt;/code&gt; 表的外键，一个 &lt;code&gt;Book_Info&lt;/code&gt; 可以对应多个 &lt;code&gt;Note&lt;/code&gt;，一对多关系。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;models.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;下面这个示例就是文档中的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EmailField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;              &lt;span class="c1"&gt;# __unicode__ on Python 2&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;headline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;pub_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="n"&gt;reporter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;              &lt;span class="c1"&gt;# __unicode__ on Python 2&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;

   &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个模型中，&lt;code&gt;reporter&lt;/code&gt; 字段是 &lt;code&gt;Article&lt;/code&gt; 表的外键，一个 &lt;code&gt;Reporter&lt;/code&gt; 可以对应多个 &lt;code&gt;Article&lt;/code&gt;，刚才一想，好像又不太对了……怎么老是要搞这个字面上的解释呢，看来这个数据库还得多看书，表和字段的抽象关系理不怎么清啊。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;python manage.py shell&lt;/code&gt; API 用法&lt;/h3&gt;
&lt;h4&gt;实例化 &lt;code&gt;Reporter&lt;/code&gt; 对象，&lt;code&gt;save()&lt;/code&gt; 存到数据库中&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Paul&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Jones&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;paul@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;实例化 &lt;code&gt;Article&lt;/code&gt;，将已经实例化的 &lt;code&gt;Reporter&lt;/code&gt; 对象绑定到 &lt;code&gt;Article&lt;/code&gt; 中&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;This is a test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pub_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;绑定外键关系之前必须要保存对象，Django 1.8 前这么做会触发 &lt;code&gt;ValueError&lt;/code&gt; 异常，1.8 之后不会触发异常，数据静默丢失。&lt;/p&gt;
&lt;h4&gt;从 &lt;code&gt;Article&lt;/code&gt; 对象获得 &lt;code&gt;Reporter&lt;/code&gt; 对象&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;从 &lt;code&gt;Reporter&lt;/code&gt; 对象实例化 &lt;code&gt;Article&lt;/code&gt; 对象，直接将实例化的 &lt;code&gt;Article&lt;/code&gt; 绑定到已实例化 &lt;code&gt;Reporter&lt;/code&gt; 对象中&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;John&amp;#39;s second story&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pub_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s second story&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;先实例化 &lt;code&gt;Article&lt;/code&gt; 对象，再通过 &lt;code&gt;article_set.add&lt;/code&gt; 绑定 &lt;code&gt;Reporter&lt;/code&gt; 对象&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Paul&amp;#39;s story&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pub_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2006&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_article2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s second story&amp;gt;, &amp;lt;Article: Paul&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;story&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;绑定上面同一个 &lt;code&gt;Article&lt;/code&gt; 对象到不同的 &lt;code&gt;Reporter&lt;/code&gt; 对象中，它就变了&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_article2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_article2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Paul&lt;/span&gt; &lt;span class="n"&gt;Jones&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;原来 &lt;code&gt;new_article2&lt;/code&gt; 的 &lt;code&gt;reporter&lt;/code&gt; 是 &lt;code&gt;r&lt;/code&gt; &lt;code&gt;&amp;lt;Reporter: John Smith&amp;gt;&lt;/code&gt;，现在变成了 &lt;code&gt;&amp;lt;Reporter: Paul Jones&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;h4&gt;绑定错误的对象就会引发异常&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Article&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s second story&amp;gt;, &amp;lt;Article: This is a test&amp;gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Paul&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s story&amp;gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将 &lt;code&gt;Reporter&lt;/code&gt; 对象绑定包另一个 &lt;code&gt;Reporter&lt;/code&gt; 对象上会引发 &lt;code&gt;TypeError&lt;/code&gt; 异常。&lt;/p&gt;
&lt;h4&gt;其他&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headline__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter__first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# filter 两个条件，转到 SQL 中就是 WHERE 和 AND 语句&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter__first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reporter__last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter__pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# 下面三条语句的结果是一样的&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__headline__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__headline__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__headline__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__headline__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__reporter__first_name__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__reporter__first_name__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__reporter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article__headline__startswith&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="django"></category></entry><entry><title>Django many-to-many relationalships</title><link href="https://breakwire.me/django-many-to-many-relationships.html" rel="alternate"></link><published>2015-05-25T01:12:07+08:00</published><updated>2015-05-25T01:12:07+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-05-25:/django-many-to-many-relationships.html</id><summary type="html">&lt;p&gt;Django many-to-many relationalships&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Many-to-many relationalships&lt;/h2&gt;
&lt;p&gt;这篇是 Django 文档中的一些例子，在 tutorial 中没有全部展示的东西看例子很容易就明白了，这里我就大概翻译一下，也作为自己的一个笔记。&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;models.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;多对多关系，是在模型中用 &lt;code&gt;ManyToManyField&lt;/code&gt; 定义。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;

      &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;    &lt;span class="c1"&gt;# 这里是单元素元组请注意，有一个逗号&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;headline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;publications&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;

   &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;    &lt;span class="c1"&gt;# 同样是单元素元组请注意逗号&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Article&lt;/code&gt; 是一张表，有 &lt;code&gt;headline&lt;/code&gt; 和 &lt;code&gt;publication&lt;/code&gt; 两个字段，&lt;code&gt;publication&lt;/code&gt; 字段对应 &lt;code&gt;Publication&lt;/code&gt; 这张表，多对多关系，One Article can have mutiple Publication and one Publication can have Mutiple Publication。下面就是演示 &lt;code&gt;python manage.py shell&lt;/code&gt; 中的 API 用法：&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;python manage.py shell&lt;/code&gt; API 用法&lt;/h3&gt;
&lt;h4&gt;实例化 &lt;code&gt;Publication&lt;/code&gt; 对象，&lt;code&gt;save()&lt;/code&gt; 存到数据库中&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Python Journel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Science News&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Science Weekly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;实例化 &lt;code&gt;Article&lt;/code&gt;，与 &lt;code&gt;Publicaton&lt;/code&gt; 联系起来&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Django let&amp;#39;s you build Web apps easily&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;piblications&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里把前面实例化的三个 &lt;code&gt;Publication&lt;/code&gt; 全部加到 a2 中了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headlinde = &amp;quot;NASA use Python&amp;quot;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publications&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publications&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重复添加也没有问题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实例化 &lt;code&gt;Article&lt;/code&gt; 的同时添加 &lt;code&gt;Publication&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_publication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Highlings for Children&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看每个 &lt;code&gt;Article&lt;/code&gt; 对应的 &lt;code&gt;Publication&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publications&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Journal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publications&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Highlights&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Children&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Science&lt;/span&gt; &lt;span class="n"&gt;News&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Science&lt;/span&gt; &lt;span class="n"&gt;Weekly&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Journal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可通过 &lt;code&gt;Publication&lt;/code&gt; 关联的 &lt;code&gt;Article&lt;/code&gt; 查看，&lt;code&gt;QuerySet&lt;/code&gt; 对象&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NASA&lt;/span&gt; &lt;span class="n"&gt;uses&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Django&lt;/span&gt; &lt;span class="n"&gt;lets&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;Web&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt; &lt;span class="n"&gt;easily&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NASA&lt;/span&gt; &lt;span class="n"&gt;uses&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Publication&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NASA&lt;/span&gt; &lt;span class="n"&gt;uses&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后就是各种 API，增删改查，没什么多说的，摸索两下就知道怎么用了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;publications&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;publications&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="django"></category></entry><entry><title>Django 多对多查询</title><link href="https://breakwire.me/django-many-to-many.html" rel="alternate"></link><published>2015-05-19T21:47:57+08:00</published><updated>2015-05-19T21:47:57+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-05-19:/django-many-to-many.html</id><summary type="html">&lt;p&gt;Django 多对多查询&lt;/p&gt;</summary><content type="html">&lt;h3&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Django 框架中外键就是 QuerySet  对象，刚开始我一直没明白很多复杂的查询在 Django 里面怎么实现，昨天在 StackOverflow 上问了下，果然就搞明白了，这下有的就好办多了：&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;models.py&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;


&lt;span class="c1"&gt;# Create your models here.&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag_name&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;publish_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;update_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一篇文章有多个标签，&lt;code&gt;Article&lt;/code&gt; 表中 &lt;code&gt;tag&lt;/code&gt; 字段是 &lt;code&gt;Tag&lt;/code&gt; 表的多对多外键，我要在文章列表做首页的地方怎么把每篇文章的标签全列出来我就不明白了，在 &lt;code&gt;views.py&lt;/code&gt; 里面能通过 &lt;code&gt;id&lt;/code&gt; 先把这篇文章取出来，再把对应的 &lt;code&gt;tag&lt;/code&gt; 取出来，两个参数列表传到模板中进行渲染：&lt;code&gt;post = Article.objects.get(id=str(id))    tags = post.tag.all()&lt;/code&gt;，这个倒是能理解。&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;views.py&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-publish_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;paginator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Paginator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;post_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;PageNotAnInteger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;post_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;EmptyPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="n"&gt;post_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;home.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;post_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;post_list&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里只把全部文章取出来，然后按发布时间倒序排列，还进行了分页，四篇一页，放在 &lt;code&gt;post_list&lt;/code&gt; 这个参数列表中，然后在给 &lt;code&gt;home.html&lt;/code&gt; 渲染：&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;home.html&lt;/code&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% raw %}
{% block content %}
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blog-post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       {% for post in post_list %}
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blog-post-title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% url &amp;#39;detail&amp;#39; id=post.id %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ post.title }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blog-post-meta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;发布时间：&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label label-primary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ post.publish_time | date:&amp;#39;Y/m/d&amp;#39; }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;更新时间：&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label label-primary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ post.update_time | date:&amp;#39;Y/m/d&amp;#39; }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;目录：&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label label-primary&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% url &amp;#39;category&amp;#39; post.category %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ post.category | title}}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;标签：&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp
               {% for tag in post.tag.all %}
                   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label label-primary&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ tag }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               {% endfor %}
               &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                   {{ post.content|custom_markdown | truncatewords:5}}
               &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label label-primary&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% url &amp;#39;detail&amp;#39; id=post.id %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Read More &amp;gt;&amp;gt;&amp;gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
       {{&amp;quot;{% endfor &amp;quot;}}%}

       {% if post_list.object_list and post_list.paginator.num_pages &amp;gt; 1 %}
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pager&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       {% if post_list.has_previous %}
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;?page={{ post_list.previous_page_number }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;上一页&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       {% endif %}

      {% if post_list.has_next %}
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;?page={{ post_list.next_page_number }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;下一页&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       {% endif %}
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       {% endif %}
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- /.blog-post --&amp;gt;&lt;/span&gt;
{% endblock %}
{% endraw %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关键就在于：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% raw %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;标签：&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;nbsp
{% for tag in post.tag.all %}
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;label label-primary&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ tag }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endfor %}
{% endraw %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最开始已经把每篇文章通过 &lt;code&gt;for&lt;/code&gt; 循环放在 &lt;code&gt;post&lt;/code&gt; 里面了，想读单独一篇的文章的标签就再用 &lt;code&gt;for&lt;/code&gt; 循环 &lt;code&gt;for tag in post.tag.all&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;还是要多看文档……&lt;/p&gt;</content><category term="django"></category></entry><entry><title>Two posters i made</title><link href="https://breakwire.me/tow-posters-i-made.html" rel="alternate"></link><published>2015-04-30T10:27:08+08:00</published><updated>2015-04-30T10:27:08+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-04-30:/tow-posters-i-made.html</id><summary type="html">&lt;p&gt;Two posters i made&lt;/p&gt;</summary><content type="html">&lt;p&gt;两张海报，我拍的照片，用 iOS 上一个叫 Posters 的 App 做的。&lt;/p&gt;
&lt;p&gt;Live what you love.&lt;/p&gt;
&lt;p&gt;&lt;img alt="poster1" src="/images/poster1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It does not matter how slowly you go, as long as you do not stop.&lt;/p&gt;
&lt;p&gt;&lt;img alt="poster2" src="/images/poster2.jpg"&gt;&lt;/p&gt;</content><category term="design"></category><category term="poster"></category></entry><entry><title>Django Blog Frontend Reframe</title><link href="https://breakwire.me/django-blog-frontend-reframe.html" rel="alternate"></link><published>2015-04-19T10:19:48+08:00</published><updated>2015-04-19T10:19:48+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-04-19:/django-blog-frontend-reframe.html</id><summary type="html">&lt;p&gt;Django Blog Frontend Reframe&lt;/p&gt;</summary><content type="html">&lt;p&gt;重构了前端界面，用的 &lt;a href="http://designmodo.github.io/Flat-UI/"&gt;Flat-UI&lt;/a&gt;，好看多了，效果见图，还要吧右边的 sidebar 提上来，提到和 NO MAN'S LAND 标题一个高度，那就正好一屏显示联系方式和下面的几个连接。效果见图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-blog" src="/images/django-blog.png"&gt;&lt;/p&gt;
&lt;h3&gt;2015-6-9&lt;/h3&gt;
&lt;p&gt;又重新改了改，双栏设计感觉不太好，图已更新。&lt;/p&gt;</content><category term="frontend"></category></entry><entry><title>Django 博客上线</title><link href="https://breakwire.me/django-blog-deploy-online.html" rel="alternate"></link><published>2015-03-26T20:45:15+08:00</published><updated>2015-03-26T20:45:15+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-03-26:/django-blog-deploy-online.html</id><summary type="html">&lt;p&gt;Django 博客上线&lt;/p&gt;</summary><content type="html">&lt;p&gt;这个 Django 做的博客 &lt;a href="http://breakwire.me"&gt;MO MAN'S LAND&lt;/a&gt; 终于是用域名配置好上线了。用 nginx 作为服务器，查了一堆资料看怎么配置，最后还是摸索出来了。一直看人家配置的时候用的 8000 端口，然后 socket 用的 8001 端口，我也就这么做了，然后在 Godaddy 上把不带 www 的 A record 设置指向 VPS，&lt;code&gt;HOST&lt;/code&gt; 设置为&lt;code&gt;@&lt;/code&gt;，&lt;code&gt;POINT TO&lt;/code&gt; 设置为 VPS 的 IP，nginx 上&lt;code&gt;server_name&lt;/code&gt; 设置为&lt;code&gt;breakwire.me&lt;/code&gt;，然后用域名去访问就显示&lt;code&gt;Welcome to nginx!&lt;/code&gt;，不知道是为什么。昨天下午的时候想到去 stackoverflow 上问问吧，很快就有人回复了，把 8000 端口改到默认的 80 就行了，我一试，嘿，果然是这样，我就又问能不能不用默认的 80 端口，人家说不能…… &lt;a href="http://stackoverflow.com/questions/29252958/how-can-i-use-my-godaddy-domain-for-my-django-app"&gt;How can I use my godaddy domain for my Django App&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在这个东西还是有些 bug，把 bugfix 和待实现功能记在这边吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图床贴图过大直接就要错乱，不知道怎么回事。&lt;/li&gt;
&lt;li&gt;待实现功能有两个，一个是 RSS 订阅，还有一个是时间分类功能，类别分类倒是搞定了，在首页，归档，单独文章里面都能点击，时间分类好像也没有必要，一般都是在右侧边栏有个年月，每个月的文章都放在里面，这个倒是可以实现一下。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看了这么多美剧，各种俚语双关语都学了不少，得锻炼锻炼英文写作，从 quora 和 stackoverflow 答题开始，还有，就是在写 git commit 信息的时，经常不知道改怎么写，老是要写中式英语，太难看了，得多练练。&lt;/p&gt;</content><category term="devops"></category><category term="django"></category></entry><entry><title>Django 应用部署填坑</title><link href="https://breakwire.me/about-deploy-django-web-app-something-i-missed.html" rel="alternate"></link><published>2015-03-17T15:57:00+08:00</published><updated>2015-03-17T15:57:00+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-03-17:/about-deploy-django-web-app-something-i-missed.html</id><summary type="html">&lt;p&gt;Django 应用部署填坑&lt;/p&gt;</summary><content type="html">&lt;p&gt;在测试 Django 应用能都在服务器上执行 &lt;code&gt;python manage.py runserver&lt;/code&gt;, 功能正常，要把开发配置改成部署配置之后还有关键的一步：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 删掉这个配置项&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个地方要把 &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; 删掉改成 &lt;code&gt;STATIC_ROOT = "/home/chen/DjangoProjects/my_blog/static"&lt;/code&gt;, 然后在执行 &lt;code&gt;python manage.py collectstatic&lt;/code&gt;, 这一步会把一些静态文件全复制到项目的静态文件夹下，这个步骤如果不执行的话就会发现部署之后后台的样式就没有了。&lt;/p&gt;</content><category term="devops"></category><category term="django"></category></entry><entry><title>Octopress 增加两个功能</title><link href="https://breakwire.me/add-two-new-features-for-octopress.html" rel="alternate"></link><published>2015-03-16T15:51:49+08:00</published><updated>2015-03-16T15:51:49+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2015-03-16:/add-two-new-features-for-octopress.html</id><summary type="html">&lt;p&gt;Octopress 增加两个功能&lt;/p&gt;</summary><content type="html">&lt;p&gt;之前又忍不住给 octopress 加了两个功能，都是参考郝海龙老师的一系列文章，一个是目录功能，还有一个是文章修改历史的功能。&lt;/p&gt;
&lt;p&gt;按照步骤一步步做下来没有什么问题，功能也是正常，效果也还不错，贴两张图看下效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="octopress1" src="/images/octopress1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="octopress2" src="/images/octopress2.png"&gt;&lt;/p&gt;
&lt;h3&gt;参考链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://shengmingzhiqing.com/blog/octopress-lean-modification-5.html/"&gt;Octopress 精益修改 (5)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="octopress"></category></entry><entry><title>基于 Octopress 和 GitHub 的个人博客搭建——安装</title><link href="https://breakwire.me/octopress-install.html" rel="alternate"></link><published>2014-09-23T10:03:54+08:00</published><updated>2014-09-23T10:03:54+08:00</updated><author><name>Chen Jian</name></author><id>tag:breakwire.me,2014-09-23:/octopress-install.html</id><summary type="html">&lt;p&gt;基于 octopress 和 GitHub 的个人博客搭建——安装&lt;/p&gt;</summary><content type="html">&lt;p&gt;Octopress 是基于 jeklly 的开源博客引擎，静态界面 + Markdown + Git + 不需要服务器，搭建于 GitHub Pages 托管，配置还是十分简单的。暑假的时候看到有人写过 Blog，也尝试了一下，遇到了各种各样问题。由于没有学过 Ruby，在添加各种插件的尝试中也是有各种问题，前后重复了不下二三十次，暑假的时候安装好了一次，也调整好了主题 CSS，上上周上课的时候也不知道改动了什么文件，就给彻底搞坏了，花了好久才修好 Orz。这过程中还顺带学了 Git，Terminal 和 Vim 都是十分酷的东西，把步骤整理一下备忘。&lt;/p&gt;
&lt;h3&gt;0.  Git 和 Ruby 环境&lt;/h3&gt;
&lt;p&gt;这两个可以用 Homebrew 安装，Homebrew 安装、使用参考&lt;a href="http://brew.sh/index_zh-cn.html"&gt;Homebrew&lt;/a&gt;。安装完成后查看版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git —version
ruby --version
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;1.  Octopress git clone 到本地&lt;/h3&gt;
&lt;p&gt;进入主目录 octopress 文件夹下安装相关依赖项及 Ruby 相关问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/imathis/octopress.git octopress
&lt;span class="nb"&gt;cd&lt;/span&gt; octopress
gem install bundler
rbenv rehash
bundle install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;gem install bundler&lt;/code&gt; 如提示权限问题这条命令可能要加上：&lt;code&gt;sudo&lt;/code&gt;。
&lt;code&gt;rbenv rehash&lt;/code&gt; 执行会提示没有这条命令，这个是 Ruby 的环境管理工具，也是通过 Homebrew 安装：&lt;code&gt;brew rbenv&lt;/code&gt;。
安装完成后检查是否可用：&lt;code&gt;rbenv -v&lt;/code&gt;。
如还有问题就参考这里：&lt;a href="http://www.jianshu.com/p/ACs3kA"&gt;Rbenv的一些使用记录&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;支线任务完成再次回到主线继续安装依赖项：
&lt;code&gt;bundle install&lt;/code&gt;
每当切换 Ruby 版本和执行 &lt;code&gt;bundle install&lt;/code&gt; 后都必须执行一次 &lt;code&gt;rbenv rehash&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;2. 继续安装默认主题或者是安装第三方主题&lt;/h3&gt;
&lt;p&gt;各种主题参考：&lt;a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes"&gt;3rd Party Octopress Themes&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rake install    &lt;span class="c1"&gt;# 安装默认主题&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我这里用的是 &lt;a href="https://github.com/lucaslew/whitespace"&gt;whitespace&lt;/a&gt; 主题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/lucaslew/whitespace.git .themes/whitespace
rake install&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;whitespace&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
rake generate    &lt;span class="c1"&gt;# 生成静态界面&lt;/span&gt;
rake preview    &lt;span class="c1"&gt;# localhost:4000 端口预览，预览完成 Ctrl+C&lt;/span&gt;
rake deploy    &lt;span class="c1"&gt;# 部署&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. 在 GitHub 上进行部署&lt;/h3&gt;
&lt;p&gt;GitHub 创建一个 repository，名为&lt;code&gt;yourBlogname.github.io&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rake setup_github_pages    &lt;span class="c1"&gt;# input your repository&amp;#39;s url&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后就是用Git 本地文件上传至GitHub 仓库：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .    &lt;span class="c1"&gt;# 工作区全部修改提交至暂存区&lt;/span&gt;
git commit -m &lt;span class="s2"&gt;&amp;quot;first commit&amp;quot;&lt;/span&gt;    &lt;span class="c1"&gt;# 添加commit 信息&lt;/span&gt;
git push origin &lt;span class="nb"&gt;source&lt;/span&gt;   &lt;span class="c1"&gt;# 提交至source 分支&lt;/span&gt;
rake deploy    &lt;span class="c1"&gt;# 部署&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到这里结束就已经搭建完成了，但是里面什么东西都没有。 octopress 目录中&lt;code&gt;_config.yml&lt;/code&gt; 是配置文件，里面保存这配置信息，博客名称，第三方组件设置信息，这个就留着第二篇在写吧。&lt;/p&gt;
&lt;p&gt;还有就是建立电脑 SSH Key 链接到 GitHub 的问题，很容易，直接看 GitHub 的英文说明都能看得懂：&lt;a href="https://help.github.com/articles/generating-ssh-keys"&gt;Generating SSH Keys&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;4. 发布文章&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rake new_post&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;# 生成 source/_post/YYYY-MM-DD-title.markdown 文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编辑好文章之后从第四步的 &lt;code&gt;git add .&lt;/code&gt;，接下来四个命令就完成了文章的发布。&lt;/p&gt;
&lt;h3&gt;5. 参考链接&lt;/h3&gt;
&lt;p&gt;当时自己搭建的时候各种问题都遇到了也查了很多其他人 Blog，贴几个连接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sumnous.github.io/blog/2014/05/11/octopress-build-blog-on-github/"&gt;Octopress Build Blog on Github 个人建站实录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/"&gt;象写程序一样写博客：搭建基于github的博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="octopress"></category></entry></feed>